name: Unit Test

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  unit-test:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.1
    - name: Setup GitHub Action
      uses: actions/setup-node@v1
      with:
        node-version: 20
    - name: Install dependencies
      run: npm install
    - name: Run Trivy Scan
      id: trivy
      run: |
        # Run Trivy scan for all vulnerabilities
        if ! /usr/local/bin/trivy fs --scanners vuln --format json . > trivy-results.json; then
          echo "Trivy scan failed"
          exit 1
        fi
        
        # Check if the file exists and is not empty
        if [ ! -s trivy-results.json ]; then
          echo "No vulnerabilities found"
          echo "{\"vulnerabilities\": []}" > formatted-results.json
          exit 0
        fi
        
        # Check for vulnerabilities and create formatted output
        if ! jq -r '
          {
            vulnerabilities: [
              (.Results // [])[] | 
              select(.Vulnerabilities) | 
              .Vulnerabilities[] | {
                package: .PkgName,
                severity: .Severity,
                vulnerability_id: .VulnerabilityID,
                installed_version: .InstalledVersion,
                fixed_version: .FixedVersion,
                title: .Title,
                description: .Description,
                path: .Target
              }
            ]
          }
        ' trivy-results.json > formatted-results.json; then
          echo "Error processing scan results"
          echo "{\"vulnerabilities\": []}" > formatted-results.json
          exit 0
        fi
        
        # Set environment variables for next steps
        TOTAL_COUNT=$(jq '.vulnerabilities | length' formatted-results.json)
        HIGH_CRIT_COUNT=$(jq '[.vulnerabilities[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' formatted-results.json)
        if [ "$TOTAL_COUNT" -gt 0 ]; then
          echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
          echo "VULN_COUNT=$TOTAL_COUNT" >> $GITHUB_ENV
        fi
        if [ "$HIGH_CRIT_COUNT" -gt 0 ]; then
          echo "HIGH_CRITICAL_FOUND=true" >> $GITHUB_ENV
          echo "HIGH_CRIT_COUNT=$HIGH_CRIT_COUNT" >> $GITHUB_ENV
        fi
    - name: Post Vulnerabilities as GitHub Comment
      if: env.VULNERABILITIES_FOUND == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('formatted-results.json', 'utf8'));
          // Create comment header with emoji and count
          let comment = `### üîç Security Scan Results\n\n`;
          const highCritCount = process.env.HIGH_CRIT_COUNT || 0;
          if (highCritCount > 0) {
            comment += `‚õîÔ∏è **Action Required:** ${highCritCount} Critical/High severity vulnerabilities found\n\n`;
          }
          comment += `Found ${process.env.VULN_COUNT} total vulnerabilities\n\n`;
          // Group by severity with collapsible sections
          const severityOrder = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN'];
          const severityEmojis = {
            'CRITICAL': 'üî¥',
            'HIGH': 'üü†',
            'MEDIUM': 'üü°',
            'LOW': 'üü¢',
            'UNKNOWN': '‚ö™'
          };
          // Group vulnerabilities by severity
          const grouped = {};
          results.vulnerabilities.forEach(vuln => {
            grouped[vuln.severity] = grouped[vuln.severity] || [];
            grouped[vuln.severity].push(vuln);
          });
          // Generate markdown for each severity level
          severityOrder.forEach(severity => {
            if (grouped[severity] && grouped[severity].length > 0) {
              comment += `#### ${severityEmojis[severity]} ${severity} Severity (${grouped[severity].length})\n\n`;
              // Group by package name for better organization
              const byPackage = {};
              grouped[severity].forEach(vuln => {
                byPackage[vuln.package] = byPackage[vuln.package] || [];
                byPackage[vuln.package].push(vuln);
              });
              // List vulnerabilities by package
              Object.keys(byPackage).sort().forEach(pkg => {
                comment += `<details>\n`;
                comment += `<summary><b>${pkg}</b> (${byPackage[pkg].length} issues)</summary>\n\n`;
                byPackage[pkg].forEach(vuln => {
                  comment += `- **${vuln.vulnerability_id}**: ${vuln.title}\n`;
                  comment += `  - Current: ${vuln.installed_version} ‚Üí Fixed: ${vuln.fixed_version || 'No fix available'}\n`;
                  if (vuln.description) {
                    const shortDesc = vuln.description.length > 100 ?
                      vuln.description.substring(0, 100) + '...' :
                      vuln.description;
                    comment += `  - ${shortDesc}\n`;
                  }
                  comment += `\n`;
                });
                comment += `</details>\n\n`;
              });
            }
          });
          // Update remediation section
          comment += `### Remediation\n`;
          if (process.env.HIGH_CRITICAL_FOUND === 'true') {
            comment += `‚ö†Ô∏è **Action Required:** Critical/High severity vulnerabilities must be fixed before merging\n\n`;
          }
          comment += `- Update vulnerable packages to their fixed versions where available\n`;
          comment += `- Run \`trivy fs --scanners vuln .\` locally to see more details\n`;
          // Post the comment
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request ? context.payload.pull_request.number : context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    - name: Fail if Critical/High vulnerabilities found
      if: env.HIGH_CRITICAL_FOUND == 'true'
      run: |
        echo "‚ùå Security scan failed: ${HIGH_CRIT_COUNT} Critical/High severity vulnerabilities detected"
        echo "Please review the PR comments for details and fix the Critical/High severity issues before merging"
        exit 1
    - name: Test
      run: npm run unit_test:ci
      env:
        GH_UNIT_TEST_ENV: true
        BRAND_NAME: "Fyle"
        WEBPAGE_TITLE: "Fyle Integrations Settings"
        BRAND_ID: "fyle"
        SUPPORT_EMAIL: "staging-1-in"
        HELP_ARTICLE_DOMAIN: "support@fylehq.com"
        ENV_ID: "https://help.manageexpenses.capitalone-fylehq.com"
        FYLE_CLIENT_ID: "lolo" 
        CALLBACK_URI: "http://lolo.fyle.tech/callback"
        CLUSTER_DOMAIN_API_URL: "http://lolo.fyle.tech"
        FYLE_APP_URL: "http://lolo.fyle.tech"
        SI_API_URL: "http://lolo.fyle.tech"
        SAGE300_API_URL: "http://lolo.fyle.tech"
        QBD_DIRECT_API_URL": "http://lolo.fyle.tech"
    - name: Unit Test Coverage
      uses: fylein/comment-test-coverage@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        path: coverage/coverage-summary.json
        title: Unit Test Coverage
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
