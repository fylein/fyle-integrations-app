"use strict";(globalThis.webpackChunkfyle_integrations_app=globalThis.webpackChunkfyle_integrations_app||[]).push([[4913],{"./src/app/core/models/common/import-settings.model.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{G:()=>ImportSettingsModel});var _angular_forms__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),_rxweb_reactive_form_validators__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@rxweb/reactive-form-validators/__ivy_ngcc__/fesm2015/rxweb-reactive-form-validators.js");class ImportSettingsModel{static getCustomFieldOption(){return[{attribute_type:"custom_field",display_name:"Create a Custom Field",source_placeholder:null,is_dependent:!1}]}static createFormGroup(data){return new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.cw({source_field:new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NI(data.source_field||"",_rxweb_reactive_form_validators__WEBPACK_IMPORTED_MODULE_1__.CM.unique()),destination_field:new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NI(data.destination_field||"",_rxweb_reactive_form_validators__WEBPACK_IMPORTED_MODULE_1__.CM.unique()),import_to_fyle:new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NI(data.import_to_fyle||!1),is_custom:new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NI(data.is_custom||!1),source_placeholder:new _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NI(data.source_placeholder||null)})}static constructFormArray(importSettingsMappingSettings,accountingAppFields){const expenseFieldFormArray=[],mappedFieldMap=new Map,unmappedFieldMap=new Map;return accountingAppFields.forEach((accountingAppField=>{const mappingSetting=importSettingsMappingSettings.find((setting=>setting.destination_field===accountingAppField.attribute_type)),fieldData=mappingSetting||{destination_field:accountingAppField.attribute_type,import_to_fyle:!1,is_custom:!1,source_field:"",source_placeholder:null};mappingSetting?mappedFieldMap.set(accountingAppField.attribute_type,fieldData):unmappedFieldMap.set(accountingAppField.attribute_type,fieldData)})),accountingAppFields.forEach((accountingAppField=>{const fieldData=mappedFieldMap.get(accountingAppField.attribute_type);fieldData&&expenseFieldFormArray.push(this.createFormGroup(fieldData))})),0===mappedFieldMap.size&&accountingAppFields.forEach((accountingAppField=>{if(expenseFieldFormArray.length<3){const fieldData=unmappedFieldMap.get(accountingAppField.attribute_type);fieldData&&expenseFieldFormArray.push(this.createFormGroup(fieldData))}})),expenseFieldFormArray}static constructMappingSettingPayload(expenseFieldArray){return expenseFieldArray.filter((field=>field.destination_field&&field.source_field)).map((field=>({source_field:field.source_field.toUpperCase(),destination_field:field.destination_field,import_to_fyle:field.import_to_fyle,is_custom:"PROJECT"!==field.source_field.toUpperCase()&&"COST_CENTER"!==field.source_field.toUpperCase(),source_placeholder:field.source_placeholder})))}}},"./src/app/core/services/common/accounting-export.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{b:()=>AccountingExportService});var tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),_api_service__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/core/services/common/api.service.ts"),_workspace_service__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/core/services/common/workspace.service.ts"),_helper_service__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/core/services/common/helper.service.ts");let AccountingExportService=class AccountingExportService{constructor(apiService,workspaceService,helper){this.apiService=apiService,this.workspaceService=workspaceService,this.helper=helper,this.workspaceId=this.workspaceService.getWorkspaceId(),helper.setBaseApiURL()}getAccountingExportSummary(version){return"v1"===version?this.apiService.get(`/workspaces/${this.workspaceId}/export_detail/`,{}):this.apiService.get(`/workspaces/${this.workspaceId}/accounting_exports/summary/`,{})}getExportableAccountingExportCount(){const apiParams={status__in:[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.Nm.READY,_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.Nm.FAILED,_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.Nm.FATAL]};return this.apiService.get(`/workspaces/${this.workspaceId}/accounting_exports/count/`,apiParams)}getAccountingExports(type,status,exportableAccountingExportIds,limit,offset,selectedDateFilter,exportedAt){const apiParams={type__in:type,status__in:status,limit,offset};if(exportableAccountingExportIds?.length&&(apiParams.id__in=exportableAccountingExportIds),selectedDateFilter){const exportedAtLte=selectedDateFilter.startDate.toLocaleDateString().split("/"),exportedAtGte=selectedDateFilter.endDate.toLocaleDateString().split("/");apiParams.exported_at__lte=`${exportedAtLte[2]}-${exportedAtLte[1]}-${exportedAtLte[0]}T00:00:00`,apiParams.exported_at__gte=`${exportedAtGte[2]}-${exportedAtGte[1]}-${exportedAtGte[0]}T23:59:59`}return exportedAt&&(apiParams.exported_at__gte=exportedAt),this.apiService.get(`/workspaces/${this.workspaceId}/accounting_exports/`,apiParams)}importExpensesFromFyle(version){return this.apiService.post(`/workspaces/${this.workspaceId}/fyle/${"v1"===version?"expense_groups":"accounting_exports"}/sync/`,{})}};AccountingExportService.ctorParameters=()=>[{type:_api_service__WEBPACK_IMPORTED_MODULE_1__.s},{type:_workspace_service__WEBPACK_IMPORTED_MODULE_2__.A},{type:_helper_service__WEBPACK_IMPORTED_MODULE_3__.W}],AccountingExportService=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({providedIn:"root"})],AccountingExportService)},"./src/app/core/services/common/dashboard.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>DashboardService});var tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_api_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/services/common/api.service.ts"),_workspace_service__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/core/services/common/workspace.service.ts"),rxjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),_helper_service__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/core/services/common/helper.service.ts");let DashboardService=class DashboardService{constructor(apiService,workspaceService,helper){this.apiService=apiService,this.workspaceService=workspaceService,this.helper=helper,this.workspaceId=this.workspaceService.getWorkspaceId(),helper.setBaseApiURL()}getExportableAccountingExportIds(version){return this.apiService.get(`/workspaces/${this.workspaceId}/fyle/${"v1"===version?"exportable_expense_groups":"exportable_accounting_exports"}/`,{})}triggerAccountingExport(){return this.apiService.post(`/workspaces/${this.workspaceId}/exports/trigger/`,{})}getExportErrors(version){return"v1"===version?this.apiService.get(`/v2/workspaces/${this.workspaceId}/errors/`,{is_resolved:!1}):this.apiService.get(`/workspaces/${this.workspaceId}/accounting_exports/errors/`,{is_resolved:!1})}getTasks(limit,status,expenseGroupIds,taskType,next){const apiParams={limit,offset:0};if(status.length){apiParams["status__in"]=status}if(expenseGroupIds.length){apiParams["expense_group_id__in"]=expenseGroupIds}if(taskType){apiParams["type__in"]=taskType}return next?this.apiService.get(next.split("/api")[1],{}):this.apiService.get(`/workspaces/${this.workspaceId}/tasks/all/`,apiParams)}getAllTasksInternal(limit,status,expenseGroupIds,taskType,allTasks){const that=this;return that.getTasks(limit,status,expenseGroupIds,taskType,allTasks.next).toPromise().then((taskResponse=>(0===allTasks.count?allTasks=taskResponse:(allTasks.count=taskResponse.count,allTasks.next=taskResponse.next,allTasks.previous=taskResponse.previous,allTasks.results=allTasks.results.concat(taskResponse.results)),taskResponse.next?that.getAllTasksInternal(limit,status,expenseGroupIds,taskType,allTasks):allTasks)))}getAllTasks(status,expenseGroupIds=[],taskType=[]){return(0,rxjs__WEBPACK_IMPORTED_MODULE_3__.D)(this.getAllTasksInternal(500,status,expenseGroupIds,taskType,{count:0,next:null,previous:null,results:[]}))}};DashboardService.ctorParameters=()=>[{type:_api_service__WEBPACK_IMPORTED_MODULE_0__.s},{type:_workspace_service__WEBPACK_IMPORTED_MODULE_1__.A},{type:_helper_service__WEBPACK_IMPORTED_MODULE_2__.W}],DashboardService=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({providedIn:"root"})],DashboardService)},"./src/app/core/services/common/export-log.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>ExportLogService});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_api_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/services/common/api.service.ts"),_workspace_service__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/core/services/common/workspace.service.ts");let ExportLogService=class ExportLogService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService,this.workspaceId=this.workspaceService.getWorkspaceId()}getSkippedExpenses(limit,offset){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/fyle/expenses/`,{limit,offset})}getExpenseGroups(state,limit,offset,selectedDateFilter,exportedAt){const params={limit,offset,tasklog__status:state};if(selectedDateFilter){const startDate=selectedDateFilter.startDate.toLocaleDateString().split("/"),endDate=selectedDateFilter.endDate.toLocaleDateString().split("/");params.exported_at__gte=`${startDate[2]}-${startDate[1]}-${startDate[0]}T00:00:00`,params.exported_at__lte=`${endDate[2]}-${endDate[1]}-${endDate[0]}T23:59:59`}return exportedAt&&(params.exported_at__gte=exportedAt),this.apiService.get(`/workspaces/${this.workspaceId}/fyle/expense_groups/`,params)}};ExportLogService.ctorParameters=()=>[{type:_api_service__WEBPACK_IMPORTED_MODULE_0__.s},{type:_workspace_service__WEBPACK_IMPORTED_MODULE_1__.A}],ExportLogService=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({providedIn:"root"})],ExportLogService)},"./src/app/core/services/common/mapping.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{y:()=>MappingService});var tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_api_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/services/common/api.service.ts"),_workspace_service__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/core/services/common/workspace.service.ts"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),_helper_service__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/core/services/common/helper.service.ts"),_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let MappingService=class MappingService{constructor(apiService,workspaceService,helper){this.apiService=apiService,this.workspaceService=workspaceService,this.workspaceId=this.workspaceService.getWorkspaceId(),helper.setBaseApiURL()}getExportSettings(){return this.apiService.get(`/workspaces/${this.workspaceId}/export_settings/`,{})}getDestinationAttributes(attributeTypes,version,apiPath,accountType,active,displayName){const params={attribute_type__in:attributeTypes};return accountType&&(params.account_type=accountType),active&&(params.active=active),displayName&&(params.display_name__in=displayName),"v1"===version?this.apiService.get(`/workspaces/${this.workspaceId}/${apiPath}/destination_attributes/`,params):this.apiService.get(`/workspaces/${this.workspaceId}/mappings/destination_attributes/`,params)}getGroupedDestinationAttributes(attributeTypes,version,apiPath){return(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.D)(this.getDestinationAttributes(attributeTypes,version,apiPath).toPromise().then((response=>response?.reduce(((groupedAttributes,attribute)=>{const group=groupedAttributes[attribute.attribute_type]||[];return group.push(attribute),groupedAttributes[attribute.attribute_type]=group,groupedAttributes}),{ACCOUNT:[],EXPENSE_TYPE:[],EXPENSE_PAYMENT_TYPE:[],VENDOR:[],EMPLOYEE:[],CHARGE_CARD_NUMBER:[],TAX_DETAIL:[],JOB:[],BANK_ACCOUNT:[],CREDIT_CARD_ACCOUNT:[],ACCOUNTS_PAYABLE:[],TAX_CODE:[]}))))}getIntegrationsFields(app_name){return this.apiService.get(`/workspaces/${this.workspaceId}/${app_name}/fields/`,{})}getFyleFields(version){return this.apiService.get(`/workspaces/${this.workspaceId}/fyle/${"v1"===version?"expense_fields":"fields"}/`,{})}postEmployeeMappings(employeeMapping){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/employee/`,employeeMapping)}getMappingSettings(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/settings/`,{})}triggerAutoMapEmployees(){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/auto_map_employees/trigger/`,{})}getEndpoint(mappingPage,isCategoryMappingGeneric){if(isCategoryMappingGeneric)return"expense_attributes";switch(mappingPage){case"EMPLOYEE":return"employee_attributes";case"CATEGORY":return"category_attributes";default:return"expense_attributes"}}getGenericMappingsV2(pageLimit,pageOffset,destinationType,mappingState,alphabetsFilter,sourceType,isCategoryMappingGeneric){const workspaceId=this.workspaceService.getWorkspaceId(),isMapped=mappingState!==_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_3__.tE.UNMAPPED,params={limit:pageLimit,offset:pageOffset,mapped:mappingState===_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_3__.tE.ALL?_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_3__.tE.ALL:isMapped,destination_type:destinationType,source_type:sourceType};alphabetsFilter&&"All"!==alphabetsFilter&&(params.mapping_source_alphabets=alphabetsFilter);const endpoint=this.getEndpoint(sourceType,isCategoryMappingGeneric);return this.apiService.get(`/workspaces/${workspaceId}/mappings/${endpoint}/`,params)}getMappingStats(sourceType,destinationType,appName){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/mappings/stats/`,{source_type:sourceType,destination_type:destinationType,app_name:appName})}postCategoryMappings(mapping){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.post(`/workspaces/${workspaceId}/mappings/category/`,mapping)}postMapping(mapping){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/`,mapping)}};MappingService.ctorParameters=()=>[{type:_api_service__WEBPACK_IMPORTED_MODULE_0__.s},{type:_workspace_service__WEBPACK_IMPORTED_MODULE_1__.A},{type:_helper_service__WEBPACK_IMPORTED_MODULE_2__.W}],MappingService=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable)({providedIn:"root"})],MappingService)},"./src/app/core/services/common/storage.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>StorageService});var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let StorageService=class StorageService{constructor(){}set(key,data){localStorage.setItem(key,JSON.stringify(data))}get(key){const stringifiedItem=localStorage.getItem(key);return stringifiedItem?JSON.parse(stringifiedItem):null}remove(key){localStorage.removeItem(key)}};StorageService.ctorParameters=()=>[],StorageService=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({providedIn:"root"})],StorageService)},"./src/app/core/services/common/window.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{u:()=>WindowService});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let WindowService=class WindowService{constructor(){}get nativeWindow(){return window}redirect(url){this.nativeWindow.location.href=url}openInNewTab(url){this.nativeWindow.open(url,"_blank")}getOperatingSystem(){const userAgent=this.nativeWindow.navigator.userAgent;return userAgent.includes(_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.U5.WIN)?_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.U5.WIN:userAgent.includes(_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.U5.MAC)?_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_0__.U5.MAC:""}};WindowService.ctorParameters=()=>[],WindowService=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({providedIn:"root"})],WindowService)},"./src/app/core/services/common/workspace.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>WorkspaceService});var tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_storage_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/services/common/storage.service.ts"),_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),_api_service__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/core/services/common/api.service.ts"),_helper_service__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/core/services/common/helper.service.ts");let WorkspaceService=class WorkspaceService{constructor(storageService,apiService,helper){this.storageService=storageService,this.apiService=apiService,this.helper=helper,helper.setBaseApiURL()}importFyleAttributes(refresh){return this.apiService.post(`/workspaces/${this.getWorkspaceId()}/fyle/import_attributes/`,{refresh})}getWorkspace(orgId){return this.apiService.get("/workspaces/",{org_id:orgId})}postWorkspace(){return this.apiService.post("/workspaces/",{})}getWorkspaceId(){return this.storageService.get("workspaceId")}setWorkspaceId(workspaceId){this.storageService.set("workspaceId",workspaceId)}setOnboardingState(onboardingState){this.storageService.set("onboarding-state",onboardingState)}getOnboardingState(){const appInitialOnboardingState={[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.INTACCT]:_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__.kG.CONNECTION,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.GUSTO]:null,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.SAGE300]:_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__.MD.CONNECTION,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.BAMBOO_HR]:null,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.QBD]:_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__.Hi.CONNECTION,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.TRAVELPERK]:null,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.INTEGRATION]:"",[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.BUSINESS_CENTRAL]:_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__.N5.CONNECTION,[_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__._r.QBO]:_models_enum_enum_model__WEBPACK_IMPORTED_MODULE_1__.xM.CONNECTION},onboardingState=this.storageService.get("onboarding-state");return onboardingState||appInitialOnboardingState[this.helper.getAppName()]}getConfiguration(){return this.apiService.get(`/workspaces/${this.getWorkspaceId()}/configuration/`,{})}getWorkspaceGeneralSettings(){return this.apiService.get(`/workspaces/${this.getWorkspaceId()}/settings/general/`,{})}};WorkspaceService.ctorParameters=()=>[{type:_storage_service__WEBPACK_IMPORTED_MODULE_0__.V},{type:_api_service__WEBPACK_IMPORTED_MODULE_2__.s},{type:_helper_service__WEBPACK_IMPORTED_MODULE_3__.W}],WorkspaceService=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({providedIn:"root"})],WorkspaceService)},"./src/app/core/services/misc/user.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>UserService});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_common_storage_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/core/services/common/storage.service.ts");let UserService=class UserService{constructor(storageService){this.storageService=storageService}storeUserProfile(userProfile){this.storageService.set("user",userProfile)}getUserProfile(){return this.storageService.get("user")}};UserService.ctorParameters=()=>[{type:_common_storage_service__WEBPACK_IMPORTED_MODULE_0__.V}],UserService=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({providedIn:"root"})],UserService)},"./src/app/shared/components/configuration/configuration-confirmation-dialog/configuration-confirmation-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>ConfigurationConfirmationDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationConfirmationDialogComponent=class ConfigurationConfirmationDialogComponent{constructor(){this.showSecondaryCTA=!0,this.warningAccepted=new core.EventEmitter}acceptWarning(isWarningAccepted){this.warningAccepted.emit({hasAccepted:isWarningAccepted,event:this.event})}ngOnInit(){}};ConfigurationConfirmationDialogComponent.ctorParameters=()=>[],ConfigurationConfirmationDialogComponent.propDecorators={isWarningVisible:[{type:core.Input}],headerText:[{type:core.Input}],contextText:[{type:core.Input}],iconPath:[{type:core.Input}],confirmBtnText:[{type:core.Input}],showSecondaryCTA:[{type:core.Input}],event:[{type:core.Input}],warningAccepted:[{type:core.Output}]},ConfigurationConfirmationDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-confirmation-dialog",template:'<div>\n    <p-dialog [showHeader]="false" [modal]="true" [(visible)]="isWarningVisible" [draggable]="false" [style]="{width: \'468px\'}">\n        <div class="tw-px-24-px tw-py-22-px tw-border-b-1-px tw-border-b-box-color">\n            <div class="tw-flex tw-justify-between tw-items-center">\n                <div class="tw-flex">\n                    <img [src]="iconPath" class="tw-pr-12-px"/>\n                    <p class="tw-text-20-px tw-font-500 tw-text-normal-text-color">{{headerText}}</p>\n                </div>\n                <i class="pi pi-times tw-cursor-pointer" style="font-size: 12px" (click)="acceptWarning(false)"></i>\n            </div>\n        </div>\n        <div class="tw-pl-24-px tw-pr-10-px tw-pt-16-px tw-pb-24-px">\n            <div class="tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color" [innerHTML]="contextText">\n            </div>\n            <div class="tw-pt-26-px tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color">\n                Are you sure you want to continue?\n            </div>\n        </div>\n        <div class="tw-flex tw-justify-end tw-text-14-px tw-border-t-1-px tw-px-24-px tw-py-16-px">\n            <button *ngIf="showSecondaryCTA" type="button" class="cancel-btn" (click)="acceptWarning(false)">\n                Cancel\n            </button>\n            <button type="button" class="save-btn" pButton (click)="acceptWarning(true)">\n                {{confirmBtnText}}\n            </button>\n        </div>\n    </p-dialog>\n</div>\n',styles:[":host ::ng-deep .p-button {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important\n}\n\n.save-btn {\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    background-color: var(--mandatory-field-color) !important\n}\n\n.cancel-btn {\n\n    margin-right: 16px !important;\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    border-color: var(--box-color) !important;\n\n    background-color: var(--white) !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    padding-left: 16px !important;\n\n    padding-right: 16px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}"]})],ConfigurationConfirmationDialogComponent)},"./src/app/shared/components/configuration/configuration-connector/configuration-connector.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>ConfigurationConnectorComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts");let ConfigurationConnectorComponent=class ConfigurationConnectorComponent{constructor(){this.switchCompany=new core.EventEmitter,this.connectCompany=new core.EventEmitter,this.brandingConfig=branding_config.Wg}disconnect(){this.switchCompany.emit()}connect(){this.connectCompany.emit()}ngOnInit(){}};ConfigurationConnectorComponent.ctorParameters=()=>[],ConfigurationConnectorComponent.propDecorators={fyleOrgName:[{type:core.Input}],accountingAppTitle:[{type:core.Input}],accountingCompanyName:[{type:core.Input}],switchLinkText:[{type:core.Input}],isAccountingCompanyConnected:[{type:core.Input}],accountingCompanyConnectionInProgress:[{type:core.Input}],accountingCompanyTokenExpired:[{type:core.Input}],showDisconnect:[{type:core.Input}],switchCompany:[{type:core.Output}],connectCompany:[{type:core.Output}]},ConfigurationConnectorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-connector",template:'<div class="tw-flex tw-justify-center tw-items-center">\n    <div class="tw-text-center tw-py-80-px tw-pr-130-px tw-border-r-1-px  right-margin-style tw-items-center">\n        <h5 class="tw-text-14-px tw-text-sub-text-color tw-font-500 tw-pb-18-px">\n            {{brandingConfig.brandName}}\n        </h5>\n        <h3 class="tw-text-18-px tw-text-normal-text-color tw-font-500 tw-pb-16-px">\n            {{ fyleOrgName }}\n        </h3>\n    </div>\n    <div>\n        <img src="assets/gifs/disconnect.gif" height="100px" width="100px"/>\n    </div>\n    <div class="tw-text-center tw-py-70-px tw-pl-130-px left-margin-style tw-items-center">\n        <h5 class="tw-text-14-px tw-text-sub-text-color tw-font-500 tw-pb-18-px">\n            {{ accountingAppTitle }}\n        </h5>\n        <h3 *ngIf="!accountingCompanyConnectionInProgress && accountingCompanyName" class="tw-text-18-px tw-text-normal-text-color tw-font-500 tw-pb-16-px">\n            {{ accountingCompanyName }}\n        </h3>\n        <div *ngIf="accountingCompanyConnectionInProgress" class="tw-pb-8-px">\n            <app-loader [styleClass]="\'!tw-w-16-px !tw-h-16-px spinner-default\'"></app-loader>\n        </div>\n        <div class="tw-text-14-px tw-font-500">\n            <h4 *ngIf="!isAccountingCompanyConnected && !accountingCompanyConnectionInProgress && !accountingCompanyTokenExpired" class="tw-text-faded-text-color ">\n                No {{ accountingAppTitle }} is connected yet.\n            </h4>\n            <h4 *ngIf="!isAccountingCompanyConnected && !accountingCompanyConnectionInProgress && !accountingCompanyTokenExpired" (click)="connect()" class="tw-text-mandatory-field-color tw-cursor-pointer">\n                Connect to {{ accountingAppTitle }}\n            </h4>\n            <h4 *ngIf="!accountingCompanyConnectionInProgress && !accountingCompanyTokenExpired && showDisconnect" class="tw-text-faded-text-color">\n                Not the company that you wish to connect with?\n            </h4>\n            <h4 *ngIf="accountingCompanyConnectionInProgress" class="tw-text-faded-text-color tw-max-w-300-px tw-overflow-hidden tw-break-all">\n                Please hold on; we are fetching data from your {{ accountingAppTitle }} account, which may take a few seconds.\n            </h4>\n            <h4 *ngIf="accountingCompanyTokenExpired && !accountingCompanyConnectionInProgress" class="tw-text-faded-text-color ">\n                Token expired\n            </h4>\n            <h4 *ngIf="!accountingCompanyConnectionInProgress && accountingCompanyTokenExpired" (click)="connect()" class="tw-text-mandatory-field-color tw-cursor-pointer">\n                Re-Connect to {{ accountingAppTitle }}\n            </h4>\n            <h4 *ngIf="!accountingCompanyConnectionInProgress && showDisconnect" (click)="disconnect()" class="tw-text-mandatory-field-color tw-cursor-pointer">\n                {{ switchLinkText }}\n            </h4>\n        </div>\n    </div>\n</div>\n',styles:[".right-margin-style {\n  margin-right: -50px;\n}\n\n.left-margin-style {\n  margin-left: -50px;\n}"]})],ConfigurationConnectorComponent)},"./src/app/shared/components/configuration/configuration-custom-field-creation-dialog/configuration-custom-field-creation-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>ConfigurationCustomFieldCreationDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts");let ConfigurationCustomFieldCreationDialogComponent=class ConfigurationCustomFieldCreationDialogComponent{constructor(){this.saveCustomFieldFn=new core.EventEmitter,this.closeModelFn=new core.EventEmitter,this.existingFields=["employee id","organisation name","employee name","employee email","expense date","expense date","expense id","report id","employee id","department","state","reporter","report","purpose","vendor","category","category code","mileage distance","mileage unit","flight from city","flight to city","flight from date","flight to date","flight from class","flight to class","hotel checkin","hotel checkout","hotel location","hotel breakfast","currency","amount","foreign currency","foreign amount","tax","approver","project","billable","cost center","cost center code","approved on","reimbursable","receipts","paid date","expense created date"],this.brandingConfig=branding_config.Wg}saveCustomField(){this.saveCustomFieldFn.emit()}closeModel(){this.closeModelFn.emit()}ngOnInit(){}};ConfigurationCustomFieldCreationDialogComponent.ctorParameters=()=>[],ConfigurationCustomFieldCreationDialogComponent.propDecorators={customFieldForm:[{type:core.Input}],showCustomFieldCreationDialog:[{type:core.Input}],saveCustomFieldFn:[{type:core.Output}],closeModelFn:[{type:core.Output}]},ConfigurationCustomFieldCreationDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-custom-field-creation-dialog",template:'<div>\n    <p-dialog [dismissableMask]="true" [showHeader]="false" [modal]="true" [(visible)]="showCustomFieldCreationDialog" [draggable]="false" [style]="{width: \'468px\'}">\n        <div [formGroup]="customFieldForm">\n            <div class="tw-p-24-px tw-border-b-1-px tw-border-b-box-color">\n                <div class="tw-flex tw-justify-between tw-items-center">\n                    <p class="tw-text-20-px tw-font-500">Add new Custom Field</p>\n                    <i class="pi pi-times tw-cursor-pointer tw-text-12-px" (click)="closeModel()"></i>\n                </div>\n            </div>\n            <div *ngIf="existingFields.indexOf(customFieldForm.value.attribute_type?.toLowerCase()) !== -1">\n                <div class="tw-px-16-px tw-text-12-px tw-pt-12-px tw-flex">\n                    <span class="error-box tw-flex tw-p-4-px">\n                        <img class="tw-mb-16-px" src="assets/icons/error.svg"/>\n                        <h5 class="tw-ml-6-px">\n                            Oops! It looks like another field with the same name already exists in your {{brandingConfig.brandName}} account. Would you please\n                            give the field a different name?\n                        </h5>\n                    </span>\n                </div>\n            </div>\n            <div class="tw-p-24-px">\n                <p class="tw-pb-8-px tw-text-sub-text-color tw-text-14-px">\n                    Field Name <span class="tw-text-mandatory-field-color">*</span>\n                </p>\n                <input formControlName="attribute_type" type="text" class="tw-w-388-px tw-h-48-px" pInputText placeholder="Enter field type" [ngClass]="[customFieldForm.controls[\'attribute_type\'].touched && !customFieldForm.controls[\'attribute_type\'].valid && !customFieldForm.controls[\'attribute_type\'].disabled ? \'error-box\' : \'normal-box\']" required/>\n                <app-mandatory-error-message *ngIf="customFieldForm.controls[\'attribute_type\'].touched && !customFieldForm.controls[\'attribute_type\'].valid && !customFieldForm.controls[\'attribute_type\'].disabled" [customErrorMessage]="\'Enter a valid type\'"></app-mandatory-error-message>\n    \n                <p class="tw-pt-16-px tw-text-sub-text-color tw-text-14-px tw-pb-8-px">\n                    Placeholder Name <span class="tw-text-mandatory-field-color">*</span>\n                </p>\n                <input formControlName="source_placeholder" type="text" class="tw-w-388-px tw-h-48-px" pInputText placeholder="Enter field name" [ngClass]="[customFieldForm.controls[\'source_placeholder\'].touched && !customFieldForm.controls[\'source_placeholder\'].valid && !customFieldForm.controls[\'source_placeholder\'].disabled ? \'error-box\' : \'normal-box\']" required/>\n                <app-mandatory-error-message *ngIf="customFieldForm.controls[\'source_placeholder\'].touched && !customFieldForm.controls[\'source_placeholder\'].valid && !customFieldForm.controls[\'source_placeholder\'].disabled" [customErrorMessage]="\'Enter a valid Name\'"></app-mandatory-error-message>\n    \n                <div>\n                    <h5 class="tw-pt-16-px tw-text-sub-text-color tw-text-14-px tw-pb-8-px">\n                      Field Type\n                    </h5>\n                    <div class="tw-w-388-px tw-h-48-px">\n                      <input class="tw-w-388-px form-input-disabled" type="text" placeholder="Select" disabled>\n                    </div>\n                  </div>\n    \n                  <div class="label-section tw-pt-8">\n                    <div class="label-content tw-w-388-px">\n                      <h5 class="name-text sub-text-color tw-text-14-px">\n                        {{customFieldForm.value.attribute_type ? customFieldForm.value.attribute_type : \'Label\'}}\n                      </h5>\n                      <div class="form-field tw-pt-4-px">\n                        <input class="form-input tw-w-320-px" type="text" disabled\n                        [placeholder]="customFieldForm.value.source_placeholder ? customFieldForm.value.source_placeholder : \'Enter Text\'">\n                      </div>\n                    </div>\n                  </div>              \n                \n                <div class="tw-flex tw-justify-end tw-pt-24-px tw-text-14-px">\n                    <button type="button" class="cancel-btn" (click)="closeModel()">\n                        Cancel\n                    </button>\n                    <button type="button" class="save-btn" pButton [disabled]="!customFieldForm.valid || existingFields.indexOf(customFieldForm.value.attribute_type?.toLowerCase()) !== -1" (click)="saveCustomField()">\n                        Create and Save\n                    </button>\n                </div>\n            </div>\n        </div>\n    </p-dialog>\n</div>\n',styles:[".label-content {\n\n    height: 100px;\n\n    border-radius: 4px;\n\n    border-width: 1px;\n\n    border-color: var(--box-color);\n\n    background-color: var(--disabled-bg-color)\n}\n\n.name-text {\n\n    padding-top: 12px;\n\n    padding-right: 0px;\n\n    padding-bottom: 8px;\n\n    padding-left: 16px\n}\n\n.form-field {\n\n    padding-top: 8px;\n\n    padding-right: 16px;\n\n    padding-left: 16px;\n\n    padding-bottom: 22px\n}\n\n.form-input {\n\n    box-sizing: border-box;\n\n    height: 40px;\n\n    border-radius: 8px;\n\n    border-width: 1px;\n\n    border-color: var(--box-color);\n\n    background-color: var(--white);\n\n    padding-top: 10px;\n\n    padding-right: 0px;\n\n    padding-bottom: 10px;\n\n    padding-left: 14px\n}\n\n.save-btn {\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    background-color: var(--mandatory-field-color) !important\n}\n\n.cancel-btn {\n\n    margin-right: 16px !important;\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    border-color: var(--box-color) !important;\n\n    background-color: var(--white) !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    padding-left: 16px !important;\n\n    padding-right: 16px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .p-button {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important\n}\n\n.form-input-disabled {\n\n    box-sizing: border-box;\n\n    border-radius: 8px;\n\n    border-width: 1px;\n\n    border-color: var(--box-color);\n\n    background-color: var(--disabled-bg-color);\n\n    padding-top: 10px;\n\n    padding-right: 0px;\n\n    padding-bottom: 10px;\n\n    padding-left: 14px\n}"]})],ConfigurationCustomFieldCreationDialogComponent)},"./src/app/shared/components/configuration/configuration-import-field/configuration-import-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>ConfigurationImportFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),import_settings_model=__webpack_require__("./src/app/core/models/common/import-settings.model.ts"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let ConfigurationImportFieldComponent=class ConfigurationImportFieldComponent{constructor(){this.isDestinationFixedImport=!1,this.showWarningForDependentFields=new core.EventEmitter,this.brandingConfig=branding_config.Wg}get expenseFieldsGetter(){return this.form.get("expenseFields")}showOrHideAddButton(){return this.form.controls.expenseFields.value.length!==this.accountingFieldOptions.length}addExpenseField(){this.form.get("expenseFields").push(import_settings_model.G.createFormGroup({source_field:"",destination_field:"",import_to_fyle:!0,is_custom:!1,source_placeholder:null})),this.showAddButton=this.showOrHideAddButton()}hasDuplicateOption(formGroup,index,controlName){return formGroup.controls[controlName].valid}onDropdownChange(event,index){const selectedValue=event.value;this.fyleFieldOptions.find((field=>field.attribute_type===selectedValue))?.is_dependent?(this.form.get("expenseFields").at(index)?.get("import_to_fyle")?.setValue(!1),this.form.get("expenseFields").at(index)?.get("import_to_fyle")?.disable()):this.form.get("expenseFields").at(index)?.get("import_to_fyle")?.setValue(!0)}removeFilter(expenseField){expenseField.controls.source_field.patchValue(""),expenseField.controls.import_to_fyle.patchValue(!1),expenseField.controls.import_to_fyle.enable(),event?.stopPropagation()}onShowWarningForDependentFields(event,formGroup){event.checked||formGroup.value.source_field!==enum_model.rK.PROJECT||this.showWarningForDependentFields.emit()}isExpenseFieldDependent(expenseField){const isDependent=this.fyleFieldOptions.find((field=>field.attribute_type===expenseField.source_field))?.is_dependent;return!!isDependent}updateDependentField(sourceField,importToFyle){"PROJECT"===sourceField&&importToFyle||this.form.controls.isDependentImportEnabled.setValue(!1)}ngOnInit(){}};ConfigurationImportFieldComponent.ctorParameters=()=>[],ConfigurationImportFieldComponent.propDecorators={appName:[{type:core.Input}],form:[{type:core.Input}],accountingFieldOptions:[{type:core.Input}],fyleFieldOptions:[{type:core.Input}],defaultImportFields:[{type:core.Input}],costCategoryOption:[{type:core.Input}],costCodeFieldOption:[{type:core.Input}],dependentImportFields:[{type:core.Input}],dependentDestinationValue:[{type:core.Input}],isDestinationFixedImport:[{type:core.Input}],isCloneSettingView:[{type:core.Input}],showWarningForDependentFields:[{type:core.Output}]},ConfigurationImportFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-import-field",template:'<div [formGroup]="form">\n    <div *ngIf="!isDestinationFixedImport && !isCloneSettingView" class="fields-header" fxLayout="row" fxLayoutAlign="start center">\n        <div class="fields-header-text tw-pl-48-px tw-w-450-px">{{appName}} Dimensions</div>\n        <div class="fields-header-text tw-w-30-vw">{{brandingConfig.brandName}} Fields</div>\n        <div class="fields-header-text tw-flex tw-w-[10vw] tw-whitespace-nowrap">\n            Import to {{brandingConfig.brandName}}\n            <svg-icon-sprite src="info" width="20px" hight="20px" class="tw-text-faded-text-color" [pTooltip]="\'Importing a dimension syncs active values from \' + appName + \' every 24 hours. Deactivated values in \' + appName + \' will also be disabled in \' + brandingConfig.brandName + \'\'"></svg-icon-sprite>\n        </div>\n    </div>\n    <div class="tw-pl-48-px tw-mt-18px">\n        <div *ngFor="let defaultField of defaultImportFields">\n            <div class="tw-flex tw-pt-18-px">\n                <div>\n                    <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="{{ defaultField.destination_field | snakeCaseToSpaceCase | titlecase }}" disabled>\n                </div>\n                <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                <div class="tw-w-30-vw">\n                    <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="{{ defaultField.source_field | snakeCaseToSpaceCase | titlecase }}" disabled>\n                </div>\n                <div class="input-toggle-section tw-w-10-vw tw-pt-10-px">\n                    <p-inputSwitch [formControlName]="defaultField.formController"></p-inputSwitch>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div formArrayName="expenseFields" [ngClass]="[isDestinationFixedImport ? \'\' : \'tw-pl-48-px tw-mt-18px\']">\n        <div *ngFor="let expenseField of expenseFieldsGetter.controls; let i = index" [formGroupName]="i" [ngClass]="{\'tw-mt-24-px tw-pb-24-px\': isDestinationFixedImport, \'tw-rounded-lg tw-border-separator tw-border\': isDestinationFixedImport && !isCloneSettingView, \'tw-pr-24-px\': isCloneSettingView}">\n            <div *ngIf="isDestinationFixedImport">\n                <div [ngClass]="!isCloneSettingView ? \'tw-p-24-px\': \'tw-pl-24-px\'" class="tw-flex tw-justify-between">\n                    <div class="tw-w-3/4 tw-flex tw-items-start">\n                      <div class="tw-pr-16-px">\n                        <svg-icon-sprite src="{{isCloneSettingView ? \'arrow-tail-down\': \'import-setting\'}}" width="24px" height="24px" class="tw-block tw-ml-0" [ngClass]="isCloneSettingView ? \'tw-text-menu-inactive-text-color\' : \'tw-text-mandatory-field-color\'"></svg-icon-sprite>\n                      </div>\n                      <div>\n                        <h4 class="tw-text-slightly-normal-text-color" [ngClass]="isCloneSettingView ? \'tw-py-2-px tw-text-14-px\' : \'tw-text-16-px !tw-font-500\'">\n                            Import {{ expenseField.value.destination_field | snakeCaseToSpaceCase | titlecase }} from {{ appName }}\n                        </h4>\n                        <h5 *ngIf="!isCloneSettingView" class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4">\n                          The imported {{ expenseField.value.destination_field | snakeCaseToSpaceCase | titlecase }} from {{ appName }} will be a selectable field while creating an expense.\n                        </h5>        \n                      </div>\n                    </div>\n                    <div class="configuration--input-toggle-section">\n                      <p-inputSwitch formControlName="import_to_fyle"></p-inputSwitch>\n                    </div>\n                </div>\n            </div>\n            <div class="tw-flex tw-mt-24-px" [ngClass]="[isDestinationFixedImport ? \'tw-pl-60-px\' : \'\']">\n                <div>\n                    <p-dropdown appendTo="body" [options]="accountingFieldOptions" placeholder="Choose {{appName}} field" formControlName="destination_field"\n                        optionLabel="display_name" optionValue="attribute_type" [disabled]="isDestinationFixedImport" [ngClass]="{\'selectedAccItem !tw-text-slightly-normal-text-color\': isDestinationFixedImport}">\n                        <ng-template let-option pTemplate="item">\n                            <div>\n                                {{ option.display_name | snakeCaseToSpaceCase | titlecase }}\n                            </div>\n                        </ng-template>\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.display_name | snakeCaseToSpaceCase | titlecase }}\n                                </span>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                    <p *ngIf="expenseField.value.destination_field && !expenseField.valid && !hasDuplicateOption(expenseField, i, \'destination_field\')" class="tw-text-alert-toast tw-text-12-px tw-pt-4-px">\n                        {{appName}} Fields should be unique\n                    </p>\n                </div>\n                    <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                    <div class="tw-w-28-vw">\n                        <p-dropdown (onChange)="onDropdownChange($event, i)" appendTo="body" [options]="fyleFieldOptions" [placeholder]="\'Choose \' + brandingConfig.brandName + \' Expense field\'" formControlName="source_field"\n                        optionLabel="display_name" optionValue="attribute_type" [ngClass]="{\'selectedItem\': expenseField.value.source_field, \'filterDropdown\': !expenseField.value.source_field}">\n                            <ng-template let-option pTemplate="item">\n                            <div [ngClass]="{\'custom-option\': option.attribute_type === \'custom_field\'}">\n                                <svg-icon-sprite *ngIf="option.attribute_type === \'custom_field\'" src="add" width="20px" height="20px" class="icon-align"></svg-icon-sprite>\n                                {{ option.display_name }}\n                            </div>\n                            </ng-template>\n                            <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center ">\n                                <span>\n                                    {{ item.display_name }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(expenseField)"></i>\n                            </div>\n                            </ng-template>\n                      </p-dropdown>\n                      <p *ngIf="expenseField.value.source_field && !expenseField.valid && !hasDuplicateOption(expenseField, i, \'source_field\')" class="tw-text-alert-toast tw-text-12-px tw-pt-4-px">\n                        {{brandingConfig.brandName}} Fields should be unique\n                        </p>\n                    </div>\n                <p-inputSwitch *ngIf="!isDestinationFixedImport" (onChange)="onShowWarningForDependentFields($event, expenseField)" [pTooltip]="isExpenseFieldDependent(expenseField.value) ? \'You cannot import dependent fields\' : \'\' " (click)="updateDependentField(expenseField.value.source_field,expenseField.value.import_to_fyle)" formControlName="import_to_fyle" class="tw-pl-32-px input-toggle-section tw-pt-10-px"></p-inputSwitch>\n            </div>\n            <div class="tw-pt-26-px" *ngIf="expenseField.value.source_field===\'PROJECT\' && expenseField.value.import_to_fyle && expenseField.value.destination_field === dependentDestinationValue" [formGroup]="form">\n                <div class="tw-flex">\n                    <div>\n                        <input formControlName="isDependentImportEnabled" type="checkbox"/>\n                    </div>\n                    <label class="tw-pl-2 tw-text-14-px" for="checkbox">Import Cost Code and Cost Type from {{appName}} as dependent fields</label>\n                </div>\n                <div *ngIf="form.value.isDependentImportEnabled && dependentImportFields">\n                    <div *ngFor="let dependentField of dependentImportFields" class="tw-flex tw-pt-4">\n                        <div>\n                            <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-ml-40-px !tw-font-500 tw-w-260-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="{{dependentField.source_field}}" disabled>\n                        </div>\n                        <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                        <p-dropdown appendTo="body" class="tw-w-28-vw" [formControlName]="dependentField.formController" [options]="dependentField.options" optionLabel="attribute_type" placeholder="Select Expense Field" [disabled]="dependentField.isDisabled">\n                            <ng-template let-option pTemplate="item">\n                                <div [ngClass]="{\'custom-option\': option.attribute_type === \'custom_field\'}">\n                                  <svg-icon-sprite *ngIf="option.attribute_type === \'custom_field\'" src="add" width="20px" height="20px" class="icon-align"></svg-icon-sprite>\n                                  {{ option.display_name }}\n                                </div>\n                              </ng-template>\n                        </p-dropdown>\n                        <p-inputSwitch class="tw-pl-32-px input-toggle-section tw-pt-10-px" formControlName="dependentFieldImportToggle" [disabled]="true"></p-inputSwitch>\n                    </div>\n                </div>\n            </div>                      \n            <div class="tw-text-alert-toast tw-pt-4 tw-pl-1" *ngIf="form.get(\'expenseFields\')?.hasError(\'duplicatefyleFieldOptions\') || form.get(\'expenseFields\')?.hasError(\'duplicateaccountingFieldOptions\')">\n                *{{brandingConfig.brandName}} and {{appName}} Fields should be unique.\n            </div> \n        </div>                 \n    </div>\n    <div *ngIf="showOrHideAddButton() && !isDestinationFixedImport" class="add-button-container">\n        <svg-icon-sprite src="add" width="20px" height="20px" class="add-row-text" (click)="addExpenseField()"></svg-icon-sprite>\n        <a class="add-row-text tw-pl-2" (click)="addExpenseField()">\n            Add more fields\n        </a>\n    </div>  \n</div>\n',styles:[":host ::ng-deep .p-button {\n  width: -moz-fit-content !important;\n  width: fit-content !important;\n}\n\n.save-btn {\n  border-radius: 4px !important;\n  border-width: 1px !important;\n  background-color: var(--mandatory-field-color) !important;\n}\n\n.cancel-btn {\n  margin-right: 16px !important;\n  border-radius: 4px !important;\n  border-width: 1px !important;\n  border-color: var(--box-color) !important;\n  background-color: var(--white) !important;\n  padding-top: 10px !important;\n  padding-bottom: 10px !important;\n  padding-left: 16px !important;\n  padding-right: 16px !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-dropdown {\n  transform: scale(0.9);\n}\n\n.form-input-disabled {\n  border-radius: 8px;\n  border-width: 1px;\n  border-color: var(--box-color);\n  background-color: var(--disabled-bg-color);\n  padding-left: 12px;\n  padding-right: 12px;\n  padding-top: 0px;\n  padding-bottom: 14px;\n}\n\n.label-content {\n  height: 100px;\n  border-radius: 4px;\n  border-width: 1px;\n  border-color: var(--box-color);\n  background-color: var(--disabled-bg-color);\n}\n\n.name-text {\n  padding-left: 12px;\n  padding-top: 0px;\n  padding-right: 8px;\n  padding-bottom: 16px;\n}\n\n.form-field {\n  padding-top: 16px;\n  padding-bottom: 16px;\n  padding-left: 8px;\n  padding-right: 22px;\n}\n\n.form-input {\n  border-radius: 8px;\n  border-width: 1px;\n  border-color: var(--box-color);\n  background-color: var(--white);\n  padding-left: 12px;\n  padding-right: 12px;\n  padding-top: 0px;\n  padding-bottom: 14px;\n}\n\n.container {\n  display: flex;\n  justify-content: center;\n}\n\n.sub-text {\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n  border-radius: 8px;\n  border-width: 1px;\n  border-color: var(--separator);\n  background-color: var(--configuration-bg);\n  padding: 24px;\n}\n\n.sub-text-note {\n  display: flex;\n  align-items: flex-start;\n  align-self: stretch;\n  background-color: var(--info-section);\n  padding: 16px;\n  font-size: 14px;\n  font-weight: 400;\n  font-style: normal;\n  color: var(--faded-text-color);\n}\n\n.fields-header {\n  display: flex;\n}\n\n.fields-header-text {\n  font-weight: 500;\n  line-height: 16px;\n}\n\n:host ::ng-deep .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider::after {\n  position: absolute;\n  left: 0.5rem;\n  bottom: 1px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: 500;\n  color: var(--white);\n  --tw-content: 'Yes';\n  content: var(--tw-content);\n}\n\n:host ::ng-deep .p-inputswitch:not(.p-inputswitch-checked) .p-inputswitch-slider::after {\n  position: absolute;\n  left: 1.5rem;\n  bottom: 1px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: 500;\n  color: var(--white);\n  --tw-content: 'No';\n  content: var(--tw-content);\n}\n\n.add-button-container {\n  display: flex;\n  align-items: center;\n  padding-top: 1.75rem;\n  padding-left: 40px;\n}\n\n.add-row-text {\n  cursor: pointer;\n  color: var(--mandatory-field-color); /* Changes the cursor to a hand when hovering */\n}\n\n.delete-button {\n  cursor: pointer;\n}\n\n.custom-option {\n  display: flex;\n  color: var(--mandatory-field-color);\n}\n\n.icon-align {\n  margin-left: 0px;\n  margin-right: 6px;\n  vertical-align: middle;\n}\n\n:host ::ng-deep input {\n  font-size: 14px !important;\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger, :host ::ng-deep .selectedAccItem .p-dropdown-trigger {\n  display: none !important;\n}\n\n:host ::ng-deep .selectedAccItem .p-dropdown.p-disabled {\n  border-width: 1px !important;\n  border-color: var(--box-color) !important;\n  background-color: var(--disabled-bg-color) !important;\n}\n\n.error-box {\n  border-radius: 4px;\n  border-width: 1px;\n  border-color: var(--alert-toast);\n  background-color: var(--alert-toast);\n}"]})],ConfigurationImportFieldComponent)},"./src/app/shared/components/configuration/configuration-info-label/configuration-info-label.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>ConfigurationInfoLabelComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationInfoLabelComponent=class ConfigurationInfoLabelComponent{constructor(){}ngOnInit(){}};ConfigurationInfoLabelComponent.ctorParameters=()=>[],ConfigurationInfoLabelComponent.propDecorators={infoText:[{type:core.Input}]},ConfigurationInfoLabelComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-info-label",template:'<div>\n    <div class="info-label">\n        <div>\n            <svg-icon-sprite src="info" width="20" height="20" class="tw-text-info"></svg-icon-sprite>\n        </div>\n        <div class="info-label-text">\n            <p>{{infoText}}</p>\n        </div>\n    </div>\n</div>\n',styles:[".info-label {\n\n    display: flex !important;\n\n    align-items: flex-start !important;\n\n    justify-content: flex-start !important;\n\n    gap: 0.5rem !important;\n\n    align-self: stretch !important;\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    background-color: var(--info-section) !important;\n\n    padding: 12px !important\n}\n\n.info-label-text {\n\n    align-self: stretch !important;\n\n    font-size: 14px !important;\n\n    font-weight: 400 !important;\n\n    color: var(--faded-text-color) !important\n}"]})],ConfigurationInfoLabelComponent)},"./src/app/shared/components/configuration/configuration-multi-select/configuration-multi-select.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>ConfigurationMultiSelectComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");let ConfigurationMultiSelectComponent=class ConfigurationMultiSelectComponent{constructor(formBuilder){this.formBuilder=formBuilder}ngOnInit(){}};ConfigurationMultiSelectComponent.ctorParameters=()=>[{type:fesm2020_forms.qu}],ConfigurationMultiSelectComponent.propDecorators={options:[{type:core.Input}],form:[{type:core.Input}],iconPath:[{type:core.Input}],label:[{type:core.Input}],subLabel:[{type:core.Input}],placeholder:[{type:core.Input}],formControllerName:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],mandatoryErrorListName:[{type:core.Input}],customErrorMessage:[{type:core.Input}],isCloneSettingView:[{type:core.Input}]},ConfigurationMultiSelectComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-multi-select",template:'<div [formGroup]="form" [ngClass]="!isCloneSettingView ? \'tw-p-24-px\': \'\'" class="tw-flex tw-justify-between tw-items-center">\n    <div *ngIf="!isCloneSettingView" class="lg:tw-w-3/5 md:tw-w-1/2 tw-flex tw-items-start">\n        <div class="tw-pr-16-px">\n            <svg-icon-sprite *ngIf="iconPath" src="{{iconPath}}" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n        </div>\n        <div>\n            <h5 class="tw-text-14-px !tw-font-500">{{ label }}<app-mandatory-field *ngIf="isFieldMandatory"></app-mandatory-field></h5>\n            <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4" [innerHTML]="subLabel"></h5>\n        </div>\n    </div>\n    <div class="tw-pl-34-px">\n        <p-multiSelect [options]="options" styleClass="tw-z-2" [formControlName]="formControllerName" [defaultLabel]="placeholder" [ngClass]="[form.controls[formControllerName].invalid && isFieldMandatory ? \'error-box\' : \'normal-box\']">\n            <ng-template let-value pTemplate="selectedItems" >\n                <div *ngIf="form.value[formControllerName]?.length>0" class="tw-flex">\n                    <p *ngFor="let name of value;let i = index">{{ name | titlecase | snakeCaseToSpaceCase }}<span *ngIf="i !== value?.length-1">,&nbsp;</span></p>\n                </div>\n                <div *ngIf="form.value[formControllerName]?.length === 0" class="tw-text-placeholder">\n                    {{ placeholder }}\n                </div>\n            </ng-template>\n            <ng-template let-memo let-index="index" pTemplate="item">\n                \x3c!-- <div pDraggable="gens" pDroppable="gens" dragHandle=".barsHandle" (onDragStart)="onDragStart(index)" (onDrop)="onDrop(index)" >\n                    <p class="tw-text-sub-text-color tw-text-14-px">{{ gens | titlecase | snakeCaseToSpaceCase }}</p>\n                </div> --\x3e\n                <div>\n                    <p class="tw-text-sub-text-color tw-text-14-px">{{ memo | titlecase | snakeCaseToSpaceCase }}</p>\n                </div>\n            </ng-template>\n        </p-multiSelect>\n        <div>\n            <app-mandatory-error-message *ngIf="isFieldMandatory && form.controls[formControllerName].touched && form.value[formControllerName]?.length === 0" [listName]="mandatoryErrorListName" [customErrorMessage]="customErrorMessage"></app-mandatory-error-message>\n        </div>\n    </div>\n</div>\n',styles:[":host ::ng-deep .p-multiselect-label {\n\n    z-index: 1 !important;\n\n    width: 270px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    padding-top: 8px !important;\n\n    padding-bottom: 8px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-header, :host ::ng-deep .p-multiselect-panel .p-multiselect-items {\n\n    padding: 0px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\n\n    margin-bottom: 0px !important\n}\n\n:host ::ng-deep .error-box .p-multiselect {\n\n    border-color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .normal-box .p-multiselect {\n\n    border-color: var(--box-color) !important\n}\n\n:host ::ng-deep .normal-box .p-multiselect.p-focus {\n\n    border-color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .p-checkbox {\n\n    padding-top: 2px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\n\n    height: 32px !important;\n\n    padding-left: 16px !important;\n\n    padding-right: 16px !important;\n\n    padding-top: 0px !important;\n\n    padding-bottom: 0px !important\n}"]})],ConfigurationMultiSelectComponent)},"./src/app/shared/components/configuration/configuration-schedule-export/configuration-schedule-export.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>ConfigurationScheduleExportComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationScheduleExportComponent=class ConfigurationScheduleExportComponent{constructor(){this.isEmailPresent=!1}removeFilter(formField){formField.reset(),event?.stopPropagation()}isOverflowing(element){return element.offsetWidth<element.scrollWidth}ngOnInit(){}};ConfigurationScheduleExportComponent.ctorParameters=()=>[],ConfigurationScheduleExportComponent.propDecorators={form:[{type:core.Input}],iconPath:[{type:core.Input}],formControllerName:[{type:core.Input}],label:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],subLabel:[{type:core.Input}],options:[{type:core.Input}],placeholder:[{type:core.Input}],adminEmails:[{type:core.Input}],mandatoryErrorListName:[{type:core.Input}],customErrorMessage:[{type:core.Input}],isEmailPresent:[{type:core.Input}]},ConfigurationScheduleExportComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-schedule-export",template:'<div [formGroup]="form">\n    <div class="tw-p-24-px tw-flex tw-flex-row tw-justify-between tw-items-center">\n        <div class="lg:tw-w-3/5 md:tw-w-1/2 tw-flex tw-items-start">\n            <div [ngClass]="[iconPath || formControllerName === \'dayOfMonth\' || formControllerName === \'dayOfWeek\' || formControllerName === \'timeOfDay\' ? \'tw-pr-16-px tw-mt-4-px\' : \'tw-pr-40-px\']">\n                <svg-icon-sprite *ngIf="iconPath" src="{{iconPath}}" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n            </div>\n            <div>\n                <h5 class="tw-text-slightly-normal-text-color tw-text-14-px !tw-font-500">{{ label | snakeCaseToSpaceCase}}<app-mandatory-field *ngIf="isFieldMandatory"></app-mandatory-field></h5>\n                <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4" [innerHTML]="subLabel"></h5>\n            </div>\n        </div>\n        <div>\n            <div class="tw-pl-30-px tw-flex tw-justify-end tw-items-end">\n                <div class="tw-flex">\n                    <p-dropdown\n                        class="dropdown-size-schedule"\n                        appendTo="body"\n                        [options]="options"\n                        [formControlName]="formControllerName"\n                        [placeholder]="placeholder"\n                        [autoDisplayFirst]="false"\n                        [ngClass]="{\n                            \'error-box\': form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched,\n                            \'normal-box\': !(form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched),\n                            \'selectedItem\': form.controls[formControllerName].value,\n                            \'filterDropdown\': !form.controls[formControllerName].value\n                        }">\n                        <ng-template let-option pTemplate="item">\n                            <div #textElement \n                                [ngStyle]="{\'white-space\': \'nowrap\', \'overflow\': \'hidden\', \'text-overflow\': \'ellipsis\', \'max-width\': \'16rem\'}"\n                                [pTooltip]="isOverflowing(textElement) ? option.label : null" tooltipPosition="top">\n                                {{option.label}}\n                            </div>\n                        </ng-template>\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.label }}\n                                </span>\n                                <i class="pi pi-chevron-down"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                    <div class="tw-ml-16-px">\n                        <input type="text" class="tw-border-box-color !tw-w-100-px !tw-h-40-px !tw-bg-disabled-bg-color tw-text-slightly-normal-text-color" pInputText disabled [value]="form.value[formControllerName] > 1 ? \'Hours\' : \'Hour\'">\n                    </div>\n                </div>\n            </div>\n            <div [ngClass]="[formControllerName !== \'dayOfMonth\' ? \'tw-pl-34-px\' : \'tw-pl-70-px\', formControllerName === \'dayOfWeek\' ? \'tw-pl-30-px\' : \'tw-pl-34-px\']">\n                <app-mandatory-error-message *ngIf="isFieldMandatory && form.controls[formControllerName].touched && !form.controls[formControllerName].valid && !form.controls[formControllerName].disabled" [listName]="mandatoryErrorListName" [customErrorMessage]="customErrorMessage"></app-mandatory-error-message>\n            </div>\n        </div>\n    </div>\n    <div *ngIf="isEmailPresent">\n        <app-email-multi-select-field\n            [form]="form"\n            [label]="\'Send Error Notification to\'"\n            [isFieldMandatory]="false"\n            [mandatoryErrorListName]="\'email for error notification\'"\n            [subLabel]="\'Select or add an email address to notify upon import failure or integration error.\'"\n            [options]="adminEmails"\n            [iconPath]="\'expense\'"\n            [placeholder]="\'Select email address\'"\n            [formControllerName]="\'email\'">\n        </app-email-multi-select-field>\n    </div>\n</div>',styles:[":host ::ng-deep .error-box .p-dropdown {\n\n    border-color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown {\n\n    border-color: var(--box-color) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown.p-focus {\n\n    border-color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-dropdown {\n\n    width: 70px !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-disabled, .p-component:disabled {\n\n    opacity: 1\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n\n    display: none !important\n}"]})],ConfigurationScheduleExportComponent)},"./src/app/shared/components/configuration/configuration-select-field/configuration-select-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{i:()=>ConfigurationSelectFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),tracking_service=__webpack_require__("./src/app/core/services/integration/tracking.service.ts"),router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs"),snake_case_to_space_case_pipe=__webpack_require__("./src/app/shared/pipes/snake-case-to-space-case.pipe.ts"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts");let ConfigurationSelectFieldComponent=class ConfigurationSelectFieldComponent{constructor(trackingService,router){this.trackingService=trackingService,this.router=router,this.isDefaultFields=!1,this.optionLabel="value",this.searchOptionsDropdown=new core.EventEmitter,this.meridiemOption=["AM","PM"],this.timeOption=["01:00","01:30","02:00","02:30","03:00","03:30","04:00","04:30","05:00","05:30","06:00","06:30","07:00","07:30","08:00","08:30","09:00","09:30","10:00","10:30","11:00","11:30","12:00","12:30"],this.isPreviewDialogVisible=!1,this.isOnboarding=!1,this.isCCCExportTableVisible=!1,this.exportTableData=[{exportModule:"Expense Report",employeeMapping:"Employee",chartOfAccounts:"Expense Types",sageIntacctModule:"Time & Expense"},{exportModule:"Bill",employeeMapping:"Vendor",chartOfAccounts:"General Ledger Accounts",sageIntacctModule:"Accounts Payable"},{exportModule:"Journal Entry",employeeMapping:"Employee/Vendor",chartOfAccounts:"General Ledger Accounts",sageIntacctModule:"General Ledger"}],this.brandingConfig=branding_config.Wg}removeFilter(formField){formField.reset(),event?.stopPropagation()}isOverflowing(element){return element.offsetWidth<element.scrollWidth}showExportTable(){this.dialogHeader="Export Module",this.exportTypeIconPath=this.exportConfigurationIconPath,this.isPreviewDialogVisible=!0}showExportPreviewDialog(exportType){this.dialogHeader="Preview how "+(new snake_case_to_space_case_pipe.D).transform((new common.TitleCasePipe).transform(exportType))+" is made in "+this.appName;const index="reimbursableExportType"===this.formControllerName?0:1;this.exportTypeIconPath=this.exportTypeIconPathArray[index][exportType],this.isPreviewDialogVisible=!0}showIntacctExportTable(reimbursableExportType,creditCardExportType){this.trackingService.onClickEvent(enum_model.Rd.PREVIEW_INTACCT_EXPORT)}closeDialog(){this.isPreviewDialogVisible=!1}searchOptions(event){this.searchOptionsDropdown.emit({searchTerm:event.filter,destinationAttributes:this.destinationAttributes,destinationOptionKey:this.destinationOptionKey})}ngOnInit(){this.isOnboarding=this.router.url.includes("onboarding")}};ConfigurationSelectFieldComponent.ctorParameters=()=>[{type:tracking_service.e},{type:router.F0}],ConfigurationSelectFieldComponent.propDecorators={options:[{type:core.Input}],destinationAttributes:[{type:core.Input}],form:[{type:core.Input}],iconPath:[{type:core.Input}],label:[{type:core.Input}],subLabel:[{type:core.Input}],placeholder:[{type:core.Input}],formControllerName:[{type:core.Input}],simpleOptions:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],mandatoryErrorListName:[{type:core.Input}],customErrorMessage:[{type:core.Input}],showClearIcon:[{type:core.Input}],appName:[{type:core.Input}],exportConfigurationIconPath:[{type:core.Input}],exportTypeIconPathArray:[{type:core.Input}],isDefaultFields:[{type:core.Input}],destinationOptionKey:[{type:core.Input}],isOptionSearchInProgress:[{type:core.Input}],isDisabled:[{type:core.Input}],optionLabel:[{type:core.Input}],searchOptionsDropdown:[{type:core.Output}]},ConfigurationSelectFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-select-field",template:'<div [formGroup]="form" class="tw-p-24-px">\n    <div *ngIf="!isDefaultFields" class="tw-flex tw-flex-row tw-justify-between tw-items-center">\n        <div class="lg:tw-w-3/5 md:tw-w-1/2 tw-flex tw-items-start">\n            <div [ngClass]="[iconPath || formControllerName === \'dayOfMonth\' || formControllerName === \'dayOfWeek\' || formControllerName === \'timeOfDay\' ? \'tw-pr-16-px tw-mt-4-px\' : \'tw-pr-40-px\']">\n                <svg-icon-sprite *ngIf="iconPath" src="{{iconPath}}" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n            </div>\n\n            <div>\n                <h5 class="tw-text-slightly-normal-text-color tw-text-14-px !tw-font-500">{{ label | snakeCaseToSpaceCase}}<app-mandatory-field *ngIf="isFieldMandatory"></app-mandatory-field></h5>\n                <h5 *ngIf="formControllerName !== \'reimbursableExportType\' && formControllerName!==\'cccExportType\' && formControllerName !== \'creditCardExportType\'" class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4" [innerHTML]="subLabel"></h5>\n                <h5 *ngIf="formControllerName === \'reimbursableExportType\' || formControllerName === \'cccExportType\' || formControllerName === \'creditCardExportType\'" class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4">\n                    Choose the type of transaction record that you would like to create in {{ appName }} while exporting expenses from {{brandingConfig.brandName}}. <span *ngIf="exportTypeIconPath">Click<a (click)="showExportTable()" class="tw-cursor-pointer tw-text-hyperlink-color"> here</a> for more details.</span>\n                </h5>\n            </div>\n        </div>\n        <div>\n            <div class="p-field-checkbox tw-pl-34-px" *ngIf="destinationAttributes">\n                <p-dropdown appendTo="body" [options]="destinationAttributes" [optionLabel]="optionLabel" class="!tw-w-300-px" \n                    [formControlName]="formControllerName" \n                    [placeholder]="placeholder" \n                    [ngClass]="[form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched ? \'error-box\' : \'normal-box\']" \n                    [filter]="true" [filterBy]="optionLabel"\n                    (onFilter)="searchOptions($event)" \n                    [emptyFilterMessage]="isOptionSearchInProgress ? \'Searching...\' : \'No results found\'" \n                    [dropdownIcon]="isOptionSearchInProgress ? \'pi pi-spinner pi-spin\' : \'pi pi-chevron-down\'">\n                </p-dropdown>\n            </div>\n            <div *ngIf="options && !destinationAttributes && !simpleOptions">\n                <div class="p-field-checkbox tw-pl-34-px" *ngIf="formControllerName !== \'dayOfMonth\' && formControllerName !== \'dayOfWeek\' && formControllerName !== \'timeOfDay\' && !destinationAttributes">\n                    <p-dropdown appendTo="body" [options]="options" class="!tw-w-300-px"\n                    [formControlName]="formControllerName" [placeholder]="placeholder"\n                    [ngClass]="{\n                        \'error-box\': form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched,\n                        \'normal-box\': !(form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched),\n                        \'selectedItem\': form.controls[formControllerName].value,\n                        \'filterDropdown\': !form.controls[formControllerName].value\n                    }" [disabled]="isDisabled"\n                    >\n                    <ng-template let-option pTemplate="item">\n                        <div #textElement\n                            [ngStyle]="{\'white-space\': \'nowrap\', \'overflow\': \'hidden\', \'text-overflow\': \'ellipsis\', \'max-width\': \'16rem\'}"\n                            [pTooltip]="isOverflowing(textElement) ? option.label : null" tooltipPosition="top">\n                            {{option.label}}\n                        </div>\n                    </ng-template>\n                    <ng-template pTemplate="selectedItem" let-item>\n                        <div class="tw-flex tw-justify-between tw-items-center">\n                            <span>\n                                {{ item.label }}\n                            </span>\n                            <i *ngIf="!isDisabled" class="pi pi-times" (click)="removeFilter(form.controls[formControllerName])"></i>\n                        </div>\n                    </ng-template>\n                </p-dropdown>\n                    <div *ngIf="[\'JOURNAL_ENTRY\', \'EXPENSE_REPORT\', \'BILL\', \'CHARGE_CARD_TRANSACTION\', \'PURCHASE_INVOICE\', \'DIRECT_COST\', \'EXPENSE\', \'JOURNAL ENTRY\', \'CHECK\', \'CREDIT CARD PURCHASE\', \'DEBIT CARD EXPENSE\'].includes(form.controls[formControllerName].value)" class="sub-text tw-pt-3-px">\n                        <span>Click </span>\n                        <a class="tw-text-hyperlink-color !tw-cursor-pointer" (click)="showExportPreviewDialog(form.controls[formControllerName].value)">here</a>\n                        <span> to preview how it looks on {{appName}}</span>\n                    </div>\n                    <div *ngIf="form.controls[formControllerName].value===\'spent_at\' && isOnboarding" class="sub-text">\n                        <span>Using the Spend Date may lead to multiple single line<br>item entries.</span>\n                    </div>\n                </div>\n                <div class="tw-pl-30-px tw-flex tw-justify-end tw-items-end" *ngIf="formControllerName === \'dayOfMonth\' || formControllerName === \'dayOfWeek\' || formControllerName === \'timeOfDay\'">\n                    <div *ngIf="formControllerName === \'dayOfWeek\'" class="tw-mr-18-px dropdown-monthy">\n                        <p class="tw-font-400 tw-text-faded-text-color tw-text-14-px">Day</p>\n                        <p-dropdown appendTo="body" [options]="options" [formControlName]="formControllerName" [placeholder]="placeholder" [ngClass]="[form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched ? \'error-box\' : \'normal-box\']">\n                            <ng-template let-value pTemplate="selectedItem" >\n                                <div *ngIf="form.value[formControllerName]" class="tw-flex">\n                                    <p>{{ value | titlecase | snakeCaseToSpaceCase }}</p>\n                                </div>\n                                <div *ngIf="!form.value[formControllerName]" class="tw-text-placeholder">\n                                    {{ placeholder }}\n                                </div>\n                            </ng-template>\n                            <ng-template let-day pTemplate="item">\n                                <div>\n                                    <p class="tw-text-sub-text-color tw-text-14-px">{{ day | titlecase | snakeCaseToSpaceCase }}</p>\n                                </div>\n                            </ng-template>\n                        </p-dropdown>\n                    </div>\n                    <div *ngIf="formControllerName === \'dayOfMonth\'" class="p-field-checkbox tw-mr-20-px tw-pl-34-px">\n                        <p class="tw-font-400 tw-text-faded-text-color tw-text-14-px">Day</p>\n                        <p-dropdown appendTo="body" [options]="options" class="dropdown-monthy" [formControlName]="formControllerName" [placeholder]="placeholder" [ngClass]="[form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched ? \'error-box\' : \'normal-box\']"></p-dropdown>\n                    </div>\n                    <div class="tw-mr-18-px" [ngClass]="[formControllerName === \'dayOfMonth\' || formControllerName === \'dayOfWeek\' ? \'dropdown-time\' : \'dropdown-time-alone\']">\n                        <p class="tw-font-400 tw-text-faded-text-color tw-text-14-px">Time</p>\n                        <p-dropdown appendTo="body" [options]="timeOption" formControlName="timeOfDay" placeholder="Select Time for export" ></p-dropdown>\n                    </div>\n                    <div [ngClass]="[formControllerName === \'dayOfMonth\' || formControllerName === \'dayOfWeek\' ? \'dropdown-time\' : \'dropdown-time-alone\']">\n                        <p-dropdown appendTo="body" [options]="meridiemOption" formControlName="meridiem" placeholder="Select meridiem of time" ></p-dropdown>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf="simpleOptions && !options" class="p-field-checkbox tw-pl-34-px">\n                <p-dropdown appendTo="body" [options]="simpleOptions" [formControlName]="formControllerName" [placeholder]="placeholder" [ngClass]="[form.controls[formControllerName].invalid && isFieldMandatory && form.controls[formControllerName].touched ? \'error-box\' : \'normal-box\']">\n                    <ng-template let-value pTemplate="selectedItem" >\n                        <div *ngIf="form.value[formControllerName]" class="tw-flex">\n                            <p>{{ value | titlecase | snakeCaseToSpaceCase }}</p>\n                        </div>\n                        <div *ngIf="!form.value[formControllerName]" class="tw-text-placeholder">\n                            {{ placeholder }}\n                        </div>\n                    </ng-template>\n                    <ng-template let-memo pTemplate="item">\n                        <div>\n                            <p class="tw-text-sub-text-color tw-text-14-px">{{ memo | titlecase | snakeCaseToSpaceCase }}</p>\n                        </div>\n                    </ng-template>\n                </p-dropdown>\n            </div>\n            <div [ngClass]="[formControllerName !== \'dayOfMonth\' ? \'tw-pl-34-px\' : \'tw-pl-70-px\', formControllerName === \'dayOfWeek\' ? \'tw-pl-30-px\' : \'tw-pl-34-px\']">\n                <app-mandatory-error-message *ngIf="isFieldMandatory && form.controls[formControllerName].touched && !form.controls[formControllerName].valid && !form.controls[formControllerName].disabled" [listName]="mandatoryErrorListName" [customErrorMessage]="customErrorMessage"></app-mandatory-error-message>\n            </div>\n        </div>\n    </div>\n    <div *ngIf="isDefaultFields">\n        <div class="tw-text-faded-text-color tw-text-14-px">\n            <div>\n                <label>{{label}}</label>\n            </div>\n            <div class="tw-pt-2">\n                <p-dropdown appendTo="body" [options]="destinationAttributes" optionLabel="value"\n                [formControlName]="formControllerName" [placeholder]="placeholder" [ngClass]="{\'selectedItem\': form.controls[formControllerName].value, \'filterDropdown\': !form.controls[formControllerName].value}">\n                    <ng-template pTemplate="selectedItem" let-item>\n                        <div class="tw-flex tw-justify-between tw-items-center">\n                            <span>\n                                {{ item.value }}\n                            </span>\n                            <i class="pi pi-times" (click)="removeFilter(form.controls[formControllerName])"></i>\n                        </div>\n                    </ng-template>\n                </p-dropdown>\n            </div>  \n        </div>\n    </div>\n</div>\n\n<div *ngIf="isPreviewDialogVisible">\n    <app-preview-dialog [isPreviewDialogVisible]="true" [iconPath]="exportTypeIconPath" (closeDialog)="closeDialog()" [header]="dialogHeader"></app-preview-dialog>\n</div>\n',styles:[":host ::ng-deep .dropdown-time-alone .p-dropdown {\n\n    width: 150px !important\n}\n\n:host ::ng-deep .dropdown-time .p-dropdown {\n\n    width: 120px !important\n}\n\n@media (min-width: 768px) {\n\n    :host ::ng-deep .dropdown-monthy .p-dropdown {\n\n        width: 120px !important\n    }\n}\n\n@media (min-width: 1024px) {\n\n    :host ::ng-deep .dropdown-monthy .p-dropdown {\n\n        width: 176px !important\n    }\n}\n\n:host ::ng-deep .error-box .p-dropdown {\n\n    border-color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown {\n\n    border-color: var(--box-color) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown.p-focus {\n\n    border-color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-dropdown {\n\n    width: 70px !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-disabled, .p-component:disabled {\n\n    opacity: 1\n}\n\n.sub-text {\n\n    font-size: 12px;\n\n    color: var(--faded-text-color)\n}\n\n.smaller-th th {\n\n    font-size: 14px;\n\n    font-weight: 400\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n\n    display: none !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .selectedItem .p-dropdown-trigger {\n\n    visibility: visible !important\n}\n\n:host ::ng-deep .hide-chevron .p-dropdown-trigger {\n\n    display: none !important\n}"]})],ConfigurationSelectFieldComponent)},"./src/app/shared/components/configuration/configuration-step-footer/configuration-step-footer.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>ConfigurationStepFooterComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationStepFooterComponent=class ConfigurationStepFooterComponent{constructor(){this.resetCloneSetting=new core.EventEmitter,this.save=new core.EventEmitter,this.navigateToPreviousStep=new core.EventEmitter}ngOnInit(){}navigate(){this.navigateToPreviousStep.emit()}resetConfiguration(){this.resetCloneSetting.emit()}saveChanges(){this.save.emit()}};ConfigurationStepFooterComponent.ctorParameters=()=>[],ConfigurationStepFooterComponent.propDecorators={ctaText:[{type:core.Input}],isButtonDisabled:[{type:core.Input}],showBackButton:[{type:core.Input}],showResetButton:[{type:core.Input}],resetCloneSetting:[{type:core.Output}],save:[{type:core.Output}],navigateToPreviousStep:[{type:core.Output}]},ConfigurationStepFooterComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-step-footer",template:'<div class="tw-flex tw-p-24-px tw-border-t tw-border-t-gray-200" [ngClass]="!showBackButton ? \'tw-justify-end\': \'tw-justify-between\'">\n    <div *ngIf="showBackButton">\n        <button type="button" class="p-button-raised tw-bg-white back-btn" (click)="navigate()">\n            <i class="tw-pr-10-px tw-pt-2-px !tw-text-12-px pi pi-arrow-left tw-text-btn-cta"></i>\n            Back\n        </button>\n\n        <button *ngIf="showResetButton" type="button" class="p-button-raised tw-bg-white back-btn tw-ml-16-px" (click)="resetConfiguration()">\n            Reset Configuration\n        </button>\n    </div>\n    <div>\n        <button *ngIf="ctaText !== \'Saving\' && ctaText !== \'Syncing\'" pButton type="button" class="p-button-raised" (click)="saveChanges()" [disabled]="isButtonDisabled">\n            {{ ctaText }}\n            <i *ngIf="ctaText !== \'Save\'" class="tw-pl-10-px tw-pt-2-px !tw-text-12-px pi pi-arrow-right"></i>\n        </button>\n        <button *ngIf="ctaText === \'Saving\' || ctaText === \'Syncing\'" pButton type="button" class="p-button-raised" disabled>\n            {{ ctaText }}\n            <div style="border-top-color:transparent"\n                class="tw-w-5 tw-h-5 tw-ml-2 tw-border-2 tw-border-b-white tw-border-r-white tw-border-l-white tw-border-t-transparent tw-border-solid tw-rounded-full tw-animate-spin"></div>\n        </button>\n    </div>\n</div>\n',styles:[".back-btn {\n  border-radius: 0.25rem;\n  border-width: 1px;\n  background-color: var(--white);\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 14px;\n}\n\n.back-btn i {\n  color: #FF3366;\n}"]})],ConfigurationStepFooterComponent)},"./src/app/shared/components/configuration/configuration-step-header/configuration-step-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>ConfigurationStepHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let ConfigurationStepHeaderComponent=class ConfigurationStepHeaderComponent{constructor(windowService){this.windowService=windowService,this.refreshDimension=new core.EventEmitter,this.brandingConfig=branding_config.Wg}refreshDimensions(){this.refreshDimension.emit(!0)}ngOnInit(){}};ConfigurationStepHeaderComponent.ctorParameters=()=>[{type:window_service.u}],ConfigurationStepHeaderComponent.propDecorators={headerText:[{type:core.Input}],contentText:[{type:core.Input}],redirectLink:[{type:core.Input}],showSyncButton:[{type:core.Input}],appName:[{type:core.Input}],refreshDimension:[{type:core.Output}]},ConfigurationStepHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-step-header",template:'<div class="tw-p-24-px tw-border-b tw-border-b-gray-200">\n    <div class="tw-flex tw-items-center tw-justify-between">\n        <div>\n          <h3 class="tw-text-normal-text-color tw-text-18-px tw-font-500">\n            {{ headerText }}\n          </h3>\n          <h5 class="tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400">\n            {{ contentText }}\n            <a *ngIf="redirectLink"\n              class="tw-text-hyperlink-color tw-pl-4-px tw-w-fit tw-cursor-pointer"\n              (click)="windowService.openInNewTab(redirectLink)">\n              Read More\n                <svg-icon-sprite src="open-in-new-tab" width="14px" height="14px"\n                  class="tw-text-hyperlink-color tw-pl-2-px tw-pt-3-px tw-w-fit tw-inline-block">\n                </svg-icon-sprite>\n              </a>\n          </h5>\n        </div>\n\n        <button *ngIf="showSyncButton" [pTooltip]="\'The integration will import all the newly updated \'+ appName +\' dimensions and \' + brandingConfig.brandName + \' expenses in the configured state of export\'"\n            (click)="refreshDimensions()"\n            class="tw-h-32-px tw-w-80-px tw-mr-12-px tw-flex tw-items-center focus:tw-ring-0 tw-justify-center tw-rounded tw-bg-white tw-text-black tw-border tw-border-gray-300 focus:tw-outline-none focus:tw-ring-opacity-50 active:tw-scale-95 transition-transform">\n            <img src="assets/icons/stepper/sync.svg">\n            <span class="tw-text-14-px tw-pl-8-px">\n                Sync\n            </span>\n        </button>\n\n      </div>                             \n</div>\n',styles:[""]})],ConfigurationStepHeaderComponent)},"./src/app/shared/components/configuration/configuration-step-sub-header/configuration-step-sub-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{x:()=>ConfigurationStepSubHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationStepSubHeaderComponent=class ConfigurationStepSubHeaderComponent{constructor(){}ngOnInit(){}};ConfigurationStepSubHeaderComponent.ctorParameters=()=>[],ConfigurationStepSubHeaderComponent.propDecorators={label:[{type:core.Input}],subLabel:[{type:core.Input}]},ConfigurationStepSubHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-step-sub-header",template:'<div class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg tw-p-24-px">\n    <h4 class="tw-text-normal-text-color tw-font-500">\n        {{label}}\n    </h4>\n    <h5 class="tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400">\n        {{subLabel}}\n    </h5>\n</div>\n',styles:[""]})],ConfigurationStepSubHeaderComponent)},"./src/app/shared/components/configuration/configuration-text-field/configuration-text-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>ConfigurationTextFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationTextFieldComponent=class ConfigurationTextFieldComponent{constructor(){this.type="text"}ngOnInit(){}};ConfigurationTextFieldComponent.ctorParameters=()=>[],ConfigurationTextFieldComponent.propDecorators={form:[{type:core.Input}],label:[{type:core.Input}],formControllerName:[{type:core.Input}],placeholder:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],customErrorMessage:[{type:core.Input}],type:[{type:core.Input}]},ConfigurationTextFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-text-field",template:'<div [formGroup]="form" class="tw-pb-24-px">\n    <div>\n        <span class="tw-text-14-px tw-text-faded-text-color">\n            {{label}}\n        </span>\n        <app-mandatory-field [noSpacing]="true"></app-mandatory-field> \n    </div>\n\n    <div class="tw-mt-8-px">\n        <input [type]="type" class="tw-border-box-color" [ngClass]="[form.controls[formControllerName].invalid && form.controls[formControllerName].touched ? \'error-box\' : \'normal-box\']"  pInputText [formControlName]="formControllerName" [placeholder]="placeholder" [required]="isFieldMandatory">\n        <app-mandatory-error-message *ngIf="isFieldMandatory && form.controls[formControllerName].touched && !form.controls[formControllerName].valid && !form.controls[formControllerName].disabled" [customErrorMessage]="customErrorMessage"></app-mandatory-error-message>\n    </div>\n</div>\n',styles:[".error-box {\n\n    border-color: var(--alert-toast) !important\n}\n\n.normal-box {\n\n    border-color: var(--box-color) !important\n}\n\n.normal-box :enabled:focus-visible {\n\n    border-color: var(--faded-text-color) !important\n}\n\n.p-inputtext {\n\n    height: 40px !important;\n\n    width: 400px !important;\n\n    border-radius: 4px !important;\n\n    border-width: 1px !important;\n\n    border-style: solid !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    padding-left: 14px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}"]})],ConfigurationTextFieldComponent)},"./src/app/shared/components/configuration/configuration-toggle-field/configuration-toggle-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>ConfigurationToggleFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let ConfigurationToggleFieldComponent=class ConfigurationToggleFieldComponent{constructor(windowService){this.windowService=windowService}ngOnInit(){}};ConfigurationToggleFieldComponent.ctorParameters=()=>[{type:window_service.u}],ConfigurationToggleFieldComponent.propDecorators={form:[{type:core.Input}],formControllerName:[{type:core.Input}],label:[{type:core.Input}],subLabel:[{type:core.Input}],isSectionHeader:[{type:core.Input}],redirectLink:[{type:core.Input}],iconPath:[{type:core.Input}],hasDependentFields:[{type:core.Input}]},ConfigurationToggleFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-toggle-field",template:'<div [formGroup]="form" class="tw-p-24-px tw-flex tw-justify-between tw-items-center" [ngClass]="{\'tw-pb-0\': hasDependentFields && form.value[formControllerName]}">\n    <div class="tw-w-3/4 tw-flex tw-items-start">\n      <div *ngIf="iconPath" [ngClass]="[iconPath ? \'tw-pr-16-px\' : \'\']">\n        <svg-icon-sprite [src]="iconPath" width="24px" height="24px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n      </div>\n      <div>\n        <h4 [ngClass]="{\'tw-text-slightly-normal-text-color\': !isSectionHeader}" class="tw-text-16-px !tw-font-500 ">{{ label }}</h4>\n        <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4">\n          <span [innerHTML]="subLabel"></span>\n          <a *ngIf="redirectLink"\n            class="tw-text-hyperlink-color tw-pl-4-px tw-w-fit tw-cursor-pointer"\n            (click)="windowService.openInNewTab(redirectLink)">Read More\n            <svg-icon-sprite src="open-in-new-tab" width="14px" height="14px"\n              class="tw-text-hyperlink-color tw-pl-2-px tw-pt-3-px tw-w-fit tw-inline-block">\n            </svg-icon-sprite>\n          </a>\n        </h5>        \n      </div>\n    </div>\n    <div class="configuration--input-toggle-section">\n      <p-inputSwitch [formControlName]="formControllerName"></p-inputSwitch>\n    </div>\n  </div>\n',styles:[':host ::ng-deep .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider::after {\n  content: "Yes";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 8px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}\n\n:host ::ng-deep .p-inputswitch:not(.p-inputswitch-checked) .p-inputswitch-slider::after {\n  content: "No";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 24px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}']})],ConfigurationToggleFieldComponent)},"./src/app/shared/components/configuration/preview-dialog/preview-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>PreviewDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let PreviewDialogComponent=class PreviewDialogComponent{constructor(){this.closeDialog=new core.EventEmitter}close(){this.closeDialog.emit()}ngOnInit(){}};PreviewDialogComponent.ctorParameters=()=>[],PreviewDialogComponent.propDecorators={isPreviewDialogVisible:[{type:core.Input}],iconPath:[{type:core.Input}],header:[{type:core.Input}],closeDialog:[{type:core.Output}]},PreviewDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-preview-dialog",template:'<div>\n    <p-dialog [header]="header" [dismissableMask]="true" [showHeader]="true" [modal]="true" [(visible)]="isPreviewDialogVisible" (onHide)="close()" [breakpoints]="{ \'960px\': \'75vw\' }" [draggable]="false" [resizable]="false">\n        <div class="tw-flex tw-items-center tw-justify-center tw-px-24-px tw-pb-24-px">\n            <img height="300px" width="700px" [src]="iconPath">\n        </div>\n    </p-dialog>\n</div>\n',styles:[""]})],PreviewDialogComponent)},"./src/app/shared/components/core/error/error.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>ErrorComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),primeng_api=__webpack_require__("./node_modules/primeng/fesm2020/primeng-api.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let ErrorComponent=class ErrorComponent{constructor(messageService,windowService){this.messageService=messageService,this.windowService=windowService,this.brandingConfig=branding_config.Wg}emailSupport(){this.windowService.redirect(`mailto:${branding_config.Wg.supportEmail}`)}copyToClipboard(){const selBox=document.createElement("textarea");selBox.value=branding_config.Wg.supportEmail,document.body.appendChild(selBox),selBox.select(),selBox.click(),document.execCommand("copy"),this.messageService.add({severity:"success",summary:"Support Email copied to clipboard"}),document.body.removeChild(selBox),event?.stopPropagation()}ngOnInit(){}};ErrorComponent.ctorParameters=()=>[{type:primeng_api.ez},{type:window_service.u}],ErrorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-error",template:'<div class="tw-flex tw-flex-col tw-h-[87%] tw-justify-center tw-items-center">\n    <img src="assets/illustrations/error.svg">\n    <p class="tw-pt-24-px">Something unexpected happened while setting up connection</p>\n    <p class="tw-pt-8-px tw-text-14-px tw-text-faded-text-color">Connect our support team to get it resolved</p>\n    <div class="tw-flex tw-cursor-pointer tw-text-14-px tw-text-hyperlink-color tw-pt-12-px">\n        <p (click)="emailSupport()">{{brandingConfig.supportEmail}}</p>\n        <svg-icon-sprite src="copy" width="12px" height="16px" class="tw-ml-10-px tw-mt-2-px" (click)="copyToClipboard()"></svg-icon-sprite>\n    </div>\n</div>\n',styles:[""]})],ErrorComponent)},"./src/app/shared/components/core/loader/loader.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>LoaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let LoaderComponent=class LoaderComponent{constructor(){}ngOnInit(){}};LoaderComponent.ctorParameters=()=>[],LoaderComponent.propDecorators={styleClass:[{type:core.Input}]},LoaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-loader",template:"<p-progressSpinner [ngClass]=\"styleClass ? '' : 'spinner-default'\" [styleClass]=\"styleClass\"></p-progressSpinner>\n",styles:[""]})],LoaderComponent)},"./src/app/shared/components/dashboard/dashboard-accounting-error-dialog/dashboard-accounting-error-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>DashboardAccountingErrorDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),environment=__webpack_require__("./src/environments/environment.ts");let DashboardAccountingErrorDialogComponent=class DashboardAccountingErrorDialogComponent{constructor(){}openUrl(event,expense_id){window.open(class ExpenseModel{static constructViewExpenseUrl(expense_id){return`${environment.N.fyle_app_url}/app/admin/#/view_expense/${expense_id}`}}.constructViewExpenseUrl(expense_id),"_blank"),event.stopPropagation()}ngOnInit(){}};DashboardAccountingErrorDialogComponent.ctorParameters=()=>[],DashboardAccountingErrorDialogComponent.propDecorators={errorExpenses:[{type:core.Input}]},DashboardAccountingErrorDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-accounting-error-dialog",template:'<div>\n    <p-table [value]="errorExpenses" [tableStyle]="{ \'min-width\': \'20rem\' }">\n      <ng-template pTemplate="header">\n          <tr>\n              <th>Expense ID</th>\n              <th>Employee Name and ID</th>\n              <th>Expense Type</th>\n          </tr>\n      </ng-template>\n      <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">\n          <tr>\n              <td class="tw-cursor-pointer tw-underline" (click)="openUrl($event, rowData.expense_id)">\n                  {{rowData.expense_number}}\n              </td>\n              <td>\n                  <h4>\n                      {{rowData.employee_name}}\n                  </h4>\n                  <h5 class="tw-font-400 !tw-text-12-px tw-text-placeholder">\n                      {{rowData.employee_email}}\n                  </h5>\n              </td>\n              <td>\n                  <h4>\n                      {{rowData.fund_source === \'PERSONAL\' ? \'Reimbursable\' : \'Corporate Card\'}}\n                  </h4>\n              </td>\n          </tr>\n      </ng-template>\n  </p-table>\n</div>\n',styles:[""]})],DashboardAccountingErrorDialogComponent)},"./src/app/shared/components/dashboard/dashboard-error-section/dashboard-error-section.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>DashboardErrorSectionComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts");class ErrorModel{static formatErrors(errors){return errors.reduce(((groupedErrors,error)=>{const group=groupedErrors[error.type===enum_model.aF.EMPLOYEE_MAPPING||enum_model.aF.CATEGORY_MAPPING?error.type:enum_model.aF.ACCOUNTING_ERROR]||[];return group.push(error),groupedErrors[error.type]=group,groupedErrors}),{[enum_model.aF.EMPLOYEE_MAPPING]:[],[enum_model.aF.CATEGORY_MAPPING]:[],[enum_model.aF.ACCOUNTING_ERROR]:[]})}static getErroredMappings(errors,errorType,isCategoryMappingGeneric){const filteredMappings=[];return errors[errorType].forEach((element=>{const filteredMapping=element.expense_attribute;errorType===enum_model.aF.ACCOUNTING_ERROR||isCategoryMappingGeneric?filteredMapping.mapping=[]:errorType===enum_model.aF.EMPLOYEE_MAPPING?filteredMapping.employeemapping=[]:errorType===enum_model.aF.CATEGORY_MAPPING&&(filteredMapping.categorymapping=[]),filteredMappings.push(filteredMapping)})),filteredMappings}}var dashboard_service=__webpack_require__("./src/app/core/services/common/dashboard.service.ts"),mapping_service=__webpack_require__("./src/app/core/services/common/mapping.service.ts"),tracking_service=__webpack_require__("./src/app/core/services/integration/tracking.service.ts");let DashboardErrorSectionComponent=class DashboardErrorSectionComponent{constructor(dashboardService,mappingService,trackingService){this.dashboardService=dashboardService,this.mappingService=mappingService,this.trackingService=trackingService,this.destinationOptionsVersion="v2",this.ExportErrorSourceType=enum_model.TN,this.isAccountingErrorDialogVisible=!1,this.errorExpenses=[],this.isMappingResolveVisible=!1,this.ErrorType=enum_model.aF,this.selectedMappingFilter=enum_model.tE.ALL,this.alphabetFilter="All",this.brandingConfig=branding_config.Wg}getSourceType(){return this.destinationFieldMap[this.sourceField]}getDestinationOptionsV1(errorType){let displayName;this.destinationField===enum_model.g9.ACCOUNT&&(displayName=this.isImportItemsEnabled?`${enum_model.Nc.ITEM},${enum_model.Nc.ACCOUNT}`:enum_model.Nc.ACCOUNT),this.mappingService.getDestinationAttributes(this.destinationField,"v1",this.apiModuleUrl,void 0,void 0,displayName).subscribe((response=>{this.destinationOptions=response,this.setErrors(errorType)}))}setErrors(errorType){this.errors[errorType][0].expense_attribute;const isCategoryMappingGeneric=enum_model.qZ.CATEGORY===this.sourceField&&this.isCategoryMappingGeneric;this.filteredMappings=ErrorModel.getErroredMappings(this.errors,errorType,isCategoryMappingGeneric),this.isLoading=!1}getDestinationOptionsV2(errorType){this.mappingService.getGroupedDestinationAttributes([this.destinationField],"v2").subscribe((groupedDestinationResponse=>{"EMPLOYEE"===this.sourceField?this.destinationOptions=this.destinationField===enum_model.qZ.EMPLOYEE?groupedDestinationResponse.EMPLOYEE:groupedDestinationResponse.VENDOR:"CATEGORY"===this.sourceField&&("EXPENSE_TYPE"===this.destinationField?this.destinationOptions=groupedDestinationResponse.EXPENSE_TYPE:this.destinationOptions=groupedDestinationResponse.ACCOUNT),this.setErrors(errorType)}))}showMappingResolve(errorType,groupedError,sourceField){this.eventStartTime=new Date,this.errorType=errorType,this.groupedError=groupedError,this.sourceField=sourceField,this.destinationField=this.destinationFieldMap[this.sourceField],"v1"===this.destinationOptionsVersion?this.getDestinationOptionsV1(errorType):this.getDestinationOptionsV2(errorType),this.isMappingResolveVisible=!0}showErrorDialog(accountingError){this.isAccountingErrorDialogVisible=!0,this.errorDetail=accountingError.error_detail,this.errorExpenses=accountingError.expense_group?.expenses}formatErrors(errors){return ErrorModel.formatErrors(errors)}trackTimeTakenForResolvingMappingErrors(){if(this.errorType===enum_model.aF.CATEGORY_MAPPING||this.errorType===enum_model.aF.EMPLOYEE_MAPPING){const error=this.groupedErrorStat[this.errorType];if(error?.totalCount&&error?.totalCount>0){const properties={resolvedCount:error?.resolvedCount?error?.resolvedCount:0,totalCount:error?.totalCount?error?.totalCount:0,unresolvedCount:error?.totalCount-error?.resolvedCount,resolvedAllErrors:error.resolvedCount===error.totalCount,startTime:this.eventStartTime,endTime:new Date,durationInSeconds:Math.floor(((new Date).getTime()-this.eventStartTime.getTime())/1e3),errorType:this.errorType};this.trackingService.onErrorResolve(properties)}}}handleResolvedMappingStat(){this.dashboardService.getExportErrors(this.errorsVersion).subscribe((errors=>{const argument="v1"===this.errorsVersion?errors:errors.results,newError=this.formatErrors(argument);if(this.errors.CATEGORY_MAPPING.length!==newError.CATEGORY_MAPPING.length){const totalCount=this.groupedErrorStat.CATEGORY_MAPPING?this.groupedErrorStat.CATEGORY_MAPPING.totalCount:this.errors.CATEGORY_MAPPING.length;this.groupedErrorStat.CATEGORY_MAPPING={resolvedCount:totalCount-newError.CATEGORY_MAPPING.length,totalCount}}if(this.errors.EMPLOYEE_MAPPING.length!==newError.EMPLOYEE_MAPPING.length){const totalCount=this.groupedErrorStat.EMPLOYEE_MAPPING?this.groupedErrorStat.EMPLOYEE_MAPPING.totalCount:this.errors.EMPLOYEE_MAPPING.length;this.groupedErrorStat.EMPLOYEE_MAPPING={resolvedCount:totalCount-newError.EMPLOYEE_MAPPING.length,totalCount}}this.errors=newError,this.trackTimeTakenForResolvingMappingErrors()}))}ngOnInit(){this.employeeFieldMapping=this.destinationFieldMap.EMPLOYEE}};DashboardErrorSectionComponent.ctorParameters=()=>[{type:dashboard_service.s},{type:mapping_service.y},{type:tracking_service.e}],DashboardErrorSectionComponent.propDecorators={appName:[{type:core.Input}],errors:[{type:core.Input}],destinationFieldMap:[{type:core.Input}],groupedErrorStat:[{type:core.Input}],isExportLogFetchInProgress:[{type:core.Input}],exportLogHeader:[{type:core.Input}],apiModuleUrl:[{type:core.Input}],destinationOptionsVersion:[{type:core.Input}],errorsVersion:[{type:core.Input}],isCategoryMappingGeneric:[{type:core.Input}],isImportItemsEnabled:[{type:core.Input}]},DashboardErrorSectionComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-error-section",template:'<div class="tw-py-24-px tw-px-120-px">\n    <div *ngIf="errors" class="tw-mt-24-px tw-shadow-app-card tw-rounded-12-px tw-bg-white tw-border-1-px tw-border-separator">\n        <div class="tw-flex tw-justify-between tw-items-center tw-p-24-px">\n                <h4 class="!tw-font-500 !tw-text-18-px">Errors</h4>\n        </div>\n        <div class="tw-border-separator tw-border-t-1-px tw-pb-24-px">\n            <div class="tw-mt-10-px tw-rounded-6-px tw-bg-white">\n                <div *ngIf="errors?.EMPLOYEE_MAPPING?.length || groupedErrorStat?.EMPLOYEE_MAPPING || errors?.CATEGORY_MAPPING?.length || groupedErrorStat?.CATEGORY_MAPPING" class="tw-pl-24-px tw-pr-24-px tw-pt-24-px">\n                    <div class="container">\n                        <div class="sub-text-container">\n                            <h4 class="tw-text-16-px !tw-font-500 tw-text-normal-text-color">Integrations Errors</h4>\n                            <h5 class="!tw-text-faded-text-color tw-text-14-px !tw-font-400 !tw-leading-4">Check and resolve these errors before trying to re-export them again.</h5>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf="errors?.EMPLOYEE_MAPPING?.length || groupedErrorStat?.EMPLOYEE_MAPPING" class="tw-pl-24-px tw-pr-24-px tw-mt-24-px">\n                    <div class="container">\n                        <div class="inside-container">\n                            <h4 class="tw-text-14-px !tw-font-500 tw-text-slightly-normal-text-color">Employee Mapping Errors</h4>\n                            <h5 *ngIf="groupedErrorStat.EMPLOYEE_MAPPING" class="tw-text-faded-text-color tw-text-12-px">{{ groupedErrorStat.EMPLOYEE_MAPPING?.resolvedCount }}/{{ groupedErrorStat.EMPLOYEE_MAPPING?.totalCount }} error(s) resolved</h5>\n                            <div class="flex-wrapper">\n                                <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-10-px !tw-font-400 !tw-leading-4">\n                                    <p>Map the employees in {{brandingConfig.brandName}} to their corresponding records in {{appName}}.</p>\n                                </h5>\n                                <button *ngIf="!groupedErrorStat.EMPLOYEE_MAPPING || (groupedErrorStat.EMPLOYEE_MAPPING && groupedErrorStat.EMPLOYEE_MAPPING.resolvedCount !== groupedErrorStat.EMPLOYEE_MAPPING.totalCount)" type="button" (click)="showMappingResolve(ErrorType.EMPLOYEE_MAPPING, errors.EMPLOYEE_MAPPING, ExportErrorSourceType.EMPLOYEE)" class="tw-text-white tw-text-500 tw-text-12-px tw-px-12-px tw-py-6-px tw-bg-slightly-normal-text-color tw-rounded-4-px tw-w-100-px tw-font-500">\n                                    Resolve\n                                </button>\n                                <div class="tw-flex" *ngIf="groupedErrorStat.EMPLOYEE_MAPPING && groupedErrorStat.EMPLOYEE_MAPPING.resolvedCount === groupedErrorStat.EMPLOYEE_MAPPING.totalCount">\n                                    <svg-icon-sprite src="green-tick" width="18px" height="18px" class="tw-text-success-toast tw-pr-6-px"></svg-icon-sprite>\n                                    <p class="tw-text-faded-text-color tw-text-14-px">\n                                    Resolved\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div *ngIf="errors?.CATEGORY_MAPPING?.length || (groupedErrorStat && groupedErrorStat.CATEGORY_MAPPING)" class="tw-pl-24-px tw-pr-24-px tw-pt-16-px">\n                    <div class="container">\n                        <div class="inside-container">\n                            <h4 class="tw-text-14-px !tw-font-500 tw-text-slightly-normal-text-color">Category Mapping Errors</h4>\n                            <h5 *ngIf="groupedErrorStat.CATEGORY_MAPPING" class="tw-pt-4-px tw-text-faded-text-color tw-text-12-px">{{ groupedErrorStat.CATEGORY_MAPPING.resolvedCount }}/{{ groupedErrorStat.CATEGORY_MAPPING?.totalCount }} error(s) resolved</h5>\n                            <div class="flex-wrapper">\n                                <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-10-px !tw-font-400 !tw-leading-4"><p>Map the employees in {{brandingConfig.brandName}} to their corresponding records in {{appName}}.</p>\n                                </h5>\n                                <button *ngIf="!groupedErrorStat.CATEGORY_MAPPING || (groupedErrorStat.CATEGORY_MAPPING && groupedErrorStat.CATEGORY_MAPPING.resolvedCount !== groupedErrorStat.CATEGORY_MAPPING.totalCount)" type="button" (click)="showMappingResolve(ErrorType.CATEGORY_MAPPING, errors.CATEGORY_MAPPING, ExportErrorSourceType.CATEGORY)" class="tw-text-white tw-text-500 tw-text-12-px tw-px-12-px tw-py-6-px tw-bg-slightly-normal-text-color tw-rounded-4-px tw-w-100-px tw-font-500">\n                                    Resolve\n                                </button>\n                                <div class="tw-flex" *ngIf="groupedErrorStat.CATEGORY_MAPPING && groupedErrorStat.CATEGORY_MAPPING.resolvedCount === groupedErrorStat.CATEGORY_MAPPING.totalCount">\n                                    <svg-icon-sprite src="green-tick" width="18px" height="18px" class="tw-text-success-toast tw-pr-6-px"></svg-icon-sprite>\n                                    <p class="tw-text-faded-text-color tw-text-14-px">\n                                    Resolved\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf="errors?.ACCOUNTING_ERROR?.length" class="tw-pl-24-px tw-pr-24-px tw-pt-16-px">\n                    <div class="container">\n                        <div class="sub-text-container">\n                            <h4 class="tw-text-16-px !tw-font-500 tw-text-normal-text-color">{{appName}} Errors</h4>\n                            <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-10-px !tw-font-400 !tw-leading-4">Resolve these errors on your {{appName}} Account before trying to re-export them again.</h5>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngFor="let error of errors?.ACCOUNTING_ERROR" class="tw-pl-24-px tw-pr-24-px tw-pt-16-px">\n                    <div class="container">\n                        <div class="inside-container">\n                            <h4 class="tw-text-14-px !tw-font-500 tw-text-slightly-normal-text-color tw-w-600-px">{{ error.error_title }}</h4>\n                            <div class="flex-wrapper">\n                                <h5 class="!tw-text-faded-text-color tw-text-12-px tw-pt-10-px !tw-font-400 !tw-leading-4 tw-w-600-px"><p>{{ error.error_detail }}</p>\n                                </h5>\n                                <button type="button" (click)="showErrorDialog(error)" class="tw-flex hover:tw-shadow-btn-cta-shadow tw-items-center tw-justify-center tw-rounded tw-bg-white tw-text-black tw-px-3 tw-py-2 tw-border tw-border-gray-300 transition-transform tw-text-12-px tw-font-500 tw-text-slightly-normal-text-color">\n                                    View Expense\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n\x3c!-- Integration Specific Errors --\x3e\n<div *ngIf="isAccountingErrorDialogVisible">\n    <p-dialog [dismissableMask]="true" [modal]="true" [(visible)]="isAccountingErrorDialogVisible" [position]="\'top-right\'" [style]="{ width: \'50vw\', height:\'100vh\' }" [maximizable]="false" [draggable]="false" [resizable]="false" [breakpoints]="{ \'960px\': \'75vw\' }">\n        <p-header>\n            <p>{{appName}} Error</p>\n            <h3 class="sub-header">{{errorDetail}}</h3>\n        </p-header>\n        <app-dashboard-accounting-error-dialog [errorExpenses]="errorExpenses"></app-dashboard-accounting-error-dialog>\n    </p-dialog>\n</div>\n\n<ng-template #shimmers>\n    <app-shimmers [isExportLogFetchInProgress]="isExportLogFetchInProgress" [exportLogHeader]="exportLogHeader"></app-shimmers>\n</ng-template>\n\n\n\x3c!-- Mapping Errors --\x3e\n<div>\n    <p-dialog [dismissableMask]="true" [(visible)]="isMappingResolveVisible" [modal]="true" [position]="\'top-right\'" [style]="{ width: \'50vw\', height:\'100vh\' }" [maximizable]="false" [draggable]="false" [resizable]="false" [breakpoints]="{ \'960px\': \'75vw\' }" (onHide)="handleResolvedMappingStat()">\n        <p-header>\n            <p>{{errorType | snakeCaseToSpaceCase | titlecase }} Errors</p>\n          </p-header>\n          <app-generic-mapping-table [employeeFieldMapping]="employeeFieldMapping" [isLoading]="isLoading" [appName]="appName" [isDashboardMappingResolve]="true" [destinationField]="destinationField" [filteredMappings]="filteredMappings" [sourceField]="sourceField" [destinationOptions]="destinationOptions"></app-generic-mapping-table>\n    </p-dialog>\n</div>',styles:[".container {\n  justify-content: center\n}\n\n.inside-container {\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n  border-right-width: 8px;\n  padding: 24px;\n  border: 1px solid var(--grayscale-light-border, #ECECEE);\n  max-width: auto\n}\n\n.sub-text-container {\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n  border-right-width: 8px;\n  padding: 24px;\n  border: 1px solid var(--grayscale-light-border, #ECECEE);\n  background: var(--grayscale-background, #FAFCFF);\n  max-width: auto\n}\n\n.flex-wrapper {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between\n}\n\n.sub-header {\n  font-size: 14px;\n  font-weight: 400;\n  color: grey\n}\n\n:host ::ng-deep .p-dialog {\n  margin: 0px !important;\n  max-height: 100% !important\n}"]})],DashboardErrorSectionComponent)},"./src/app/shared/components/dashboard/dashboard-export-log-dialog/dashboard-export-log-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>DashboardExportLogDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let DashboardExportLogDialogComponent=class DashboardExportLogDialogComponent{constructor(windowService){this.windowService=windowService,this.hideExportLogDialog=new core.EventEmitter}openUrl(event,url){this.windowService.openInNewTab(url),event.stopPropagation()}handleDialogClose(){this.hideExportLogDialog.emit()}ngOnInit(){}};DashboardExportLogDialogComponent.ctorParameters=()=>[{type:window_service.u}],DashboardExportLogDialogComponent.propDecorators={exportLogHeader:[{type:core.Input}],isExportLogVisible:[{type:core.Input}],accountingExports:[{type:core.Input}],isExportLogFetchInProgress:[{type:core.Input}],appName:[{type:core.Input}],hideExportLogDialog:[{type:core.Output}]},DashboardExportLogDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-export-log-dialog",template:'<p-dialog header="{{exportLogHeader}} Expenses" [dismissableMask]="true" [modal]="true" [draggable]="false" [(visible)]="isExportLogVisible" (onHide)="handleDialogClose()" [position]="\'top-right\'" [style]="{ width: \'50vw\', height: \'100vh\' }">\n    <div class="tw-rounded-6-px tw-bg-white tw-border-1-px">\n        <app-export-log-table [appName]="appName" [filteredExpenseGroups]="accountingExports" [isDashboardFailed]="exportLogHeader===\'Successful\' ? false : true" [isExportLogTable]="false"></app-export-log-table>\n    </div>\n</p-dialog>\n\n<ng-template #shimmers>\n    <app-shimmers [isExportLogFetchInProgress]="isExportLogFetchInProgress" [exportLogHeader]="exportLogHeader"></app-shimmers>\n</ng-template>',styles:[":host ::ng-deep .p-dialog {\n    margin: 0px !important;\n    max-height: 100% !important\n}"]})],DashboardExportLogDialogComponent)},"./src/app/shared/components/dashboard/dashboard-export-section/dashboard-export-section.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>DashboardExportSectionComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let DashboardExportSectionComponent=class DashboardExportSectionComponent{constructor(){this.loaderType=enum_model.tY.DETERMINATE,this.export=new core.EventEmitter,this.brandingConfig=branding_config.Wg}triggerExport(){this.export.emit(!0)}ngOnInit(){}};DashboardExportSectionComponent.ctorParameters=()=>[],DashboardExportSectionComponent.propDecorators={appName:[{type:core.Input}],isImportInProgress:[{type:core.Input}],isExportInProgress:[{type:core.Input}],exportableAccountingExportIds:[{type:core.Input}],failedExpenseGroupCount:[{type:core.Input}],exportProgressPercentage:[{type:core.Input}],accountingExportSummary:[{type:core.Input}],processedCount:[{type:core.Input}],loaderType:[{type:core.Input}],export:[{type:core.Output}]},DashboardExportSectionComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-export-section",template:'<div class="tw-py-32-px tw-px-120-px">\n    <div *ngIf="!isImportInProgress" class="tw-shadow-app-card tw-rounded-8-px tw-bg-white tw-border-1-px tw-border-separator">\n        <div class="tw-p-24-px">\n            <div class="tw-flex tw-justify-between tw-items-center ">\n                <div class="tw-w-4/5">\n                    <div class="tw-flex">\n                        <img class="tw-mt-1-px tw-pr-8-px" *ngIf="!isExportInProgress && !exportableAccountingExportIds.length" src="assets/icons/tick_dashboard.svg">\n                        <svg-icon-sprite class="tw-mt-1-px tw-pr-8-px" *ngIf="(!isExportInProgress && exportableAccountingExportIds.length) || (isExportInProgress)" src="arrow_tail" height="24px" width="24px"></svg-icon-sprite>\n                        <h3 class="tw-text-20-px tw-font-500 tw-text-slightly-normal-text-color" *ngIf="!isExportInProgress && !exportableAccountingExportIds.length && !accountingExportSummary"> Sit back and relax!</h3>\n                        <h3 class="tw-text-20-px tw-font-500 tw-text-slightly-normal-text-color" *ngIf="isExportInProgress"> Exporting {{ processedCount }} of {{ exportableAccountingExportIds.length }} expense{{exportableAccountingExportIds.length > 1 ? \'s\' : \'\'}} to your {{appName}} account</h3>\n                        <h3 class="tw-text-20-px tw-font-500 tw-text-slightly-normal-text-color" *ngIf="!isExportInProgress && exportableAccountingExportIds.length"> {{ exportableAccountingExportIds.length }} expense{{exportableAccountingExportIds.length > 1 ? \'s\' : \'\'}} ready to export</h3>\n                        <h3 class="tw-text-20-px tw-font-500 tw-text-slightly-normal-text-color" *ngIf="!isExportInProgress && !exportableAccountingExportIds.length && accountingExportSummary?.successful_accounting_export_count">You are all caught up!</h3>\n                        <img class="tw-ml-4-px" src="assets/icons/info_filled.svg" pTooltip="All expenses that have reached your export state in {{brandingConfig.brandName}} will be automatically imported and kept ready for export.">\n                    </div>\n                    <h5 class="tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color tw-pl-34-px tw-pt-8-px" *ngIf="!isExportInProgress && !exportableAccountingExportIds.length && !accountingExportSummary">No new expenses to export in the configured state of export in {{brandingConfig.brandName}}. Once you start processing payments or closing your expenses, they will be automatically available here.</h5>\n                    <h5 class="tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color tw-pl-34-px tw-pt-8-px" *ngIf="isExportInProgress">This may take a few minutes...</h5>\n                    <h5 class="tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color tw-pl-34-px tw-pt-8-px" *ngIf="!isExportInProgress && !exportableAccountingExportIds.length && accountingExportSummary?.successful_accounting_export_count">No new expenses to export from the payment processing state in {{brandingConfig.brandName}}.<br>Once you start processing payment for the expenses, they will be automatically available here to export.</h5>\n                    <div *ngIf="!isExportInProgress && failedExpenseGroupCount !== null && failedExpenseGroupCount > 0" fxLayout="row" fxFlex="4" class="tw-text-14-px tw-font-500 tw-text-slightly-normal-text-color tw-pl-34-px tw-pt-8-px tw-flex">\n                        <h5>{{ exportableAccountingExportIds.length - failedExpenseGroupCount > 0 ? exportableAccountingExportIds.length - failedExpenseGroupCount : 0 }} new expense{{(exportableAccountingExportIds.length - failedExpenseGroupCount) > 1 ? \'s\' : \'\'}}, {{ failedExpenseGroupCount }} previously failed expense{{failedExpenseGroupCount > 1 ? \'s\' : \'\'}}</h5>\n                    </div>\n                    <div *ngIf="!isExportInProgress && exportableAccountingExportIds.length && (failedExpenseGroupCount === null || failedExpenseGroupCount === 0)" fxLayout="row" fxFlex="4" class="tw-text-14-px tw-font-500 tw-text-slightly-normal-text-color tw-pl-34-px tw-pt-8-px tw-flex">\n                        <h5>{{ exportableAccountingExportIds.length }} new expense{{(exportableAccountingExportIds.length) > 1 ? \'s\' : \'\'}}, {{ 0 }} previously failed expense</h5>\n                    </div>\n                </div>\n                <div class="tw-flex tw-items-end tw-justify-end">\n                    <div>\n                        <button type="button" class="export-btn tw-float-right tw-flex tw-justify-end tw-items-center tw-text-white tw-text-500 tw-bg-mandatory-field-color tw-rounded-4-px p-button-raised" pButton (click)="triggerExport()" [ngClass]="!exportableAccountingExportIds.length || isExportInProgress ? \'btn-disabled\' : \'btn-enabled\'" [disabled]="isExportInProgress || !exportableAccountingExportIds.length">\n                            <p class="!tw-text-14-px !tw-font-500" *ngIf="!isExportInProgress">Export\n                                <i class="tw-pl-8-px tw-pt-2-px !tw-text-12-px pi pi-arrow-right"></i>\n                            </p>\n                            <p class="!tw-text-14-px !tw-font-500" *ngIf="isExportInProgress">Exporting\n                                <i class="tw-pl-8-px tw-pt-2-px !tw-text-12-px pi pi-arrow-right"></i>\n                            </p>\n                        </button><br>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div  *ngIf="isExportInProgress">\n            <p-progressBar class="!tw-h-6-px" [showValue]=\'false\' [mode]="loaderType"></p-progressBar>\n        </div>\n    </div>\n    \n    \x3c!-- Shimmers --\x3e\n    <div class="tw-shadow-app-card tw-rounded-8-px tw-bg-white">\n        <app-shimmers [isDashboardImportInProgress]="isImportInProgress"></app-shimmers>\n    </div>\n</div>',styles:[":host ::ng-deep .p-progressbar {\n  height: 0.375rem !important;\n  background-color: var(--progress-bar-bg) !important;\n}\n\n:host ::ng-deep .p-progressbar .p-progressbar-value {\n  border-radius: 50% !important;\n  background-color: var(--mandatory-field-color) !important;\n}\n\n:host ::ng-deep .p-progressbar-determinate .p-progressbar-value {\n  content: none !important;\n}\n\n.export-btn:disabled {\n  cursor: not-allowed !important;\n  background-color: var(--cta-disabled) !important;\n}"]})],DashboardExportSectionComponent)},"./src/app/shared/components/dashboard/dashboard-export-summary-section/dashboard-export-summary-section.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{d:()=>DashboardExportSummarySectionComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),snake_case_to_space_case_pipe=__webpack_require__("./src/app/shared/pipes/snake-case-to-space-case.pipe.ts"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),environments_environment=__webpack_require__("./src/environments/environment.ts");class AccountingExportModel{static getDateOptions(){const currentDateTime=new Date;return[{dateRange:"This Month",startDate:new Date(currentDateTime.getFullYear(),currentDateTime.getMonth(),1),endDate:currentDateTime},{dateRange:"This Week",startDate:new Date(currentDateTime.getFullYear(),currentDateTime.getMonth(),currentDateTime.getDate()-currentDateTime.getDay()),endDate:currentDateTime},{dateRange:"Today",startDate:currentDateTime,endDate:currentDateTime},{dateRange:currentDateTime.toLocaleDateString(),startDate:currentDateTime,endDate:currentDateTime}]}static getFyleExpenseUrl(expense_id){return`${environments_environment.N.fyle_app_url}/app/admin/#/view_expense/${expense_id}`}static getfilteredAccountingExports(query,group){const employeeName=group.employee?group.employee[0]:"",employeeID=group.employee?group.employee[1]:"",expenseType=group.expenseType?group.expenseType:"",referenceNumber=group.referenceNumber?group.referenceNumber:"";return employeeName.toLowerCase().includes(query)||employeeID.toLowerCase().includes(query)||expenseType.toLowerCase().includes(query)||referenceNumber.toLowerCase().includes(query)}static getReferenceType(description){let referenceType=enum_model.UL.REPORT_ID;return enum_model.UL.EXPENSE in description?referenceType=enum_model.UL.EXPENSE:enum_model.UL.REPORT_ID in description?referenceType=enum_model.UL.REPORT_ID:enum_model.UL.PAYMENT in description&&(referenceType=enum_model.UL.PAYMENT),referenceType}static formatExportType(exportType){return exportType.startsWith("CREATING_")&&(exportType=exportType.substring("CREATING_".length)),exportType=(new snake_case_to_space_case_pipe.D).transform(exportType),(new common.TitleCasePipe).transform(exportType)}static getFyleReferenceNumber(referenceType,expense){return referenceType===enum_model.UL.EXPENSE?expense.expense_number:referenceType===enum_model.UL.PAYMENT?expense.payment_number:(enum_model.UL.REPORT_ID,expense.claim_number)}static generateFyleUrl(expense,referenceType,org_id){let url=`${environments_environment.N.fyle_app_url}/app/`;return referenceType===enum_model.UL.EXPENSE?url+=`admin/#/view_expense/${expense.expense_id}`:referenceType===enum_model.UL.REPORT_ID?url+=`admin/#/reports/${expense.report_id}`:referenceType===enum_model.UL.PAYMENT&&(url+=`admin/#/settlements/${expense.settlement_id}`),`${url}?org_id=${org_id}`}static parseAPIResponseToExportLog(accountingExport,org_id){const referenceType=AccountingExportModel.getReferenceType(accountingExport.description),referenceNumber=this.getFyleReferenceNumber(referenceType,accountingExport.expenses[0]);return{exportedAt:accountingExport.exported_at,employee:[accountingExport.expenses[0].employee_name,accountingExport.description.employee_email],expenseType:accountingExport.fund_source===enum_model.W$.CCC?enum_model.W$.CORPORATE_CARD:enum_model.W$.REIMBURSABLE,referenceNumber,exportedAs:this.formatExportType(accountingExport.type),fyleUrl:this.generateFyleUrl(accountingExport.expenses[0],referenceType,org_id),integrationUrl:accountingExport.export_url,expenses:accountingExport.expenses}}static generateExportTypeAndId(expenseGroup){if(!expenseGroup.response_logs)return[null,null,null];let exportRedirection=null,exportType=null,exportId=null;return"Bill"in expenseGroup.response_logs&&expenseGroup.response_logs.Bill?(exportRedirection="bill",exportType=exportRedirection,exportId=expenseGroup.response_logs.Bill.Id):"JournalEntry"in expenseGroup.response_logs&&expenseGroup.response_logs.JournalEntry?(exportRedirection="journal",exportType="Journal Entry",exportId=expenseGroup.response_logs.JournalEntry.Id):"Purchase"in expenseGroup.response_logs&&expenseGroup.response_logs.Purchase&&(exportId=expenseGroup.response_logs.Purchase.Id,"Check"===expenseGroup.response_logs.Purchase.PaymentType?(exportRedirection="check",exportType=exportRedirection):(exportRedirection="expense","CCC"!==expenseGroup.fund_source||"CreditCard"!==expenseGroup.response_logs.Purchase.PaymentType||expenseGroup.response_logs.Purchase.Credit?"CCC"===expenseGroup.fund_source&&"CreditCard"===expenseGroup.response_logs.Purchase.PaymentType&&expenseGroup.response_logs.Purchase.Credit?(exportType="Credit Card Credit",exportRedirection="creditcardcredit"):"CCC"===expenseGroup.fund_source&&"Cash"===expenseGroup.response_logs.Purchase.PaymentType?(exportType="Debit Card Expense",exportRedirection="expense"):exportType="expense":exportType="Credit Card Purchase")),[exportRedirection,exportId,exportType]}static parseExpenseGroupAPIResponseToExportLog(expenseGroup,org_id){const referenceType=AccountingExportModel.getReferenceType(expenseGroup.description),referenceNumber=this.getFyleReferenceNumber(referenceType,expenseGroup.expenses[0]),[type,id,exportType]=this.generateExportTypeAndId(expenseGroup);return{exportedAt:expenseGroup.exported_at,employee:[expenseGroup.expenses[0].employee_name,expenseGroup.description.employee_email],expenseType:expenseGroup.fund_source===enum_model.W$.CCC?enum_model.W$.CORPORATE_CARD:enum_model.W$.REIMBURSABLE,referenceNumber,exportedAs:exportType,fyleUrl:this.generateFyleUrl(expenseGroup.expenses[0],referenceType,org_id),integrationUrl:`${environments_environment.N.qbo_app_url}/app/${type}?txnId=${id}`,expenses:expenseGroup.expenses}}}var accounting_export_service=__webpack_require__("./src/app/core/services/common/accounting-export.service.ts"),export_log_service=__webpack_require__("./src/app/core/services/common/export-log.service.ts"),user_service=__webpack_require__("./src/app/core/services/misc/user.service.ts");let DashboardExportSummarySectionComponent=class DashboardExportSummarySectionComponent{constructor(accountingExportService,exportLogService,userService){this.accountingExportService=accountingExportService,this.exportLogService=exportLogService,this.userService=userService,this.exportLogVersion="v2",this.filteredAccountingExports=[],this.AccountingExportStatus=enum_model.Nm,this.org_id=this.userService.getUserProfile().org_id}handleDialogClose(){this.isExportLogVisible=!1}setFormattedAccountingExport(accountingExports){this.filteredAccountingExports=accountingExports,this.accountingExports=[...this.filteredAccountingExports]}getExpenseGroups(limit,offset,status,lastExportedAt){this.exportLogService.getExpenseGroups(status,limit,offset,null,lastExportedAt).subscribe((accountingExportResponse=>{const accountingExports=accountingExportResponse.results.map((accountingExport=>AccountingExportModel.parseExpenseGroupAPIResponseToExportLog(accountingExport,this.org_id)));this.setFormattedAccountingExport(accountingExports)}))}getAccountingExports(limit,offset,status,lastExportedAt){this.accountingExportService.getAccountingExports(this.accountingExportType,[status],null,limit,offset,null,lastExportedAt).subscribe((accountingExportResponse=>{const accountingExports=accountingExportResponse.results.map((accountingExport=>AccountingExportModel.parseAPIResponseToExportLog(accountingExport,this.org_id)));this.setFormattedAccountingExport(accountingExports)}))}setupAccountingExports(limit,offset,status){if(this.accountingExportSummary){const lastExportedAt=status===enum_model.Nm.COMPLETE?this.accountingExportSummary.last_exported_at:null;"v1"===this.exportLogVersion?this.getExpenseGroups(limit,offset,status,lastExportedAt):this.getAccountingExports(limit,offset,status,lastExportedAt)}}showExportLog(status){this.isExportLogFetchInProgress=!0,this.exportLogHeader=status===enum_model.Nm.COMPLETE?"Successful":"Failed",this.setupAccountingExports(500,0,status),this.isExportLogVisible=!0}ngOnInit(){}};DashboardExportSummarySectionComponent.ctorParameters=()=>[{type:accounting_export_service.b},{type:export_log_service.X},{type:user_service.K}],DashboardExportSummarySectionComponent.propDecorators={accountingExportSummary:[{type:core.Input}],appName:[{type:core.Input}],accountingExportType:[{type:core.Input}],exportLogVersion:[{type:core.Input}]},DashboardExportSummarySectionComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-export-summary-section",template:'<div class="tw-px-120-px">\n    <div class="tw-shadow-app-card tw-rounded-8-px tw-bg-white tw-border-1-px tw-border-separator">\n        <div class="tw-flex tw-justify-between tw-items-center tw-p-24-px">\n                <h4 class="tw-font-500 tw-text-18-px">Your last export</h4>\n        </div>\n        <div class="tw-border-separator tw-border-t-1-px">\n            <div class="tw-p-6 tw-rounded-6-px tw-bg-white">\n                <div class="inside-container tw-p-10 tw-rounded-6-px tw-bg-white">\n                    <div class="tw-flex tw-items-center tw-justify-between">\n                        <div class="tw-flex">\n                                <img src="assets/icons/green-tick.svg" alt="Success Icon" class="tw-mr-16-px">\n                                <p class="tw-text-14-px tw-font-500 tw-text-slightly-normal-text-color">Successful Expenses</p>\n                                <span class="tw-w-120-px tw-text-14-px tw-font-500 tw-text-right tw-text-faded-text-color">\n                                    {{ accountingExportSummary?.successful_accounting_export_count ? accountingExportSummary?.successful_accounting_export_count : 0 }}\n                                </span>  \n                            <a *ngIf="accountingExportSummary?.successful_accounting_export_count" (click)="showExportLog(AccountingExportStatus.COMPLETE)" class="tw-ml-20-px tw-text-14-px tw-font-500 tw-text-pink pointer">View</a>\n                        </div>\n                        <div class="tw-flex tw-flex-col">\n                            <span class="tw-w-260-px tw-text-left">\n                                <span class="tw-text-14-px tw-text-faded-text-color tw-font-400">Last Export at: </span>\n                                <span class="tw-text-14-px tw-font-500">{{ accountingExportSummary ? (accountingExportSummary.last_exported_at | date: \'h:mm a,\') : \'None\' }}\n                                {{ accountingExportSummary ? (accountingExportSummary.last_exported_at | date: \'dd MMM yyyy\') : \'\' }}</span>\n                            </span>                              \n                        </div>\n                    </div>\n                    <div class="tw-flex tw-items-center tw-mt-8-px tw-justify-between">\n                        <div class="tw-flex">\n                            <img src="assets/icons/red-error.svg" alt="Error Icon" class="tw-mr-16-px">\n                            <p class="tw-text-14-px tw-font-500 tw-text-slightly-normal-text-color">Failed Expenses</p>\n                            <span class="tw-w-150-px tw-text-right tw-text-14-px tw-font-500 tw-text-faded-text-color">\n                                {{ accountingExportSummary?.failed_accounting_export_count ? accountingExportSummary?.failed_accounting_export_count : 0 }}\n                            </span>\n                            <a *ngIf="accountingExportSummary?.failed_accounting_export_count" (click)="showExportLog(AccountingExportStatus.FAILED)" class="tw-ml-20-px tw-text-14-px tw-font-500 tw-text-pink pointer">View</a>\n                        </div>\n                        <div class="tw-flex tw-flex-col">\n                            <span class="tw-w-260-px tw-text-left" *ngIf="accountingExportSummary?.next_export_at">\n                                <span class="tw-text-14-px tw-text-faded-text-color tw-font-400">Next Export at: </span>\n                                <span class="tw-text-14-px tw-font-500">{{ accountingExportSummary?.next_export_at ? (accountingExportSummary?.next_export_at | date: \'h:mm a,\') : \'None\' }}\n                                {{ accountingExportSummary ? (accountingExportSummary.next_export_at | date: \'dd MMM yyyy\') : \'\' }}</span>\n                            </span> \n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div>\n    <app-dashboard-export-log-dialog (hideExportLogDialog)="handleDialogClose()" [appName]="appName" [isExportLogVisible]="isExportLogVisible" [accountingExports]="filteredAccountingExports" [isExportLogFetchInProgress]="isExportLogFetchInProgress" [exportLogHeader]="exportLogHeader"></app-dashboard-export-log-dialog>\n</div>',styles:[".inside-container {\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n  border-right-width: 8px;\n  padding: 24px;\n  border: 1px solid var(--grayscale-light-border, #ECECEE);\n  max-width: auto\n}\n\n.pointer {\n  cursor: pointer\n}"]})],DashboardExportSummarySectionComponent)},"./src/app/shared/components/export-log/export-log-dialog/export-log-child-table-dialog.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{b:()=>ExportLogChildTableDialogComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts"),environment=__webpack_require__("./src/environments/environment.ts");let ExportLogChildTableDialogComponent=class ExportLogChildTableDialogComponent{constructor(windowService){this.windowService=windowService,this.expenses=[],this.hideChildTable=new core.EventEmitter}openExpenseinFyle(expense_id,org_id){const url=`${environment.N.fyle_app_url}/app/admin/#/view_expense/${expense_id}?org_id=${org_id}`;this.windowService.openInNewTab(url)}handleDialogClose(){this.hideChildTable.emit()}ngOnInit(){}};ExportLogChildTableDialogComponent.ctorParameters=()=>[{type:window_service.u}],ExportLogChildTableDialogComponent.propDecorators={isDialogOpen:[{type:core.Input}],expenses:[{type:core.Input}],hideChildTable:[{type:core.Output}]},ExportLogChildTableDialogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-export-log-child-table-dialog",template:'<p-dialog header="Expenses" [(visible)]="isDialogOpen" [position]="\'top-right\'" [modal]="true" [draggable]="false" [dismissableMask]="true" (onHide)="handleDialogClose()" [style]="{ width: \'50vw\', height: \'100vh\' }">\n    <div class="tw-rounded-6-px tw-bg-white tw-border-1-px">\n        <p-table #dt2 [value]="expenses">\n            <ng-template pTemplate="header">\n                <tr>\n                    <th>Expense ID.</th>\n                    <th>Merchant</th>\n                    <th>Category</th>\n                    <th>Amount</th>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate="body" let-rowData>\n                <tr *ngFor="let expense of expenses">\n                    <td class="tw-underline tw-cursor-pointer" (click)="openExpenseinFyle(rowData.expense_id, rowData.org_id)">{{expense.expense_number}}</td>\n                    <td>{{ expense.vendor ? expense.vendor : \'-\' }}</td>\n                    <td>{{ expense.category }}</td>\n                    <td>{{ expense.amount }}</td>\n                </tr>\n            </ng-template>\n        </p-table>\n    </div>\n</p-dialog>\n',styles:[":host ::ng-deep .p-dialog {\n    margin: 0px !important;\n    max-height: 100% !important\n}"]})],ExportLogChildTableDialogComponent)},"./src/app/shared/components/export-log/export-log-filter/export-log-filter.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>ExportLogFilterComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ExportLogFilterComponent=class ExportLogFilterComponent{constructor(){this.handleSimpleSearch=new core.EventEmitter,this.presentDate=(new Date).toLocaleDateString()}filterTable(event){this.handleSimpleSearch.emit(event)}dropDownWatcher(){this.exportLogForm.controls.dateRange.value!==this.dateOptions[3].dateRange?this.isCalendarVisible=!1:this.isCalendarVisible=!0}removeFilter(formField){formField.reset(),event?.stopPropagation()}showCalendar(event){event.stopPropagation(),this.isCalendarVisible=!0}getDates(){this.dateOptions[3].dateRange=this.exportLogForm.value.start[0].toLocaleDateString()+"-"+this.exportLogForm.value.start[1].toLocaleDateString(),this.dateOptions[3].startDate=this.exportLogForm.value.start[0],this.dateOptions[3].endDate=this.exportLogForm.value.start[1],this.presentDate=this.dateOptions[3].dateRange,this.exportLogForm.controls.dateRange.patchValue(this.dateOptions[3])}ngOnInit(){}};ExportLogFilterComponent.ctorParameters=()=>[],ExportLogFilterComponent.propDecorators={exportLogForm:[{type:core.Input}],dateOptions:[{type:core.Input}],handleSimpleSearch:[{type:core.Output}]},ExportLogFilterComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-export-log-filter",template:'<div [formGroup]="exportLogForm" class="tw-flex tw-items-center tw-p-24-px">\n\n    <span class="custom-search-field" [ngStyle]="{ \'border-color\': isSearchFocused ? \'black\' : \'#ccc\' }">\n        <i class="pi pi-search"></i>\n        <input class="tw-pb-1 tw-pt-1 tw-text-14-px" type="text" (input)="filterTable($event)" (focus)="isSearchFocused = true" (blur)="isSearchFocused = false" placeholder="Search by Employee Name or Expense ID" />\n    </span>\n    <div class="tw-flex tw-mr-4"></div>\n    <span [ngClass]="{\'tw-border-black\': isDateFieldFocused}" class="tw-flex tw-justify-start tw-items-center tw-border tw-border-box-color tw-pl-12-px tw-rounded-4-px drop-down">\n        <div>\n            <svg-icon-sprite src="calender" width="20px" height="20px" class="tw-text-placeholder"></svg-icon-sprite>\n        </div>\n        <p-dropdown placeholder="Select date range" appendTo="body" [options]="dateOptions"\n        formControlName="dateRange" (click)="dropDownWatcher()" (onFocus)="isDateFieldFocused = true" (onBlur)="isDateFieldFocused = false"\n        [ngClass]="{\'selectedItem\': exportLogForm.controls.dateRange.value, \'filterDropdown\': !exportLogForm.controls.dateRange.value}">\n            <ng-template let-item pTemplate="selectedItem">\n                <div class="tw-flex tw-justify-between tw-items-center">\n                    <span>\n                        <div *ngIf="exportLogForm.controls.dateRange.value">\n                            <div class="my-dropdown-selected-item">\n                                {{exportLogForm.controls.dateRange.value.dateRange}}\n                            </div>\n                        </div>\n                        <div *ngIf="!exportLogForm.controls.dateRange.value">\n                            <div class="my-dropdown-selected-item tw-text-placeholder tw-text-14-px">\n                                Select date range\n                            </div>\n                        </div>\n                    </span>\n                    <i class="pi pi-times" (click)="removeFilter(exportLogForm.controls.dateRange)"></i>\n                </div>\n            </ng-template>\n            <ng-template let-date pTemplate="item">\n                <div>\n                    <p-calendar (click)="showCalendar($event)" placeholder="Custom dates" formControlName="start" (onClose)="getDates()" [touchUI]="isCalendarVisible" *ngIf="date.dateRange === presentDate" selectionMode="range" [readonlyInput]="true" inputId="range"></p-calendar>\n                    <p class="tw-text-sub-text-color tw-text-14-px" [ngClass]="{\'!tw-text-mandatory-field-color\' : exportLogForm.controls.dateRange.value === date }" *ngIf="date.dateRange !== presentDate">{{ date.dateRange | titlecase | snakeCaseToSpaceCase }}</p>\n                    <p class="tw-text-sub-text-color tw-text-12-px" *ngIf="date.dateRange !== presentDate && date.dateRange !== \'Today\'">{{date.startDate | date : \'MMM dd, yyyy\'}} - {{date.endDate | date : \'MMM dd, yyyy\'}}</p>\n                    <p class="tw-text-sub-text-color tw-text-12-px" *ngIf="date.dateRange === \'Today\'">{{date.startDate | date : \'MMM dd, yyyy\'}}</p>\n                </div>\n            </ng-template> \n        </p-dropdown>\n    </span>\n</div>',styles:[".custom-search-field {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 2px 10px;\n  display: inline-flex;\n  align-items: center;\n  width: 350px;\n  height: 40px;\n}\n\n.custom-search-field i.pi-search {\n  margin-right: 10px;\n  color: grey;\n}\n\n.custom-search-field input[type=text] {\n  border: none;\n  outline: none;\n  width: 100%;\n}\n\ninput.custom-focus:focus {\n  outline: none;\n  border: 1px solid black !important;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n}\n\n.clickable-row:hover:hover {\n  background: #FAFCFF;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n  background-color: transparent;\n  margin-left: 10px !important;\n  margin-right: 10px !important;\n  margin-top: 0px !important;\n  border-top-left-radius: 0.5rem !important;\n  border-top-right-radius: 0.5rem !important;\n  border-left-width: 1px !important;\n  border-right-width: 1px !important;\n  border-top-width: 1px !important;\n  border-left-color: var(--box-color) !important;\n  border-right-color: var(--box-color) !important;\n  border-top-color: var(--box-color) !important;\n  padding-left: 24px !important;\n  padding-right: 24px !important;\n  padding-top: 12px !important;\n  padding-bottom: 12px !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link, :host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link:not(.p-disabled):hover {\n  border-bottom-color: transparent !important;\n  background-color: var(--white) !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover, :host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover .p-menuitem-link {\n  background-color: transparent !important;\n  border-bottom-color: transparent !important;\n  font-weight: 500 !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link:not(.p-highlight):hover {\n  border-bottom-color: transparent !important;\n  background-color: var(--disabled-bg-color) !important;\n  font-weight: 500 !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav {\n  background-color: transparent;\n  border-bottom-width: 1px !important;\n  border-bottom-color: var(--box-color) !important;\n}\n\n:host ::ng-deep .drop-down .p-dropdown {\n  width: 200px !important;\n  border-width: 0px !important;\n}\n\n:host ::ng-deep .p-datatable .p-datatable-tbody > tr > td {\n  border-top-width: 1px !important;\n  border-bottom-width: 0px !important;\n  border-top-color: var(--box-color) !important;\n  padding-top: 14px !important;\n  padding-bottom: 14px !important;\n  padding-left: 22px !important;\n  padding-right: 22px !important;\n  font-size: 14px !important;\n  font-weight: 400 !important;\n  color: var(--sub-text-color) !important;\n}\n\n:host ::ng-deep .p-datatable .p-datatable-thead > tr > th {\n  border-width: 1px !important;\n  border-color: var(--box-color) !important;\n  background-color: var(--disabled-bg-color) !important;\n  padding-top: 12px !important;\n  padding-bottom: 12px !important;\n  padding-left: 22px !important;\n  padding-right: 22px !important;\n  font-size: 12px !important;\n  font-weight: 500 !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-datatable .p-datatable-tbody > tr > td > button {\n  padding-left: 48px !important;\n}\n\n:host ::ng-deep .p-progressbar {\n  height: 0.375rem !important;\n  background-color: var(--progress-bar-bg) !important;\n}\n\n:host ::ng-deep .p-progressbar .p-progressbar-value {\n  border-radius: 50% !important;\n  background-color: var(--mandatory-field-color) !important;\n}\n\n:host ::ng-deep .p-progressbar-determinate .p-progressbar-value {\n  content: none !important;\n}\n\n.export-btn:disabled {\n  cursor: not-allowed !important;\n  background-color: var(--cta-disabled) !important;\n}\n\n:host ::ng-deep .p-dialog {\n  margin: 0px !important;\n  max-height: 100% !important;\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n  display: none !important;\n}"]})],ExportLogFilterComponent)},"./src/app/shared/components/export-log/export-log-table/export-log-table.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>ExportLogTableComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let ExportLogTableComponent=class ExportLogTableComponent{constructor(windowService){this.windowService=windowService,this.expenses=[],this.brandingConfig=branding_config.Wg,this.isChildTableVisible=!1}handleDialogClose(){this.isChildTableVisible=!1}displayChildTable(rowData){this.isExportLogTable&&(this.expenses=rowData.expenses,this.isChildTableVisible=!0)}openUrl(url){this.windowService.openInNewTab(url),event?.stopPropagation()}ngOnInit(){}};ExportLogTableComponent.ctorParameters=()=>[{type:window_service.u}],ExportLogTableComponent.propDecorators={filteredExpenseGroups:[{type:core.Input}],appName:[{type:core.Input}],isExportLogTable:[{type:core.Input}],isDashboardFailed:[{type:core.Input}]},ExportLogTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-export-log-table",template:'<p-table *ngIf="filteredExpenseGroups.length > 0" #dt1 [value]="filteredExpenseGroups">\n    <ng-template pTemplate="header">\n        <tr>\n            <th *ngIf="!isDashboardFailed">Date and Time of Export</th>\n            <th>Employee Name and ID</th>\n            <th *ngIf="isExportLogTable">Expense Type</th>\n            <th>Reference ID</th>\n            <th *ngIf="!isDashboardFailed">Exported As</th>\n            <th *ngIf="!isDashboardFailed">Link to {{appName}}</th>\n            <th *ngIf="isDashboardFailed">Link to {{ brandingConfig.brandName }}</th>\n        </tr>\n    </ng-template>\n\n    <ng-template pTemplate="body" let-rowData>\n        <tr class="clickable-row" (click)="displayChildTable(rowData)">\n            <td *ngIf="!isDashboardFailed">\n                <p class="tw-font-400 tw-text-sub-text-color">{{rowData.exportedAt | date}}</p>\n                <span class="tw-font-400 !tw-text-12-px tw-text-placeholder">{{rowData.exportedAt | date : "HH:ss"}}</span>\n            </td>\n            <td>\n                <h4>\n                    {{rowData.employee[0]}}\n                </h4>\n                <h5 class="tw-font-400 !tw-text-12-px tw-text-placeholder">\n                    {{rowData.employee[1]}}\n                </h5>\n            </td>\n            <td *ngIf="isExportLogTable">{{rowData.expenseType | titlecase}}</td>\n            <td class="tw-underline" (click)="openUrl(rowData.fyleUrl)">{{rowData.referenceNumber}}</td>\n            <td *ngIf="!isDashboardFailed">{{rowData.exportedAs | snakeCaseToSpaceCase | titlecase}}</td>\n            <td *ngIf="!isDashboardFailed">\n                <div>\n                  <button (click)="openUrl(rowData.integrationUrl)" pTooltip="Open in New Tab" tooltipPosition="top">\n                    <svg-icon-sprite class="tw-pt-5-px" src="open-in-new-tab" width="20px" height="20px"></svg-icon-sprite>\n                  </button>\n                </div>\n            </td>\n            <td *ngIf="isDashboardFailed">\n                <div>\n                  <button (click)="openUrl(rowData.fyleUrl)" pTooltip="Open in New Tab" tooltipPosition="top">\n                    <svg-icon-sprite class="tw-pt-5-px" src="open-in-new-tab" width="20px" height="20px"></svg-icon-sprite>\n                  </button>\n                </div>\n            </td>\n        </tr>\n    </ng-template>\n</p-table>\n\n<app-export-log-child-table-dialog [isDialogOpen]="isChildTableVisible" [expenses]="expenses" (hideChildTable)="handleDialogClose()"></app-export-log-child-table-dialog>',styles:[".clickable-row:hover {\n  cursor: pointer;\n}\n.clickable-row:hover:hover {\n  background: #FAFCFF;\n}\n:host ::ng-deep .p-datatable .p-datatable-tbody > tr > td {\n  border-top-width: 1px !important;\n  border-bottom-width: 0px !important;\n  border-top-color: var(--box-color) !important;\n  padding-top: 14px !important;\n  padding-bottom: 14px !important;\n  padding-left: 22px !important;\n  padding-right: 22px !important;\n  font-size: 14px !important;\n  font-weight: 400 !important;\n  color: var(--sub-text-color) !important;\n}\n:host ::ng-deep .p-datatable .p-datatable-thead > tr > th {\n  border-width: 1px !important;\n  border-color: var(--box-color) !important;\n  background-color: var(--disabled-bg-color) !important;\n  padding-top: 12px !important;\n  padding-bottom: 12px !important;\n  padding-left: 22px !important;\n  padding-right: 22px !important;\n  font-size: 12px !important;\n  font-weight: 500 !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n:host ::ng-deep .p-datatable .p-datatable-tbody > tr > td > button {\n  padding-left: 48px !important;\n}"]})],ExportLogTableComponent)},"./src/app/shared/components/export-log/skipped-export-log-table/skipped-export-log-table.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{i:()=>SkippedExportLogTableComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let SkippedExportLogTableComponent=class SkippedExportLogTableComponent{constructor(windowService){this.windowService=windowService}openUrl(url){this.windowService.openInNewTab(url)}ngOnInit(){}};SkippedExportLogTableComponent.ctorParameters=()=>[{type:window_service.u}],SkippedExportLogTableComponent.propDecorators={filteredExpense:[{type:core.Input}]},SkippedExportLogTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-skipped-export-log-table",template:'<p-table *ngIf="filteredExpense.length > 0" #dt1 [value]="filteredExpense">\n    <ng-template pTemplate="header">\n        <tr>\n            <th>Export Skipped On</th>\n            <th>Employee Name and ID</th>\n            <th>Expense Type</th>\n            <th>Reference ID</th>\n        </tr>\n    </ng-template>\n\n    <ng-template pTemplate="body" let-rowData>\n        <tr>\n            <td>\n                <p class="tw-font-400 tw-text-sub-text-color">{{rowData.updated_at | date}}</p>\n                <span class="tw-font-400 !tw-text-12-px tw-text-placeholder">{{rowData.updated_at | date : "HH:ss"}}</span>\n            </td>\n            <td>\n                <h4>\n                    {{rowData.employee[0]}}\n                </h4>\n                <h5 class="tw-font-400 !tw-text-12-px tw-text-placeholder">\n                    {{rowData.employee[1]}}\n                </h5>\n            </td>\n            <td>{{rowData.expenseType | titlecase}}</td>\n            <td class="tw-underline tw-cursor-pointer" (click)="openUrl(rowData.fyleUrl)">{{rowData.claim_number}}</td>\n        </tr>\n    </ng-template>\n</p-table>',styles:[":host ::ng-deep .p-datatable .p-datatable-tbody > tr > td {\n\n    border-top-width: 1px !important;\n\n    border-bottom-width: 0px !important;\n\n    border-top-color: var(--box-color) !important;\n\n    padding-top: 14px !important;\n\n    padding-bottom: 14px !important;\n\n    padding-left: 22px !important;\n\n    padding-right: 22px !important;\n\n    font-size: 14px !important;\n\n    font-weight: 400 !important;\n\n    color: var(--sub-text-color) !important\n}\n\n:host ::ng-deep .p-datatable .p-datatable-thead > tr > th {\n\n    border-width: 1px !important;\n\n    border-color: var(--box-color) !important;\n\n    background-color: var(--disabled-bg-color) !important;\n\n    padding-top: 12px !important;\n\n    padding-bottom: 12px !important;\n\n    padding-left: 22px !important;\n\n    padding-right: 22px !important;\n\n    font-size: 12px !important;\n\n    font-weight: 500 !important;\n\n    color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .p-datatable .p-datatable-tbody > tr > td > button {\n\n    padding-left: 48px !important\n}"]})],SkippedExportLogTableComponent)},"./src/app/shared/components/helper/app-landing-page-body/app-landing-page-body.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>AppLandingPageBodyComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),platform_browser=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/platform-browser.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");let AppLandingPageBodyComponent=class AppLandingPageBodyComponent{constructor(windowService,sanitizer){this.windowService=windowService,this.sanitizer=sanitizer,this.brandingConfig=branding_config.Wg}ngOnInit(){this.updateEmbedVideoUrl()}updateEmbedVideoUrl(){this.embedVideoUrl=this.sanitizer.bypassSecurityTrustResourceUrl(this.embedVideo)}};AppLandingPageBodyComponent.ctorParameters=()=>[{type:window_service.u},{type:platform_browser.DomSanitizer}],AppLandingPageBodyComponent.propDecorators={headlineText:[{type:core.Input}],headerText:[{type:core.Input}],svgPath:[{type:core.Input}],redirectLink:[{type:core.Input}],embedVideo:[{type:core.Input}]},AppLandingPageBodyComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-landing-page-body",template:'<div class="tw-pt-40-px tw-flex tw-justify-center tw-text-center tw-flex-col">\n    <p *ngIf="!headlineText" class="tw-text-normal-text-color tw-text-20-px tw-font-500">How does the integration work?</p>\n    <p *ngIf="headlineText" class="tw-text-normal-text-color tw-text-20-px tw-font-500">{{ headlineText }}</p>\n    <p class="tw-text-slightly-normal-text-color tw-text-14-px tw-pt-8-px tw-flex tw-justify-center">\n        {{headerText}}\n        <span *ngIf="redirectLink" class="tw-text-hyperlink-color tw-flex tw-pl-4-px tw-cursor-pointer" (click)="windowService.openInNewTab(redirectLink)">\n            Read More\n            <svg-icon-sprite src="open-in-new-tab" width="14px" height="14px" class="tw-text-hyperlink-color tw-pl-6-px tw-pt-3-px"></svg-icon-sprite>\n        </span>\n    </p>\n\n    <div *ngIf="embedVideo" class="tw-flex tw-justify-center tw-pt-48-px">\n        <iframe class= "tw-rounded-8-px" width="720" height="420" [src]="embedVideoUrl" title="{{brandingConfig.brandName}} Sage Intacct Integration" frameborder="0"></iframe>\n    </div>    \n\n    <div class="tw-flex tw-justify-center tw-mt-8 tw-mb-14">\n        <img src="{{svgPath}}" />\n    </div>    \n</div>',styles:[""]})],AppLandingPageBodyComponent)},"./src/app/shared/components/helper/app-landing-page-header/app-landing-page-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>AppLandingPageHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),window_service=__webpack_require__("./src/app/core/services/common/window.service.ts"),tracking_service=__webpack_require__("./src/app/core/services/integration/tracking.service.ts");let AppLandingPageHeaderComponent=class AppLandingPageHeaderComponent{constructor(router,trackingService,windowService){this.router=router,this.trackingService=trackingService,this.windowService=windowService,this.AppName=enum_model.lW,this.connectIntegration=new core.EventEmitter,this.disconnectIntegration=new core.EventEmitter,this.syncEmployees=new core.EventEmitter,this.logoWidth="140px",this.logoStyleClasses="tw-py-10-px tw-px-20-px",this.logoSectionStyleClasses="tw-rounded-4-px tw-border-1-px tw-border-box-color tw-bg-white tw-w-176-px",this.qboConnectButtonSource="assets/icons/buttons/connect-to-qbo.svg",this.brandingConfig=branding_config.Wg}syncData(){this.syncEmployees.emit()}initiateOAuth(){this.connectIntegration.emit()}disconnect(){this.disconnectIntegration.emit()}connect(){"qbd/onboarding/export_settings"===this.postConnectionRoute?this.trackingService.onClickEvent(enum_model.Rd.CONNECT_QBD):"intacct/onboarding/connector"===this.postConnectionRoute?this.trackingService.onClickEvent(enum_model.Rd.CONNECT_INTACCT):"sage300/onboarding/connector"===this.postConnectionRoute?this.trackingService.onClickEvent(enum_model.Rd.CONNECT_SAGE300):"business_central/onboarding/connector"===this.postConnectionRoute&&(this.initiateOAuth(),this.trackingService.onClickEvent(enum_model.Rd.CONNECT_BUSINESS_CENTRAL)),this.router.navigate([`/integrations/${this.postConnectionRoute}`])}ngOnInit(){}};AppLandingPageHeaderComponent.ctorParameters=()=>[{type:router.F0},{type:tracking_service.e},{type:window_service.u}],AppLandingPageHeaderComponent.propDecorators={connectIntegration:[{type:core.Output}],disconnectIntegration:[{type:core.Output}],syncEmployees:[{type:core.Output}],iconPath:[{type:core.Input}],isIntegrationConnected:[{type:core.Input}],isIntegrationSetupInProgress:[{type:core.Input}],appName:[{type:core.Input}],buttonText:[{type:core.Input}],appDescription:[{type:core.Input}],isLoading:[{type:core.Input}],isRecipeRunning:[{type:core.Input}],showErrorScreen:[{type:core.Input}],hideRefreshIcon:[{type:core.Input}],iframeSourceUrl:[{type:core.Input}],redirectLink:[{type:core.Input}],isConnectionInProgress:[{type:core.Input}],postConnectionRoute:[{type:core.Input}],logoWidth:[{type:core.Input}],logoStyleClasses:[{type:core.Input}],logoSectionStyleClasses:[{type:core.Input}]},AppLandingPageHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-landing-page-header",template:'<div class="tw-absolute tw-bg-header-1 tw-h-110-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-absolute tw-bg-header-2 tw-h-110-px tw-w-[100%] tw-z-[-1]"></div>\n\n<div class="tw-p-24-px tw-text-slightly-normal-text-color">\n    <div class="tw-h-68-px tw-flex tw-justify-between">\n            <div class="tw-flex">\n                <div class="tw-flex tw-justify-center" [ngClass]="logoSectionStyleClasses">\n                    <img src="{{ iconPath }}" width="logoWidth" height="44px" [ngClass]="logoStyleClasses" />\n                </div>\n                <div class="tw-pl-16-px tw-flex tw-flex-col">\n                    <div class="tw-flex tw-pt-6-px">\n                        <p class="tw-text-20-px tw-font-500 tw-text-normal-text-color">{{ appName }}</p>\n                        <svg-icon-sprite *ngIf="isIntegrationConnected && !isLoading && isRecipeRunning && !hideRefreshIcon" pTooltip="Sync Data" tooltipPosition="right" src="sync" width="18px" height="14px" class="tw-cursor-pointer tw-ml-10-px tw-pt-6-px tw-text-faded-text-color" (click)="syncData()"></svg-icon-sprite>\n                    </div>\n                    <p *ngIf="!isIntegrationSetupInProgress" class="tw-text-slightly-normal-text-color tw-pt-2-px tw-text-14-px tw-font-400 tw-flex">{{ appDescription }}\n                        <span *ngIf="redirectLink" class="tw-text-hyperlink-color tw-flex tw-pl-4-px tw-cursor-pointer" (click)="windowService.openInNewTab(redirectLink)">\n                            Read More\n                            <svg-icon-sprite src="open-in-new-tab" width="14px" height="14px" class="tw-text-hyperlink-color tw-pl-6-px tw-pt-3-px"></svg-icon-sprite>\n                        </span>\n                    </p>\n                    <div *ngIf="isIntegrationSetupInProgress" class="tw-flex tw-text-slightly-normal-text-color tw-text-14-px tw-pt-10-px tw-pb-18-px">\n                        <app-loader [styleClass]="\'spinner-16 tw-top-2-px\'"></app-loader>\n                        <p class="tw-pl-10-px">We are syncing your data between your {{brandingConfig.brandName}} - {{ appName }} account and this may take a few seconds</p>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf="!isIntegrationSetupInProgress && !isLoading && !showErrorScreen " class="tw-flex tw-items-center">\n                <button *ngIf="!isIntegrationConnected && (appName === AppName.BAMBOO_HR || appName === AppName.TRAVELPERK)" pButton type="button" class="p-button-raised" (click)="connect()" [disabled]="isConnectionInProgress">\n                    {{ isConnectionInProgress ? \'Connecting\' : \'Connect\' }}\n                    <i *ngIf="!isConnectionInProgress" class="tw-pl-10-px tw-pt-2-px !tw-text-12-px pi pi-arrow-right"></i>\n                    <app-loader class="tw-ml-10-px" *ngIf="isConnectionInProgress" [styleClass]="\'spinner-16-white tw-top-2-px\'"></app-loader>\n                </button>\n                <button *ngIf="isIntegrationConnected && isRecipeRunning && appName !== AppName.GUSTO" pButton type="button" class="!tw-text-alert-toast remove-bg disconnect !tw-bg-white" (click)="disconnect()">\n                    Disconnect\n                </button>\n                <button *ngIf="(appName === AppName.QBD || appName === AppName.INTACCT || appName === AppName.SAGE300 || appName === AppName.BUSINESS_CENTRAL)" pButton type="button" class="p-button-raised" (click)="connect()">\n                    {{buttonText}}\n                    <i *ngIf="appName === AppName.QBD" class="tw-pl-10-px tw-pt-2-px !tw-text-12-px pi pi-arrow-right"></i>\n                </button>\n                <iframe *ngIf="iframeSourceUrl && (appName === AppName.TRAVELPERK || appName === AppName.GUSTO)" scrolling="no" [src]="iframeSourceUrl" class="tw-mt-40-px tw-w-270-px tw-h-84-px"></iframe>\n                <div class="tw-cursor-pointer">\n                    <img\n                        [src]="qboConnectButtonSource"\n                        (click)="initiateOAuth()"\n                        (mouseover)="qboConnectButtonSource = \'assets/icons/buttons/connect-to-qbo-active.svg\'"\n                        (mouseout)="qboConnectButtonSource = \'assets/icons/buttons/connect-to-qbo.svg\'">\n                </div>\n            </div>\n        </div>\n</div>\n\n<p class="tw-h-1-px tw-w-[100%] tw-bg-separator"></p>',styles:[".remove-bg {\n  background-image: none !important;\n}\n\n.recipe-active {\n  border: 1px solid #DFDFE2 !important;\n}\n\n.disconnect {\n  border: 1px solid #DFDFE2 !important;\n}"]})],AppLandingPageHeaderComponent)},"./src/app/shared/components/helper/mandatory-field/mandatory-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>MandatoryFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let MandatoryFieldComponent=class MandatoryFieldComponent{constructor(){}ngOnInit(){}};MandatoryFieldComponent.ctorParameters=()=>[],MandatoryFieldComponent.propDecorators={noSpacing:[{type:core.Input}]},MandatoryFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-mandatory-field",template:'<span [ngClass]="{\'tw-pl-5-px\': !noSpacing}" class="tw-text-mandatory-field-color !tw-text-16-px">*</span>\n',styles:[""]})],MandatoryFieldComponent)},"./src/app/shared/components/helper/mapping/generic-mapping-v2/generic-mapping-v2.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>GenericMappingV2Component});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs"),forkJoin=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),mapping_service=__webpack_require__("./src/app/core/services/common/mapping.service.ts"),storage_service=__webpack_require__("./src/app/core/services/common/storage.service.ts");let PaginatorService=class PaginatorService{constructor(storageService){this.storageService=storageService}getPageSize(module){return{limit:this.storageService.get(`page-size.${module}`)||50,offset:0}}storePageSize(module,pageSize){this.storageService.set(`page-size.${module}`,pageSize)}};PaginatorService.ctorParameters=()=>[{type:storage_service.V}],PaginatorService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],PaginatorService);let GenericMappingV2Component=class GenericMappingV2Component{constructor(mappingService,paginatorService,route){this.mappingService=mappingService,this.paginatorService=paginatorService,this.route=route,this.isInitialSetupComplete=!1,this.searchTerm="",this.offset=0,this.selectedMappingFilter=enum_model.tE.ALL,this.PaginatorPage=enum_model.yg,this.currentPage=1,this.alphabetFilter="All",this.triggerAutoMapEmployee=new core.EventEmitter}triggerAutoMapEmployees(){this.triggerAutoMapEmployee.emit(!0)}getFilteredMappings(){this.mappingService.getGenericMappingsV2(this.limit,this.offset,this.destinationField,this.selectedMappingFilter,this.alphabetFilter,this.sourceField,this.isCategoryMappingGeneric).subscribe((mappingResponse=>{this.filteredMappings=mappingResponse.results.concat(),this.filteredMappingCount=this.filteredMappings.length,this.totalCount=mappingResponse.count,this.isLoading=!1}))}pageSizeChanges(limit){this.isLoading=!0,this.limit!==limit&&this.paginatorService.storePageSize(enum_model.yg.MAPPING,limit),this.limit=limit,this.offset=0,this.currentPage=1,this.getFilteredMappings()}pageOffsetChanges(offset){this.isLoading=!0,this.offset=offset,this.currentPage=Math.ceil(this.offset/this.limit)+1,this.getFilteredMappings()}mappingStateFilter(state){this.isLoading=!0,this.selectedMappingFilter=state,this.currentPage=1,this.offset=0,this.getFilteredMappings()}mappingSearchFilter(searchValue){searchValue.length>0?this.filteredMappings=this.filteredMappings.filter((mapping=>mapping.value?.toLowerCase().includes(searchValue))):this.filteredMappings=this.mappings.concat(),this.filteredMappingCount=this.filteredMappings.length}mappingFilterUpdate(alphabet){this.isLoading=!0,this.alphabetFilter=alphabet,this.currentPage=1,this.offset=0,this.getFilteredMappings()}setupPage(){const paginator=this.paginatorService.getPageSize(enum_model.yg.MAPPING);this.limit=paginator.limit,this.offset=paginator.offset,this.sourceType=decodeURIComponent(decodeURIComponent(this.route.snapshot.params.source_field)).toUpperCase(),(0,forkJoin.D)([this.mappingService.getGenericMappingsV2(10,0,this.destinationField,this.selectedMappingFilter,this.alphabetFilter,this.sourceField,this.isCategoryMappingGeneric),this.mappingService.getMappingStats(this.sourceField,this.destinationField,this.appName)]).subscribe((([mappingResponse,mappingStat])=>{this.totalCount=mappingResponse.count,this.isInitialSetupComplete||(this.filteredMappingCount=mappingResponse.count),this.mappings=mappingResponse.results,this.mappingStats=mappingStat,this.filteredMappings=this.mappings.concat(),this.isInitialSetupComplete=!0,this.isLoading=!1}))}ngOnInit(){this.setupPage()}};GenericMappingV2Component.ctorParameters=()=>[{type:mapping_service.y},{type:PaginatorService},{type:router.gz}],GenericMappingV2Component.propDecorators={isLoading:[{type:core.Input}],sourceField:[{type:core.Input}],destinationField:[{type:core.Input}],employeeFieldMapping:[{type:core.Input}],showAutoMapEmployee:[{type:core.Input}],destinationOptions:[{type:core.Input}],appName:[{type:core.Input}],isCategoryMappingGeneric:[{type:core.Input}],triggerAutoMapEmployee:[{type:core.Output}]},GenericMappingV2Component=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-generic-mapping-v2",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading">\n        <div>\n            <app-card-mapping-header (triggerAutoMapEmployee)="triggerAutoMapEmployees()" [sourceField]="sourceField" [showAutoMapEmployee]="showAutoMapEmployee" [mappingStats]="mappingStats" (triggerAutoMapEmployee)="triggerAutoMapEmployees"></app-card-mapping-header>\n        </div>\n        <div class="tw-shadow-app-card tw-rounded-12-px tw-bg-white tw-border-1-px tw-border-separator tw-mt-16-px">\n            <div class="tw-p-24-px tw-border-b-separator">\n                <app-mapping-filter [selectedAlphabeticalFilter]="alphabetFilter" [mappingFilter]="selectedMappingFilter" (mappingFilterChangeEvent)="mappingStateFilter($event)" (mappingSearchingEvent)="mappingSearchFilter($event)" (mappingFilterUpdateHandler)="mappingFilterUpdate($event)" [isAlphabetFilterHidden]="false"></app-mapping-filter>\n            </div>\n            <div *ngIf="filteredMappingCount">\n                <app-generic-mapping-table [isLoading]="isLoading" [appName]="appName" [isDashboardMappingResolve]="false" [destinationField]="destinationField" [filteredMappings]="filteredMappings" [sourceField]="sourceField" [mappingStats]="mappingStats" [employeeFieldMapping]="employeeFieldMapping" [destinationOptions]="destinationOptions"></app-generic-mapping-table>\n            </div>\n            <div class="tw-p-24-px tw-border-t-separator" *ngIf="filteredMappingCount" >\n                <app-paginator [totalCount]="totalCount" [pageType]="PaginatorPage.MAPPING" [page]="currentPage" [dropDownValue]="limit" (pageSizeChangeEvent)="pageSizeChanges($event)" (pageOffsetChangeEvent)="pageOffsetChanges($event)"></app-paginator>\n            </div>\n            <div *ngIf="!filteredMappingCount">\n                <app-zero-state-with-illustration \n                [mainText]="\'No search result to show yet!\'" \n                [subText]="\'Looks like your search term does not match any of \' + (this.sourceField | snakeCaseToSpaceCase | titlecase) + \' mappings\'">\n              </app-zero-state-with-illustration>              \n            </div>\n        </div>\n</div>\n',styles:[":host ::ng-deep .prevBtn:disabled > .pi-chevron-left, :host ::ng-deep .nextBtn:disabled > .pi-chevron-right,\n:host ::ng-deep .prevBtn:disabled > .pi-minus, :host ::ng-deep .nextBtn:disabled > .pi-minus {\n\n    color: var(--placeholder) !important\n}\n\n:host ::ng-deep .mappingFilterDropdown .p-dropdown {\n\n    width: 200px !important\n}\n\n:host ::ng-deep .mapped {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important;\n\n    border-radius: 9999px !important;\n\n    border-width: 1px !important;\n\n    border-style: solid !important;\n\n    border-color: var(--mapped-green-border) !important;\n\n    background-color: var(--mapped-green-bg) !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    font-size: 12px !important;\n\n    color: var(--success-toast) !important\n}\n\n:host ::ng-deep .unmapped {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important;\n\n    border-radius: 9999px !important;\n\n    border-width: 1px !important;\n\n    border-style: solid !important;\n\n    border-color: var(--unmapped-red-border) !important;\n\n    background-color: var(--unmapped-red-bg) !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    font-size: 12px !important;\n\n    color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .filterDropdown .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important\n}\n\n:host ::ng-deep .selectedItem .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 5px !important;\n\n    padding-bottom: 5px !important\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n\n    display: none !important\n}\n\n:host ::ng-deep .filterDropdown .p-dropdown-trigger {\n\n    display: block !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n\n    width: 32px !important\n}\n\n:host ::ng-deep .textbox {\n\n    border-right-width: 0px !important\n}\n\nth {\n\n    height: 40px !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    font-size: 12px !important;\n\n    font-weight: 500 !important;\n\n    color: var(--normal-text-color) !important\n}\n\ntd {\n\n    font-size: 14px !important;\n\n    font-weight: 400 !important;\n\n    color: var(--sub-text-color) !important\n}\n\n.pi-check:before {\n\n    cursor: pointer !important;\n\n    font-size: 14px !important;\n\n    color: var(--faded-text-color) !important\n}\n\n:host ::ng-deep .tooltip-main {\n\n    padding-left: 1.5rem !important;\n\n    padding-right: 1.5rem !important;\n\n    padding-bottom: 1rem !important;\n\n    text-align: center !important\n}\n\n:host ::ng-deep .tooltip-save {\n\n    font-size: 12px !important\n}\n\n:host ::ng-deep .tooltip-return {\n\n    margin-top: 6px !important;\n\n    border-radius: 0.375rem !important;\n\n    background-color: var(--placeholder) !important;\n\n    padding-left: 4px !important;\n\n    padding-right: 4px !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    font-size: 9px !important\n}"]})],GenericMappingV2Component)},"./src/app/shared/components/helper/mapping/mapping-card-header/mapping-card-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>MappingCardHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let MappingCardHeaderComponent=class MappingCardHeaderComponent{constructor(){this.triggerAutoMapEmployee=new core.EventEmitter}triggerAutoMapEmployees(){this.triggerAutoMapEmployee.emit(!0)}ngOnInit(){}};MappingCardHeaderComponent.ctorParameters=()=>[],MappingCardHeaderComponent.propDecorators={sourceField:[{type:core.Input}],mappingStats:[{type:core.Input}],showAutoMapEmployee:[{type:core.Input}],triggerAutoMapEmployee:[{type:core.Output}]},MappingCardHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-card-mapping-header",template:'<div class="tw-flex tw-justify-between">\n    <div class="tw-flex">\n        <div class="tw-rounded-10-px tw-bg-white tw-border-1-px tw-border-separator tw-p-16-px tw-w-200-px tw-h-84-px">\n            <div class="tw-w-36-px tw-h-6-px tw-rounded-12-px tw-bg-cta-disabled">\n            </div>\n            <div class="tw-pt-8-px tw-text-faded-text-color tw-text-12-px">\n                <p>Total {{sourceField | snakeCaseToSpaceCase | titlecase}}</p>\n            </div>\n            <div class="tw-text-20-px tw-text-500 tw-text-slightly-normal-text-color">\n                <p>{{mappingStats?.all_attributes_count}}</p>\n            </div>\n        </div>\n        <span class="tw-pl-16-px"></span>\n        <div class="tw-rounded-10-px tw-bg-white tw-border-1-px tw-border-separator tw-p-16-px tw-w-200-px tw-h-84-px">\n            <div class="tw-w-36-px tw-h-6-px tw-rounded-12-px tw-bg-cta-disabled">\n            </div>\n            <div class="tw-pt-8-px tw-text-faded-text-color tw-text-12-px">\n                <p>Unmapped {{sourceField | snakeCaseToSpaceCase | titlecase}}</p>\n            </div>\n            <div class="tw-text-20-px tw-text-500 tw-text-slightly-normal-text-color">\n                <p>{{mappingStats?.unmapped_attributes_count}}</p>\n            </div>\n        </div>\n    </div>\n    <div *ngIf="showAutoMapEmployee && sourceField===\'employee\'" class="tw-mt-24-px">\n        <button type="button" class="tw-text-white tw-text-500 tw-px-24-px tw-py-12-px tw-bg-mandatory-field-color tw-rounded-4-px" (click)="triggerAutoMapEmployees()">\n        <p class="tw-text-14-px tw-font-400 tw-pl-5px">Auto Map {{sourceField | titlecase}}</p>\n        </button>\n    </div>\n</div>',styles:[""]})],MappingCardHeaderComponent)},"./src/app/shared/components/helper/mapping/mapping-filter/mapping-filter.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>MappingFilterComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),tracking_service=__webpack_require__("./src/app/core/services/integration/tracking.service.ts");let MappingFilterComponent=class MappingFilterComponent{constructor(formBuilder,trackingService){this.formBuilder=formBuilder,this.trackingService=trackingService,this.mappingFilterChangeEvent=new core.EventEmitter,this.mappingSearchingEvent=new core.EventEmitter,this.filterOptions=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],this.mappingsFilter=[{label:"MAPPED",value:enum_model.tE.MAPPED},{label:"UNMAPPED",value:enum_model.tE.UNMAPPED}],this.isSearchBoxActive=!1,this.mappingFilterUpdateHandler=new core.EventEmitter}clearSearch(){this.form.controls.searchOption.patchValue(null);this.onFocusOut({target:{value:""}}),this.mappingSearchingEvent.emit("")}onFocusOut(event){""===event.target.value?this.isSearchBoxActive=!1:this.isSearchBoxActive=!0}getSelectedFilter(item){return item===enum_model.tE.MAPPED?"mapped":"unmapped"}removeFilter(){this.form.controls.filterOption.patchValue(""),this.mappingFilterChangeEvent.emit(enum_model.tE.ALL)}filterChanges(){this.form.controls.filterOption.valueChanges.subscribe((isFilterOptions=>{this.mappingFilterChangeEvent.emit(isFilterOptions?.value)}))}searchingFilter(){this.form.controls.searchOption.valueChanges.subscribe((searchValue=>{this.mappingSearchingEvent.emit(searchValue)}))}setupMappingFilterWatcher(){this.filterChanges(),this.searchingFilter()}trackAlphabeticalFilter(allSelected=!1){const properties={alphabetList:allSelected?[]:this.form.value.filterOption,allSelected,page:this.page};this.trackingService.onMappingsAlphabeticalFilter(properties)}filterOptionUpdateHandler(alphabet){this.selectedAlphabeticalFilter=alphabet,this.mappingFilterUpdateHandler.emit(alphabet),this.trackAlphabeticalFilter()}setupFilter(){if(this.form=this.formBuilder.group({searchOption:[],filterOption:[]}),this.mappingFilter!==enum_model.tE.ALL){const filter=this.mappingsFilter.filter((filter=>filter.value===this.mappingFilter));this.form.controls.filterOption.patchValue(filter[0])}else this.form.controls.filterOption.patchValue(null);this.setupMappingFilterWatcher()}ngOnInit(){this.setupFilter()}};MappingFilterComponent.ctorParameters=()=>[{type:fesm2020_forms.QS},{type:tracking_service.e}],MappingFilterComponent.propDecorators={mappingFilter:[{type:core.Input}],mappingFilterChangeEvent:[{type:core.Output}],mappingSearchingEvent:[{type:core.Output}],isAlphabetFilterHidden:[{type:core.Input}],page:[{type:core.Input}],selectedAlphabeticalFilter:[{type:core.Input}],mappingFilterUpdateHandler:[{type:core.Output}]},MappingFilterComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-mapping-filter",template:'<div class="tw-flex tw-justify-start tw-items-end" [formGroup]="form">\n    <div class="tw-mr-16-px tw-flex tw-content-center">\n        <div *ngIf="!isSearchBoxActive" class="tw-flex tw-justify-start tw-items-center tw-cursor-pointer tw-border tw-border-box-color tw-pt-8-px tw-pb-6-px tw-px-10-px tw-rounded-4-px drop-down" (click)="isSearchBoxActive = true">\n            <div>\n                <i class="pi pi-search tw-w-18-px tw-h-18-px"></i>\n            </div>\n        </div>\n        <div *ngIf="isSearchBoxActive">\n            <div class="p-inputgroup" (focusout)="onFocusOut($event)">\n                <span class="p-inputgroup-addon !tw-bg-white !tw-border-r-0 !tw-px-0">\n                  <i class="pi pi-search"></i>\n                </span>\n                <input pInputText type="text" formControlName="searchOption" class="!tw-py-5-px !tw-pl-0 !tw-border-l-0" [ngClass]="{\'textbox\': form.controls.searchOption.value !== \'\'}">\n                <span *ngIf="form.controls.searchOption.value !== \'\'" class="p-inputgroup-addon !tw-bg-white !tw-border-l-0 !tw-px-0">\n                    <i class="pi pi-times tw-cursor-pointer" (click)="clearSearch()"></i>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div>\n        <div class="tw-pl-16-px">\n            <p class="tw-text-12-px tw-text-faded-text-color tw-text-500 tw-pb-8-px">Status</p>\n        </div>\n        <div class="tw-border-l tw-border-l-separator tw-pl-16-px">\n            <p-dropdown appendTo="body"[options]="mappingsFilter" class="mappingFilterDropdown"  formControlName="filterOption" optionLabel="label"\n                placeholder="Select Status" [ngClass]="{\'selectedItem\': form.controls.filterOption.value !== null, \'filterDropdown\': form.controls.filterOption.value === \'\'}">\n                <ng-template let-item pTemplate="item">\n                    <div [ngClass]="getSelectedFilter(item.value)">{{ item.label }}</div>\n                </ng-template>\n                <ng-template let-value pTemplate="selectedItem">\n                    <div class="tw-flex tw-justify-between tw-items-center">\n                        <p [ngClass]="getSelectedFilter(form.controls.filterOption.value.value)">{{ form.controls.filterOption.value.label }}</p>\n                        <i class="pi pi-times" (click)="removeFilter()"></i>\n                    </div>\n                    <div></div>\n                </ng-template>\n            </p-dropdown>\n        </div>\n    </div>\n    <div *ngIf="!isAlphabetFilterHidden" class="tw-pl-16-px tw-pb-6-px tw-text-14-px tw-items-center tw-justify-center">\n        <div class="tw-flex">\n            <p class="tw-pr-8-px tw-cursor-pointer" [ngClass]="selectedAlphabeticalFilter === \'All\' ? \'tw-text-slightly-normal-text-color\': \'tw-text-placeholder\'" (click)="filterOptionUpdateHandler(\'All\')">\n                All\n            </p>\n            <p class="tw-pr-8-px tw-cursor-pointer" *ngFor="let option of filterOptions" [ngClass]="selectedAlphabeticalFilter === option ? \'tw-text-slightly-normal-text-color\': \'tw-text-placeholder\'" (click)="filterOptionUpdateHandler(option)">{{option}}</p>\n        </div>\n    </div>\n</div>\n',styles:[".p-inputtext:enabled:focus-visible {\n\n    border-color: var(--check-box) !important;\n\n    --tw-shadow: 0 0 #0000 !important;\n\n    --tw-shadow-colored: 0 0 #0000 !important;\n\n    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important\n}\n\n.pi-search {\n\n    color: var(--faded-text-color) !important\n}"]})],MappingFilterComponent)},"./src/app/shared/components/helper/onboarding-done/onboarding-done.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{G:()=>OnboardingDoneComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let OnboardingDoneComponent=class OnboardingDoneComponent{constructor(){this.launchIntegrationClick=new core.EventEmitter}navigateToDashboard(){this.launchIntegrationClick.emit()}ngOnInit(){}};OnboardingDoneComponent.ctorParameters=()=>[],OnboardingDoneComponent.propDecorators={launchIntegrationClick:[{type:core.Output}]},OnboardingDoneComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-onboarding-done",template:'<div class="tw-absolute tw-bg-header-1 tw-h-110-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-absolute tw-bg-header-2 tw-h-110-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-flex tw-justify-center tw-pr-74-px tw-pl-74-px tw-pt-24 tw-pb-20">\n  <div class="onboarding-done--contents">\n    <div class="tw-pt-34-px">\n      <img src="assets/gifs/success-check.gif" class="onboarding-done--align-center" alt="Onboarding done" width="120px"\n        height="120px">\n    </div>\n    <div class="tw-text-center">\n      <h2 class="tw-text-normal-text-color !tw-font-bold !tw-text-18-px">Congratulations! Your integration setup is now complete.</h2>\n    </div>\n    <div class="tw-flex tw-justify-center tw-py-24-px">\n        <button type="button" class="tw-text-500 tw-text-white tw-px-24-px tw-py-12-px tw-bg-mandatory-field-color tw-rounded-4-px" (click)="navigateToDashboard()">Launch Integration</button>\n    </div>\n    <div class="tw-py-24-px">\n      <h5 class="tw-text-faded-text-color tw-text-center tw-text-14-px">\n        You can still re-configure your export settings at any point of time from the <b class="tw-font-bold">Configuration</b> section.\n      </h5>\n    </div>\n  </div>\n</div>\n',styles:[".onboarding-done--contents {\n    z-index: 50;\n    box-sizing: border-box;\n    border-radius: 8px;\n    border-style: solid;\n    border-color: var(--disabled-bg-color);\n    background-color: var(--white);\n    padding-left: 100px;\n    padding-right: 100px;\n    padding-top: 0px;\n    padding-bottom: 20px;\n    --tw-shadow: 0px 2px 10px rgba(44, 48, 78, 0.1);\n    --tw-shadow-colored: 0px 2px 10px var(--tw-shadow-color);\n    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\n}\n.onboarding-done--align-center {\n    margin-top: 0px;\n    margin-bottom: 0px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block\n}"]})],OnboardingDoneComponent)},"./src/app/shared/components/helper/paginator/paginator.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>PaginatorComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let PaginatorComponent=class PaginatorComponent{constructor(){this.pageNumbers=[10,50,100,200],this.pageSizeChangeEvent=new core.EventEmitter,this.pageOffsetChangeEvent=new core.EventEmitter,this.dropDownValue=10,this.PaginatorPage=enum_model.yg}navigateToPage(targetPage){if(1===targetPage)this.page=1,this.pageOffsetChangeEvent.emit(0);else{this.page=targetPage;const offsetValue=(targetPage-1)*this.dropDownValue;this.pageOffsetChangeEvent.emit(offsetValue)}}pageSizeChanges(event){this.totalPages=Math.ceil(this.totalCount/this.dropDownValue),this.pageSizeChangeEvent.emit(event.value)}previousPageChange(currentPage){this.page=this.page-1;const offsetValue=(currentPage-2)*this.dropDownValue;this.pageOffsetChangeEvent.emit(offsetValue)}nextPageChange(currentPage){this.page=this.page+1;const offsetValue=currentPage*this.dropDownValue;this.pageOffsetChangeEvent.emit(offsetValue)}ngOnInit(){this.totalPages=Math.ceil(this.totalCount/this.dropDownValue)}};PaginatorComponent.ctorParameters=()=>[],PaginatorComponent.propDecorators={page:[{type:core.Input}],pageSizeChangeEvent:[{type:core.Output}],pageOffsetChangeEvent:[{type:core.Output}],totalCount:[{type:core.Input}],pageType:[{type:core.Input}],dropDownValue:[{type:core.Input}]},PaginatorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-paginator",template:'<div class="tw-flex tw-justify-between tw-items-center">\n    <div>\n        <span *ngIf="pageType === PaginatorPage.DASHBOARD">Page {{page}} of {{totalPages}}</span>\n    </div>\n    <div class="tw-flex tw-items-center">\n        <div class="tw-flex tw-items-center tw-pr-30-px">\n            <span *ngIf="pageType === PaginatorPage.DASHBOARD" class="tw-pr-10-px">Show</span>\n            <span *ngIf="pageType !== PaginatorPage.DASHBOARD" class="tw-pr-10-px">Items per page:</span>\n            <div>\n                <p-dropdown appendTo="body" [options]="pageNumbers" (onChange)="pageSizeChanges($event)" [(ngModel)]="dropDownValue">\n                    <ng-template let-value pTemplate="selectedItem" >\n                        <div *ngIf="dropDownValue" class="tw-flex">\n                            <p class="tw-text-normal-text-color tw-text-12-px !tw-font-500">{{ value }} <span *ngIf="pageType === PaginatorPage.DASHBOARD">Items</span></p>\n                        </div>\n                        <div *ngIf="!dropDownValue" class="tw-text-placeholder">\n                            Select size of page\n                        </div>\n                    </ng-template>\n                    <ng-template let-day pTemplate="item">\n                        <div>\n                            <p class="tw-text-sub-text-color tw-text-14-px">{{ day }} <span *ngIf="pageType === PaginatorPage.DASHBOARD">Items</span></p>\n                        </div>\n                    </ng-template> \n                </p-dropdown>\n            </div>\n        </div>\n        <div class="tw-flex tw-items-center">\n            <span *ngIf="pageType === PaginatorPage.DASHBOARD" class="tw-pr-10-px">Page</span>\n            <div *ngIf="pageType === PaginatorPage.DASHBOARD" class="tw-border tw-border-separator tw-flex tw-items-center tw-rounded-4-px">\n                <div class="tw-border-r tw-border-r-separator">\n                    <button type="button" class="tw-h-32-px tw-w-30-px prevBtn" (click)="previousPageChange(page)" [disabled]="page === 1" >\n                        <i class="pi pi-angle-left tw-w-6-px tw-h-12-px tw-pt-6-px"></i>\n                    </button>\n                </div>\n                <div class="tw-w-30-px tw-h-32-px tw-flex tw-items-center tw-justify-center">\n                    {{page}}\n                </div>\n                <div class="tw-border-l tw-border-l-separator">\n                    <button type="button" class="tw-h-32-px tw-w-30-px nextBtn" (click)="nextPageChange(page)" [disabled]="page === totalPages">\n                        <i class="pi pi-angle-right tw-w-6-px tw-h-12-px tw-pt-6-px"></i>\n                    </button>\n                </div>\n            </div>\n            <div *ngIf="pageType !== PaginatorPage.DASHBOARD" class="tw-flex tw-justify-between">\n                <div class="">\n                    <button type="button" class="tw-h-32-px tw-w-32-px prevBtn tw-flex tw-place-items-center tw-pt-2-px tw-mr-12-px" (click)="navigateToPage(1)" [disabled]="page === 1" >\n                        <i class="pi pi-minus tw-rotate-90"></i><i class="pi pi-chevron-left"></i>\n                    </button>\n                </div>\n                <div class="">\n                    <button type="button" class="tw-h-32-px tw-w-32-px prevBtn tw-mr-8-px" (click)="previousPageChange(page)" [disabled]="page === 1" >\n                        <i class="pi pi-chevron-left tw-w-6-px tw-h-12-px tw-pt-6-px"></i>\n                    </button>\n                </div>\n                <div class="tw-w-fix tw-h-32-px tw-flex tw-items-center tw-justify-center tw-border-2-px tw-border-separator tw-py-8-px tw-px-12-px tw-rounded-4-px tw-bg-white tw-mr-10-px">\n                    {{page}} of {{totalPages}}\n                </div>\n                <div >\n                    <button type="button" class="tw-h-32-px tw-w-32-px nextBtn tw-mr-12-px" (click)="nextPageChange(page)" [disabled]="page === totalPages">\n                        <i class="pi pi-chevron-right tw-w-6-px tw-h-12-px tw-pt-6-px"></i>\n                    </button>\n                </div>\n                <div>\n                    <button type="button" class="tw-h-32-px tw-w-32-px tw-ml-10-px nextBtn tw-flex tw-place-items-center tw-pt-2-px" (click)="navigateToPage(totalPages)" [disabled]="page === totalPages">\n                        <i class="pi pi-chevron-right"></i><i class="pi pi-minus tw-rotate-90"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>',styles:[":host ::ng-deep .p-dropdown {\n  display: flex !important;\n  height: 32px !important;\n  width: -moz-fit-content !important;\n  width: fit-content !important;\n  align-items: center !important;\n}\n\n:host ::ng-deep span {\n  font-size: 12px !important;\n  font-weight: 500 !important;\n  color: var(--faded-text-color) !important;\n}\n\n.prevBtn:disabled, .nextBtn:disabled {\n  cursor: not-allowed !important;\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n  width: 1rem !important;\n  padding-right: 14px !important;\n}\n\n.pi-chevron-left {\n  margin-left: -10px;\n}\n\n.pi-chevron-right {\n  margin-right: -10px;\n}"]})],PaginatorComponent)},"./src/app/shared/components/helper/shimmers/shimmers.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>ShimmersComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ShimmersComponent=class ShimmersComponent{constructor(){}ngOnInit(){}};ShimmersComponent.ctorParameters=()=>[],ShimmersComponent.propDecorators={exportLogHeader:[{type:core.Input}],isExportLogFetchInProgress:[{type:core.Input}],isDashboardImportInProgress:[{type:core.Input}],isMappingTableShimmers:[{type:core.Input}]},ShimmersComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-shimmers",template:'\x3c!-- Dashboard Import Shimmers --\x3e\n<div class="tw-p-24-px" *ngIf="isDashboardImportInProgress">\n    <div class="tw-flex tw-justify-between tw-items-center ">\n        <div class="tw-w-3/5">\n            <div class="tw-mb-10-px"><p-skeleton width="250px" height="16px" shape="rectangle" ></p-skeleton></div>\n            <div class="tw-mb-10-px"><p-skeleton width="500px" height="16px" shape="rectangle"></p-skeleton></div>\n            <div class="tw-mb-10-px"><p-skeleton width="300px" height="16px" shape="rectangle"></p-skeleton></div>\n        </div>\n        <div class="tw-flex tw-items-end tw-justify-end">\n            <p-skeleton width="120px" height="50px" shape="rectangle" ></p-skeleton>\n        </div>\n    </div>\n</div>\n\n\x3c!-- Export Log Dashboard View --\x3e\n<div *ngIf="isExportLogFetchInProgress && exportLogHeader">\n    <tr *ngFor="let _ of [0,1,2,3,4,5,6]">\n        <td *ngIf="isExportLogFetchInProgress"><p-skeleton width="50px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isExportLogFetchInProgress"><p-skeleton width="100px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isExportLogFetchInProgress"><p-skeleton width="100px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isExportLogFetchInProgress && exportLogHeader===\'Successful\'"><p-skeleton width="50px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isExportLogFetchInProgress && exportLogHeader===\'Successful\'"><p-skeleton width="50px" height="28px" shape="rectangle"></p-skeleton></td>\n    </tr>\n</div>\n\n\n\x3c!-- Mapping Resolve Table Shimmers --\x3e\n<div *ngIf="isMappingTableShimmers">\n    <tr *ngFor="let _ of [0,1,2,3,4,5,6]">\n        <td *ngIf="isMappingTableShimmers"><p-skeleton width="150px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isMappingTableShimmers"><p-skeleton width="250px" height="28px" shape="rectangle"></p-skeleton></td>\n    </tr>\n</div>',styles:[""]})],ShimmersComponent)},"./src/app/shared/components/helper/zero-state/zero-state.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>ZeroStateComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ZeroStateComponent=class ZeroStateComponent{constructor(){}ngOnInit(){}};ZeroStateComponent.ctorParameters=()=>[],ZeroStateComponent.propDecorators={zeroStateImageURL:[{type:core.Input}],zeroStateCaption:[{type:core.Input}]},ZeroStateComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-zero-state",template:'<div class="tw-flex tw-justify-center tw-items-center tw-mt-130-px">\n    <div class="tw-text-center">\n        <img class="tw-pr-4" [src]="zeroStateImageURL" alt="Zero State">\n        <p class="tw-pt-8 tw-font-400 tw-text-14-px">{{zeroStateCaption}}</p>\n    </div>\n</div>',styles:[""]})],ZeroStateComponent)},"./src/app/shared/components/input/dropdown/dropdown.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>DropdownComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");let DropdownComponent=class DropdownComponent{constructor(){this.form=new fesm2020_forms.cw({number:new fesm2020_forms.NI(3)})}};DropdownComponent.ctorParameters=()=>[],DropdownComponent.propDecorators={options:[{type:core.Input}],placeholder:[{type:core.Input}],form:[{type:core.Input}],formControllerName:[{type:core.Input}],displayKey:[{type:core.Input}],additionalClasses:[{type:core.Input}]},DropdownComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dropdown",template:'<form [formGroup]="form">\n    <p-dropdown\n        appendTo="body"\n        [ngClass]="additionalClasses ? additionalClasses : \'\'"\n        [placeholder]="placeholder"\n        [options]="options"\n        [formControlName]="formControllerName">\n        <ng-template pTemplate="item" let-item>\n            <div\n                #textElement\n                class="tw-flex tw-justify-between tw-items-center"\n                [ngStyle]="{\'white-space\': \'nowrap\', \'overflow\': \'hidden\', \'text-overflow\': \'ellipsis\', \'max-width\': \'16rem\'}"\n                [pTooltip]="textElement.offsetWidth < textElement.scrollWidth ? item[displayKey] : null"\n                tooltipPosition="top">\n                {{ item[displayKey] }}\n            </div>\n        </ng-template>\n\n        <ng-template pTemplate="selectedItem" let-item>\n            <div class="tw-flex tw-justify-between tw-items-center">\n                <span>\n                    {{ item[displayKey] }}\n                </span>\n            </div>\n        </ng-template>\n    </p-dropdown>\n</form>\n',styles:[":host ::ng-deep .dropdown-time-alone .p-dropdown {\n\n    width: 150px !important\n}\n\n:host ::ng-deep .dropdown-time .p-dropdown {\n\n    width: 120px !important\n}\n\n@media (min-width: 768px) {\n\n    :host ::ng-deep .dropdown-monthy .p-dropdown {\n\n        width: 120px !important\n    }\n}\n\n@media (min-width: 1024px) {\n\n    :host ::ng-deep .dropdown-monthy .p-dropdown {\n\n        width: 176px !important\n    }\n}\n\n:host ::ng-deep .error-box .p-dropdown {\n\n    border-color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown {\n\n    border-color: var(--box-color) !important\n}\n\n:host ::ng-deep .normal-box .p-dropdown.p-focus {\n\n    border-color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-dropdown {\n\n    width: 70px !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .p-disabled, .p-component:disabled {\n\n    opacity: 1\n}\n\n.sub-text {\n\n    font-size: 12px;\n\n    color: var(--faded-text-color)\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n\n    display: none !important\n}\n\n:host ::ng-deep .dropdown-size-schedule .selectedItem .p-dropdown-trigger {\n\n    visibility: visible !important\n}\n\n:host ::ng-deep .hide-chevron .p-dropdown-trigger {\n\n    display: none !important\n}"]})],DropdownComponent)},"./src/app/shared/components/input/multi-select/multi-select.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>MultiSelectComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let MultiSelectComponent=class MultiSelectComponent{constructor(){}};MultiSelectComponent.ctorParameters=()=>[],MultiSelectComponent.propDecorators={form:[{type:core.Input}],formControllerName:[{type:core.Input}],disabledOption:[{type:core.Input}],placeholder:[{type:core.Input}],options:[{type:core.Input}]},MultiSelectComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-multi-select",template:'\n<div [formGroup]="form">\n    <p-multiSelect [optionDisabled]="disabledOption" [placeholder]="placeholder" [options]="options" styleClass="tw-z-2" [formControlName]="formControllerName">\n    </p-multiSelect>\n</div>\n',styles:[":host ::ng-deep .p-multiselect-label {\n\n    z-index: 1 !important;\n\n    width: 270px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    padding-top: 8px !important;\n\n    padding-bottom: 8px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-header, :host ::ng-deep .p-multiselect-panel .p-multiselect-items {\n\n    padding: 0px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\n\n    margin-bottom: 0px !important\n}\n\n:host ::ng-deep .p-checkbox {\n\n    padding-top: 2px !important\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\n\n    height: 32px !important;\n\n    padding-left: 16px !important;\n\n    padding-right: 16px !important;\n\n    padding-top: 0px !important;\n\n    padding-bottom: 0px !important\n}"]})],MultiSelectComponent)},"./src/app/shared/components/input/toggle/toggle.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>ToggleComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ToggleComponent=class ToggleComponent{constructor(){}};ToggleComponent.ctorParameters=()=>[],ToggleComponent.propDecorators={form:[{type:core.Input}],formControllerName:[{type:core.Input}]},ToggleComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-toggle",template:'<div [formGroup]="form">\n    <p-inputSwitch [formControlName]="formControllerName"></p-inputSwitch>\n</div>\n',styles:[':host ::ng-deep .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider::after {\n  content: "Yes";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 8px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}\n\n:host ::ng-deep .p-inputswitch:not(.p-inputswitch-checked) .p-inputswitch-slider::after {\n  content: "No";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 24px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}']})],ToggleComponent)},"./src/app/shared/components/menu/main-menu/main-menu.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>MainMenuComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),branding_config=__webpack_require__("./src/app/branding/branding-config.ts");let MainMenuComponent=class MainMenuComponent{constructor(){this.moreDropdown=null,this.refreshDimensionClick=new core.EventEmitter,this.brandingConfig=branding_config.Wg}refreshDimensions(){this.refreshDimensionClick.emit(!0)}ngOnInit(){}};MainMenuComponent.ctorParameters=()=>[],MainMenuComponent.propDecorators={modules:[{type:core.Input}],activeItem:[{type:core.Input}],moreDropdown:[{type:core.Input}],appName:[{type:core.Input}],isDropdrownRequired:[{type:core.Input}],refreshDimensionClick:[{type:core.Output}]},MainMenuComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-main-menu",template:'<div class="tw-border-gray-300 tw-rounded tw-flex tw-items-center tw-justify-between">\n    <p-tabMenu [model]="modules" [activeItem]="modules[0]" ></p-tabMenu>\n\n    <div class="tw-flex tw-items-center">\n        <button [pTooltip]="\'The integration will import all the newly updated \' + appName + \' dimensions and \' + brandingConfig.brandName + \' expenses in the configured state of export\'"\n            (click)="refreshDimensions()"\n            class="tw-h-32-px tw-w-80-px tw-mr-12-px tw-flex tw-items-center focus:tw-ring-0 tw-justify-center tw-rounded tw-bg-white tw-text-black tw-border tw-border-gray-300 focus:tw-outline-none focus:tw-ring-opacity-50 active:tw-scale-95 transition-transform">\n            <img src="assets/icons/stepper/sync.svg">\n            <span class="tw-text-14-px tw-pl-8-px">\n                Sync\n            </span>\n        </button>\n\n    <p-dropdown *ngIf="isDropdrownRequired" [(ngModel)]="moreDropdown" (onChange)="null" appendTo="body" class="tw-mr-26-px" [options]="[\'Submit Feedback\']" placeholder="More">\n            <ng-template let-option pTemplate="item">\n                <div class="tw-flex tw-justify-center">\n                    <svg-icon-sprite src="open-in-new-tab" width="20px" height="20px" class="tw-pt-4-px tw-pr-8-px tw-text-mandatory-field-color"></svg-icon-sprite>\n                    <span>{{option}}</span>\n                </div>\n            </ng-template>\n        </p-dropdown> \n    </div>\n</div>\n',styles:[":host ::ng-deep .main-tab .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover, :host ::ng-deep .main-tab .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover .p-menuitem-link {\n\n    border-bottom-width: 0px !important;\n\n    background-color: var(--disabled-bg-color) !important;\n\n    font-weight: 500 !important;\n\n    color: var(--menu-inactive-text-color) !important\n}\n\n:host ::ng-deep .main-tab .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight {\n\n    background-color: var(--white) !important\n}\n\n:host ::ng-deep .main-tab .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link {\n\n    border-bottom-width: 2px !important;\n\n    border-bottom-color: var(--slightly-normal-text-color) !important;\n\n    background-color: var(--white) !important;\n\n    font-weight: 500 !important;\n\n    color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav {\n\n    border-bottom-color: var(--white) !important\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n\n    border-color: var(--white)\n}\n\n:host ::ng-deep .p-dropdown {\n\n    height: 32px !important;\n\n    width: 80px !important\n}\n\n:host ::ng-deep .p-dropdown-label {\n\n    display: flex !important;\n\n    width: auto !important;\n\n    flex: none !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n\n    width: 28px !important;\n\n    color: var(--sub-text-color) !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 0px !important;\n\n    padding-bottom: 0px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}"]})],MainMenuComponent)},"./src/app/shared/components/menu/sub-menu/sub-menu.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>SubMenuComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs");let SubMenuComponent=class SubMenuComponent{constructor(router){this.router=router}ngOnInit(){this.router.navigateByUrl(this.modules[0].routerLink)}};SubMenuComponent.ctorParameters=()=>[{type:router.F0}],SubMenuComponent.propDecorators={modules:[{type:core.Input}],activeModule:[{type:core.Input}]},SubMenuComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-sub-menu",template:'<div class="tw-mb-16-px">\n    <p-tabMenu [model]="modules" [activeItem]="activeModule"></p-tabMenu>\n</div>',styles:[":host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n  background-color: transparent;\n  margin-left: 10px !important;\n  margin-right: 10px !important;\n  margin-top: 0px !important;\n  border-top-left-radius: 0.5rem !important;\n  border-top-right-radius: 0.5rem !important;\n  border-left-width: 1px !important;\n  border-right-width: 1px !important;\n  border-top-width: 1px !important;\n  border-left-color: var(--box-color) !important;\n  border-right-color: var(--box-color) !important;\n  border-top-color: var(--box-color) !important;\n  padding-left: 24px !important;\n  padding-right: 24px !important;\n  padding-top: 12px !important;\n  padding-bottom: 12px !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link, :host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link:not(.p-disabled):hover {\n  border-bottom-color: transparent !important;\n  background-color: var(--white) !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover, :host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):hover .p-menuitem-link {\n  background-color: transparent !important;\n  border-bottom-color: transparent !important;\n  font-weight: 500 !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link:not(.p-highlight):hover {\n  border-bottom-color: transparent !important;\n  background-color: var(--disabled-bg-color) !important;\n  font-weight: 500 !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav {\n  background-color: transparent;\n  border-bottom-width: 1px !important;\n  border-bottom-color: var(--box-color) !important;\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem {\n  margin-right: -12px !important;\n}"]})],SubMenuComponent)},"./src/app/shared/components/onboarding/clone-setting/clone-setting-field/clone-setting-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>CloneSettingFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts");let CloneSettingFieldComponent=class CloneSettingFieldComponent{constructor(){this.inputType=enum_model.n$.DROPDOWN,this.InputType=enum_model.n$}};CloneSettingFieldComponent.ctorParameters=()=>[],CloneSettingFieldComponent.propDecorators={label:[{type:core.Input}],iconSource:[{type:core.Input}],options:[{type:core.Input}],placeholder:[{type:core.Input}],form:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],formControllerName:[{type:core.Input}],dropdownDisplayKey:[{type:core.Input}],disabledOption:[{type:core.Input}],additionalClasses:[{type:core.Input}],tooltipText:[{type:core.Input}],inputType:[{type:core.Input}]},CloneSettingFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-clone-setting-field",template:'<div class="clone-setting-field--field-row">\n    <div class="clone-setting-field--description-section">\n        <svg-icon-sprite width="24px" height="24px" src="{{iconSource}}" class="tw-text-menu-inactive-text-color"></svg-icon-sprite>\n        <span class="clone-setting-field--label-text">\n            {{ label }}\n            <app-mandatory-field *ngIf="isFieldMandatory"></app-mandatory-field>\n            <svg-icon-sprite width="16px" height="16px" src="info-circle-fill" class="tw-text-placeholder tw-ml-8-px tw-pb-4-px" [pTooltip]="tooltipText" tooltipPosition="top"></svg-icon-sprite>\n        </span>\n    </div>\n    <div>\n        <app-dropdown *ngIf="inputType === InputType.DROPDOWN"\n            [placeholder]="placeholder"\n            [options]="options"\n            [form]="form"\n            [formControllerName]="formControllerName"\n            [displayKey]="dropdownDisplayKey"\n            [additionalClasses]="additionalClasses">\n        </app-dropdown>\n        <app-toggle *ngIf="inputType === InputType.TOGGLE"\n            [form]="form"\n            [formControllerName]="formControllerName">\n        </app-toggle>\n        <app-multi-select *ngIf="inputType === InputType.MULTI_SELECT"\n            [form]="form"\n            [formControllerName]="formControllerName"\n            [disabledOption]="disabledOption"\n            [placeholder]="placeholder"\n            [options]="options">\n        </app-multi-select>\n    </div>\n</div>\n',styles:[".clone-setting-field--field-row {\n    display: flex;\n    justify-content: space-between\n}\n.clone-setting-field--description-section {\n    display: flex;\n    align-items: center\n}\n.clone-setting-field--label-text {\n    display: flex;\n    align-items: center;\n    padding-top: 2px;\n    padding-bottom: 2px;\n    padding-left: 16px;\n    font-size: 14px;\n    color: var(--slightly-normal-text-color)\n}"]})],CloneSettingFieldComponent)},"./src/app/shared/components/onboarding/clone-setting/clone-setting-header/clone-setting-header.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{j:()=>CloneSettingHeaderComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let CloneSettingHeaderComponent=class CloneSettingHeaderComponent{constructor(){}ngOnInit(){}};CloneSettingHeaderComponent.ctorParameters=()=>[],CloneSettingHeaderComponent.propDecorators={headerText:[{type:core.Input}],subHeaderText:[{type:core.Input}]},CloneSettingHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-clone-setting-header",template:'<div class="tw-p-24-px tw-bg-configuration-bg">\n    <div class="tw-flex">\n        <svg-icon-sprite src="gear" width="24px" height="24px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n        <div class="tw-ml-8-px">\n            <p class="tw-text-18-px tw-pb-8-px">{{ headerText }}</p>\n            <p class="tw-text-faded-text-color tw-text-14-px">{{ subHeaderText }}</p>\n        </div>\n    </div>\n</div>\n',styles:[""]})],CloneSettingHeaderComponent)},"./src/app/shared/components/qbd/configuration/configuration-label/configuration-label.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>ConfigurationLabelComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationLabelComponent=class ConfigurationLabelComponent{constructor(){}ngOnInit(){}};ConfigurationLabelComponent.ctorParameters=()=>[],ConfigurationLabelComponent.propDecorators={labelValue:[{type:core.Input}],iconPath:[{type:core.Input}],label:[{type:core.Input}],subLabel:[{type:core.Input}],placeholder:[{type:core.Input}]},ConfigurationLabelComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-label",template:'<div class="tw-p-24-px">\n    <div class="tw-flex tw-flex-row tw-justify-between tw-items-center">\n        <div class="lg:tw-w-3/5 md:tw-w-1/2 tw-flex tw-items-start">\n            <div class="tw-pr-20-px tw-mt-8-px">\n                <svg-icon-sprite *ngIf="iconPath" src="{{iconPath}}" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n            </div>\n            <div>\n                <h5 class="tw-text-14-px !tw-font-500">{{ label }}<app-mandatory-field></app-mandatory-field></h5>\n                <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4" [innerHTML]="subLabel"></h5>\n            </div>\n        </div>\n        <div class="tw-flex tw-pl-36-px tw-justify-end">\n            <h4 class="tw-text-14-px">\n                {{ labelValue.label }}\n            </h4>\n        </div>\n    </div>\n</div>\n',styles:[""]})],ConfigurationLabelComponent)},"./src/app/shared/components/qbd/configuration/configuration-radio-field/configuration-radio-field.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>ConfigurationRadioFieldComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ConfigurationRadioFieldComponent=class ConfigurationRadioFieldComponent{constructor(){}ngOnInit(){}};ConfigurationRadioFieldComponent.ctorParameters=()=>[],ConfigurationRadioFieldComponent.propDecorators={options:[{type:core.Input}],form:[{type:core.Input}],iconPath:[{type:core.Input}],label:[{type:core.Input}],subLabel:[{type:core.Input}],placeholder:[{type:core.Input}],formControllerName:[{type:core.Input}],isFieldMandatory:[{type:core.Input}],mandatoryErrorListName:[{type:core.Input}],customErrorMessage:[{type:core.Input}]},ConfigurationRadioFieldComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-radio-field",template:'<div [formGroup]="form" class="tw-p-24-px">\n    <div class="tw-flex tw-flex-row tw-justify-between">\n        <div class="lg:tw-w-3/5 md:tw-w-1/2 tw-flex tw-items-start">\n            <div class="tw-pr-20-px tw-mt-8-px">\n                <svg-icon-sprite *ngIf="iconPath" src="{{iconPath}}" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n            </div>\n            <div>\n                <h5 class="!tw-text-14-px !tw-font-500 ">{{ label }}<app-mandatory-field *ngIf="isFieldMandatory"></app-mandatory-field></h5>\n                <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4" [innerHTML]="subLabel"></h5>\n            </div>\n        </div>\n        <div *ngIf="options" class="tw-flex tw-items-center tw-pl-34-px">\n            <div *ngFor="let option of options" class="p-field-checkbox lg:tw-mr-20-px md:tw-mr-16-px">\n                <p-radioButton class="tw-mr-10-px" [value]="option.value" [formControlName]="formControllerName"[inputId]="option.value" ></p-radioButton>\n                <label class="!tw-text-14-px !tw-text-sub-text-color" [for]="option.value">{{option.label}}</label>\n            </div>\n        </div>\n    </div>\n    <div class="tw-pr-120-px tw-flex tw-justify-end">\n        <app-mandatory-error-message *ngIf="isFieldMandatory && form.controls[formControllerName].touched && !form.controls[formControllerName].valid && !form.controls[formControllerName].disabled" [listName]="mandatoryErrorListName" [customErrorMessage]="customErrorMessage"></app-mandatory-error-message>\n    </div>\n</div>\n',styles:[""]})],ConfigurationRadioFieldComponent)},"./src/app/shared/components/qbd/core/zero-state-with-illustration/zero-state-with-illustration.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>ZeroStateWithIllustrationComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ZeroStateWithIllustrationComponent=class ZeroStateWithIllustrationComponent{constructor(){}ngOnInit(){}};ZeroStateWithIllustrationComponent.ctorParameters=()=>[],ZeroStateWithIllustrationComponent.propDecorators={mainText:[{type:core.Input}],subText:[{type:core.Input}]},ZeroStateWithIllustrationComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-zero-state-with-illustration",template:'<div class="tw-flex tw-h-3/6 tw-text-center tw-p-56-px">\n    <div class="tw-m-auto">\n        <img src="assets/illustrations/zero-state.svg" width="200px" hight="200px" class="tw-inline-block">\n        <div class="tw-pt-20-px">\n            <h4 class="tw-font-500 !tw-text-14-px tw-text-slightly-normal-text-color">{{mainText}}</h4>\n            <p class="tw-pt-8-px tw-font-400 !tw-text-14-px tw-text-faded-text-color tw-max-w-sm tw-break-words">{{subText}}</p>\n        </div>\n    </div>\n</div>',styles:[""]})],ZeroStateWithIllustrationComponent)},"./src/app/shared/shared.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>SharedModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),loader_component=__webpack_require__("./src/app/shared/components/core/loader/loader.component.ts"),app_landing_page_header_component=__webpack_require__("./src/app/shared/components/helper/app-landing-page-header/app-landing-page-header.component.ts"),primeng_inputswitch=__webpack_require__("./node_modules/primeng/fesm2020/primeng-inputswitch.mjs"),primeng_radiobutton=__webpack_require__("./node_modules/primeng/fesm2020/primeng-radiobutton.mjs"),primeng_toast=__webpack_require__("./node_modules/primeng/fesm2020/primeng-toast.mjs"),primeng_inputtext=__webpack_require__("./node_modules/primeng/fesm2020/primeng-inputtext.mjs"),primeng_dropdown=__webpack_require__("./node_modules/primeng/fesm2020/primeng-dropdown.mjs"),primeng_dialog=__webpack_require__("./node_modules/primeng/fesm2020/primeng-dialog.mjs"),primeng_multiselect=__webpack_require__("./node_modules/primeng/fesm2020/primeng-multiselect.mjs"),primeng_dragdrop=__webpack_require__("./node_modules/primeng/fesm2020/primeng-dragdrop.mjs"),primeng_progressbar=__webpack_require__("./node_modules/primeng/fesm2020/primeng-progressbar.mjs"),ng_svg_icon_sprite=__webpack_require__("./node_modules/ng-svg-icon-sprite/fesm2020/ng-svg-icon-sprite.mjs"),primeng_progressspinner=__webpack_require__("./node_modules/primeng/fesm2020/primeng-progressspinner.mjs"),primeng_button=__webpack_require__("./node_modules/primeng/fesm2020/primeng-button.mjs"),primeng_tooltip=__webpack_require__("./node_modules/primeng/fesm2020/primeng-tooltip.mjs"),primeng_skeleton=__webpack_require__("./node_modules/primeng/fesm2020/primeng-skeleton.mjs"),error_component=__webpack_require__("./src/app/shared/components/core/error/error.component.ts");let TrimCharacterPipe=class TrimCharacterPipe{transform(value,trimSize){return value.length>trimSize?`${value.substring(0,trimSize)}...`:value}};TrimCharacterPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"trimCharacter"})],TrimCharacterPipe);var snake_case_to_space_case_pipe=__webpack_require__("./src/app/shared/pipes/snake-case-to-space-case.pipe.ts");let SearchPipe=class SearchPipe{transform(value,...args){if(value&&args&&args.length&&args[0]){const searchText=args[0].toLowerCase(),options=value.filter((item=>item.value?item.value.toLowerCase().includes(searchText):item.name.toLowerCase().includes(searchText)));return options&&options.length?options:value[0].value?[{id:null,value:"No result found"}]:[{email:"",name:"No result found"}]}return value}};SearchPipe=(0,tslib_es6.gn)([(0,core.Pipe)({name:"search"})],SearchPipe);var paginator_component=__webpack_require__("./src/app/shared/components/helper/paginator/paginator.component.ts"),mandatory_field_component=__webpack_require__("./src/app/shared/components/helper/mandatory-field/mandatory-field.component.ts"),mandatory_error_message_component=__webpack_require__("./src/app/shared/components/helper/mandatory-error-message/mandatory-error-message.component.ts"),zero_state_with_illustration_component=__webpack_require__("./src/app/shared/components/qbd/core/zero-state-with-illustration/zero-state-with-illustration.component.ts");var router=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs"),enum_model=__webpack_require__("./src/app/core/models/enum/enum.model.ts"),cacheable_decorator=__webpack_require__("./node_modules/ts-cacheable/dist/esm2015/cacheable.decorator.js"),storage_service=__webpack_require__("./src/app/core/services/common/storage.service.ts"),http=__webpack_require__("./node_modules/@angular/common/fesm2020/http.mjs"),catchError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js"),throwError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/throwError.js"),environment=__webpack_require__("./src/environments/environment.ts");const API_BASE_URL=environment.N.qbd_api_url,httpOptions={headers:new http.WM({"Content-Type":"application/json"})};let QbdApiService=class QbdApiService{constructor(http){this.http=http}handleError(error,httpMethod){return error.error instanceof ErrorEvent?console.error("An error occurred:",error.error.message):console.error(`Backend returned code ${error.status}, method was: ${httpMethod}, body was: ${JSON.stringify(error.error)}`),(0,throwError._)(error)}post(endpoint,body){return this.http.post(API_BASE_URL+endpoint,body,httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"POST"))))}get(endpoint,apiParams){let params=new http.LE;return Object.keys(apiParams).forEach((key=>{params=params.set(key,apiParams[key])})),this.http.get(API_BASE_URL+endpoint,{params}).pipe((0,catchError.K)((error=>this.handleError(error,"GET"))))}patch(endpoint,body){return this.http.patch(API_BASE_URL+endpoint,body,httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"PATCH"))))}put(endpoint,body){return this.http.put(API_BASE_URL+endpoint,body,httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"PUT"))))}};QbdApiService.ctorParameters=()=>[{type:http.eN}],QbdApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdApiService);let QbdWorkspaceService=class QbdWorkspaceService{constructor(apiService,storageService){this.apiService=apiService,this.storageService=storageService}getQBDWorkspace(orgId){return this.apiService.get("/workspaces/",{org_id:orgId})}postQBDWorkspace(){return this.apiService.post("/workspaces/",{})}getWorkspaceId(){return this.storageService.get("workspaceId")}setOnboardingState(onboardingState){return this.storageService.set("QBDOnboardingState",onboardingState)}getOnboardingState(){const onboardingState=this.storageService.get("QBDOnboardingState");return onboardingState||enum_model.Hi.EXPORT_SETTINGS}syncFyleDimensions(){return this.apiService.post(`/workspaces/${this.getWorkspaceId()}/fyle/sync_dimensions/`,{})}};QbdWorkspaceService.ctorParameters=()=>[{type:QbdApiService},{type:storage_service.V}],(0,tslib_es6.gn)([(0,cacheable_decorator.q)()],QbdWorkspaceService.prototype,"getQBDWorkspace",null),QbdWorkspaceService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdWorkspaceService);let OnboardingStepperComponent=class OnboardingStepperComponent{constructor(router,workspaceService){this.router=router,this.workspaceService=workspaceService,this.onboardingSteps=[{active:!1,completed:!1,number:2,step:"Export Settings",icon:"export-setting",route:"export_settings",size:{height:"18px",width:"15px"}},{active:!1,completed:!1,number:3,step:"Field Mapping",icon:"field-mapping",route:"field_mappings",size:{height:"18px",width:"15px"}},{active:!1,completed:!1,number:4,step:"Advanced",icon:"advanced-setting",route:"advanced_settings",size:{height:"20px",width:"20px"}}]}updateActiveAndCompletedSteps(){this.onboardingSteps.forEach((step=>{step.step===this.currentStep&&(step.active=!0)}));const onboardingState=this.workspaceService.getOnboardingState();for(let index={[enum_model.Hi.CONNECTION]:1,[enum_model.Hi.EXPORT_SETTINGS]:2,[enum_model.Hi.FIELD_MAPPINGS]:3,[enum_model.Hi.ADVANCED_SETTINGS]:4,[enum_model.Hi.COMPLETE]:5}[onboardingState]-2;index>0;index--)this.onboardingSteps[index-1].completed=!0}navigate(canNavigate,route){canNavigate&&this.router.navigate([`/integrations/qbd/onboarding/${route}`])}ngOnInit(){this.updateActiveAndCompletedSteps()}};OnboardingStepperComponent.ctorParameters=()=>[{type:router.F0},{type:QbdWorkspaceService}],OnboardingStepperComponent.propDecorators={currentStep:[{type:core.Input}]},OnboardingStepperComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-onboarding-stepper",template:'<div class="tw-absolute tw-bg-header-1 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-absolute tw-bg-header-2 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n\n<div class="tw-py-24-px tw-py-30-px tw-text-slightly-normal-text-color">\n    <div>\n        <div class="tw-normal-text-color tw-text-center tw-pb-16-px ">\n            <p class="!tw-font-400">Complete the following steps to generate the IIF file for QuickBooks Desktop.</p>\n        </div>\n        <div class="tw-flex tw-justify-center">\n            <div *ngFor="let onboardingStep of onboardingSteps">\n                <div class="tw-grip tw-grid-cols-1">\n                    <div class="tw-flex tw-items-center">\n                        <div class="tw-flex tw-justify-center step" (click)="navigate(onboardingStep.completed, onboardingStep.route)" [ngClass]="[onboardingStep.active && !onboardingStep.completed ? \'step-state tw-border-success-toast tw-cursor-pointer\' : \'step-state tw-border-box-color tw-cursor-not-allowed\', onboardingStep.active && onboardingStep.completed ? \'step-state tw-border-success-toast !tw-cursor-pointer\' : \'\',onboardingStep.completed && !onboardingStep.active ? \'!tw-bg-success-toast tw-border-success-toast !tw-cursor-pointer\':\'\',]">\n                            <img *ngIf="onboardingStep.active" src=\'{{ "assets/icons/stepper/" + onboardingStep.icon + ".svg" }}\' class="icon" >\n                            <img *ngIf="!onboardingStep.active && onboardingStep.completed" src="assets/icons/tick.svg" class="icon">\n                            <img *ngIf="!onboardingStep.active && !onboardingStep.completed" src=\'{{ "assets/icons/stepper/" + onboardingStep.icon + "-inactive.svg" }}\' class="icon">\n                        </div>\n                        <div *ngIf="onboardingStep.number !== 4" >\n                            <div *ngIf="!onboardingStep.completed">\n                                <hr class="line-active">\n                            </div>\n                            <div *ngIf="onboardingStep.completed" class="">\n                                <hr class="line-inactive">\n                            </div>\n                        </div>\n                    </div>\n                    <div class="tw-text-14-px tw-pt-10-px tw-font-500" [ngClass]="[onboardingStep.step === \'Export Settings\' ? \'step-name-export\' : \'\', onboardingStep.step === \'Field Mapping\' ? \'step-name-field\' : \'\', onboardingStep.step === \'Advanced\' ? \'step-name-advanced\' : \'\', !onboardingStep.active ? \'tw-text-faded-text-color\' : \'tw-text-normal-text-color\' ]">\n                        {{ onboardingStep.step }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>',styles:[".step {\n  box-sizing: border-box;\n  display: flex;\n  height: 48px;\n  width: 48px;\n  align-items: center;\n  border-radius: 9999px;\n}\n\n.step-state {\n  border-width: 1px;\n  background-color: var(--white);\n}\n\n.icon {\n  height: 20px;\n  width: 20px;\n}\n\n.line-active {\n  height: 2px;\n  width: 10rem;\n  border-top-width: 2px;\n  border-style: dashed;\n  border-color: var(--line-inactive);\n}\n\n.line-inactive {\n  height: 2px;\n  width: 10rem;\n  border-top-width: 2px;\n  border-style: solid;\n  border-color: var(--success-toast);\n}\n\n.step-name-export {\n  position: relative;\n  left: -20px;\n}\n\n.step-name-field {\n  position: relative;\n  left: -18px;\n}\n\n.step-name-advanced {\n  position: relative;\n  left: -5px;\n}"]})],OnboardingStepperComponent);let OnboardingSteppersComponent=class OnboardingSteppersComponent{constructor(router){this.router=router}navigate(canNavigate,route){canNavigate&&this.router.navigate([route])}ngOnInit(){}};OnboardingSteppersComponent.ctorParameters=()=>[{type:router.F0}],OnboardingSteppersComponent.propDecorators={onboardingSteps:[{type:core.Input}],isCloneSettingView:[{type:core.Input}]},OnboardingSteppersComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-onboarding-steppers",template:'<div class="tw-absolute tw-bg-header-1 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-absolute tw-bg-header-2 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n\n<div class="tw-py-60-px tw-text-normal-text-color">\n    <div>\n        <div class="tw-text-center tw-pb-38-px">\n            <p class="tw-font-500">\n                <span *ngIf="!isCloneSettingView">\n                    Configure the following settings to set up your integration\n                </span>\n                <span *ngIf="isCloneSettingView">\n                    Fill in the below fields to complete your integration set up\n                </span>\n            </p>\n        </div>\n        <div class="tw-flex tw-justify-center">\n            <div *ngFor="let onboardingStep of onboardingSteps">\n                <div class="tw-grip tw-grid-cols-1">\n                    <div class="tw-flex tw-items-center">\n                        <div class="tw-flex tw-justify-center step" (click)="navigate(onboardingStep.completed, onboardingStep.route)" [ngClass]="[onboardingStep.active && !onboardingStep.completed ? \'step-state tw-border-success-toast tw-text-success-toast tw-cursor-pointer\' : \'step-state tw-border-box-color tw-cursor-not-allowed\', onboardingStep.active && onboardingStep.completed ? \'step-state tw-border-success-toast !tw-cursor-pointer\' : \'\',onboardingStep.completed && !onboardingStep.active ? \'!tw-bg-success-toast tw-text-white tw-border-success-toast !tw-cursor-pointer\':\'\',]">\n                            <svg-icon-sprite *ngIf="onboardingStep.active" src=\'{{ onboardingStep.icon }}\' [ngClass]="onboardingStep.styleClasses ? onboardingStep.styleClasses[1] : \'\'" ></svg-icon-sprite>\n                            <svg-icon-sprite *ngIf="!onboardingStep.active && onboardingStep.completed" src="tick" class="tick-icon"></svg-icon-sprite>\n                            <svg-icon-sprite *ngIf="!onboardingStep.active && !onboardingStep.completed" src=\'{{ onboardingStep.icon }}-inactive\' class="tw-text-placeholder" [ngClass]="onboardingStep.styleClasses ? onboardingStep.styleClasses[1] : \'\'"></svg-icon-sprite>\n                        </div>\n                        <div *ngIf="onboardingStep.number < onboardingSteps.length" >\n                            <div *ngIf="!onboardingStep.completed">\n                                <hr class="line-active">\n                            </div>\n                            <div *ngIf="onboardingStep.completed" class="">\n                                <hr class="line-inactive">\n                            </div>\n                        </div>\n                    </div>\n                    <div class="tw-text-14-px tw-pt-10-px tw-font-500" [ngClass]="onboardingStep.styleClasses ? onboardingStep.styleClasses[0] : \'\'">\n                        {{ onboardingStep.step }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n',styles:[".step {\n\n    box-sizing: border-box;\n\n    display: flex;\n\n    height: 48px;\n\n    width: 48px;\n\n    align-items: center;\n\n    border-radius: 9999px\n}\n\n.step-state {\n\n    border-width: 1px;\n\n    background-color: var(--white)\n}\n\n.tick-icon {\n\n    height: 14px;\n\n    width: 20px\n}\n\n.line-active {\n\n    height: 2px;\n\n    width: 10rem;\n\n    border-top-width: 2px;\n\n    border-style: dashed;\n\n    border-color: var(--line-inactive)\n}\n\n.line-inactive {\n\n    height: 2px;\n\n    width: 10rem;\n\n    border-top-width: 2px;\n\n    border-style: solid;\n\n    border-color: var(--success-toast)\n}\n\n.step-name-connector--text {\n\n    position: relative;\n\n    left: -50px\n}\n\n.step-name-connector--icon {\n\n    height: 24px;\n\n    width: 24px\n}\n\n.step-name-export--text {\n\n    position: relative;\n\n    left: -20px\n}\n\n.step-name-export--icon {\n\n    height: 20px;\n\n    width: 16px\n}\n\n.step-name-import--text {\n\n    position: relative;\n\n    left: -18px\n}\n\n.step-name-import--icon {\n\n    height: 24px;\n\n    width: 24px\n}\n\n.step-name-field--text {\n\n    position: relative;\n\n    left: -18px\n}\n\n.step-name-field--icon {\n\n    height: 20px;\n\n    width: 20px\n}\n\n.step-name-advanced--text {\n\n    position: relative;\n\n    left: -30px\n}\n\n.step-name-advanced--icon {\n\n    height: 20px;\n\n    width: 20px\n}"]})],OnboardingSteppersComponent);var fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");var tracking_service=__webpack_require__("./src/app/core/services/integration/tracking.service.ts");let QbdExportSettingService=class QbdExportSettingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}getQbdExportSettings(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/export_settings/`,{})}postQbdExportSettings(exportSettingsPayload){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/export_settings/`,exportSettingsPayload)}};QbdExportSettingService.ctorParameters=()=>[{type:QbdApiService},{type:QbdWorkspaceService}],QbdExportSettingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdExportSettingService);var integrations_toast_service=__webpack_require__("./src/app/core/services/common/integrations-toast.service.ts");let QbdMappingService=class QbdMappingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService,this.getMappingPagesForSideNavBar=new core.EventEmitter}getMappings(limit,offset,sourceType,mappingState){const params={limit,offset,attribute_type:sourceType.toUpperCase()};return mappingState===enum_model.tE.MAPPED?params.destination_value__isnull=!1:mappingState===enum_model.tE.UNMAPPED&&(params.destination_value__isnull=!0),this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/qbd_mappings/`,params)}postMappings(mappingPayload){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/qbd_mappings/`,mappingPayload)}getMappingStats(sourceType){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/qbd_mappings/stats/`,{source_type:sourceType.toUpperCase()})}refreshMappingPages(){this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/export_settings/`,{}).subscribe((exportSettingResponse=>{const showMapping=!!exportSettingResponse.credit_card_expense_export_type;this.getMappingPagesForSideNavBar.emit(showMapping)}))}};QbdMappingService.ctorParameters=()=>[{type:QbdApiService},{type:QbdWorkspaceService}],QbdMappingService.propDecorators={getMappingPagesForSideNavBar:[{type:core.Output}]},QbdMappingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdMappingService);var branding_config=__webpack_require__("./src/app/branding/branding-config.ts");let ExportSettingComponent=class ExportSettingComponent{constructor(router,exportSettingService,formBuilder,workspaceService,toastService,trackingService,mappingService){this.router=router,this.exportSettingService=exportSettingService,this.formBuilder=formBuilder,this.workspaceService=workspaceService,this.toastService=toastService,this.trackingService=trackingService,this.mappingService=mappingService,this.isLoading=!0,this.saveInProgress=!1,this.isOnboarding=!0,this.ConfigurationCtaText=enum_model.Pw,this.QBDReimbursableExpensesObject=enum_model.uL,this.is_simplify_report_closure_enabled=!1,this.redirectLink=branding_config.K9.topLevelArticles.QBD,this.expenseGroupingFieldOptions=[{label:"Report",value:enum_model.VC.REPORT},{label:"Expense",value:enum_model.VC.EXPENSE}],this.reimbursableExpenseGroupingDateOptions=[{label:"Spend Date",value:enum_model.Ot.SPENT_AT},{label:"Date of export",value:enum_model.Ot.LAST_SPENT_AT}],this.creditCardExportTypes=[{label:"Credit Card Purchase",value:enum_model.jW.CREDIT_CARD_PURCHASE},{label:"Journal Entry",value:enum_model.jW.JOURNAL_ENTRY}],this.reimbursableExportTypes=[{label:"Bill",value:enum_model.uL.BILL},{label:"Journal Entry",value:enum_model.uL.JOURNAL_ENTRY}],this.cccEntityNameOptions=[{label:"Employee",value:enum_model.yj.EMPLOYEE},{label:"Vendor",value:enum_model.yj.VENDOR}],this.sessionStartTime=new Date,this.brandingConfig=branding_config.Wg}navigateToMapping(){this.router.navigate(["/integrations/qbd/main/mapping"])}reimbursableExpenseGroupingDateOptionsFn(){const reimbursableExpenseGroup=[];return reimbursableExpenseGroup.push(this.reimbursableExpenseGroupingDateOptions[1]),reimbursableExpenseGroup}CCCExportTypeWatcher(){this.exportSettingsForm.controls.cccExportType.valueChanges.subscribe((cccExportType=>{this.setCreditCardExpenseGroupingDateOptions(cccExportType,this.exportSettingsForm.controls.cccExportGroup.value)}))}CCCExportGroupWatcher(){this.exportSettingsForm.controls.cccExportGroup.valueChanges.subscribe((cccExportGroup=>{this.setCreditCardExpenseGroupingDateOptions(this.exportSettingsForm.controls.cccExportType.value,cccExportGroup)}))}setCreditCardExpenseGroupingDateOptions(cccExportType,cccExportGroup){cccExportType===enum_model.jW.CREDIT_CARD_PURCHASE?this.cccExpenseGroupingDateOptions=[{label:"Card Transaction Post date",value:enum_model.Ot.POSTED_AT},{label:"Spend Date",value:enum_model.Ot.SPENT_AT}]:cccExportType===enum_model.jW.JOURNAL_ENTRY&&cccExportGroup===enum_model.VC.EXPENSE?this.cccExpenseGroupingDateOptions=this.reimbursableExpenseGroupingDateOptions.concat([{label:"Card Transaction Post date",value:enum_model.Ot.POSTED_AT}]):this.cccExpenseGroupingDateOptions=[this.reimbursableExpenseGroupingDateOptions[1]]}namePreference(){return`Grouping reflects how the expense entries of a ${this.exportType(this.exportSettingsForm.value.cccExportType,this.creditCardExportTypes)} are posted in QuickBooks Desktop.`}accountName(){const name=this.exportSettingsForm.value.reimbursableExportType===enum_model.uL.BILL?"Accounts Payable":"Bank";return this.customMessage="Please enter "+name+" name",name}exportType(exportTypeValue,exportTypeOptions){return exportTypeValue===exportTypeOptions[0].value?exportTypeOptions[0].label:exportTypeOptions[1].label}createReimbursableExpenseWatcher(){this.exportSettingsForm.controls.reimbursableExpense.valueChanges.subscribe((isReimbursableExpenseSelected=>{isReimbursableExpenseSelected?(this.exportSettingsForm.controls.reimbursableExportType.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExportGroup.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExportDate.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExpenseState.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.bankAccount.setValidators(fesm2020_forms.kI.required)):(this.exportSettingsForm.controls.reimbursableExportType.clearValidators(),this.exportSettingsForm.controls.reimbursableExportGroup.clearValidators(),this.exportSettingsForm.controls.reimbursableExportDate.clearValidators(),this.exportSettingsForm.controls.reimbursableExpenseState.clearValidators(),this.exportSettingsForm.controls.bankAccount.clearValidators(),this.exportSettingsForm.controls.bankAccount.setValue(null),this.exportSettingsForm.controls.reimbursableExpenseState.setValue(null),this.exportSettingsForm.controls.reimbursableExportType.setValue(null),this.exportSettingsForm.controls.reimbursableExportGroup.setValue(null),this.exportSettingsForm.controls.reimbursableExportDate.setValue(null))}))}createCreditCardExpenseWatcher(){this.exportSettingsForm.controls.creditCardExpense.valueChanges.subscribe((isCreditCardExpenseSelected=>{isCreditCardExpenseSelected?(this.exportSettingsForm.controls.cccExportType.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExportGroup.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExportGroup.patchValue(this.exportSettings?.credit_card_expense_grouped_by?this.exportSettings?.credit_card_expense_grouped_by:this.expenseGroupingFieldOptions[1].value),this.exportSettingsForm.controls.cccExportDate.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExportDate.patchValue(this.exportSettings?.credit_card_expense_date?this.exportSettings?.credit_card_expense_date:this.cccExpenseGroupingDateOptions[0].value),this.exportSettingsForm.controls.cccEntityName.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExpenseState.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccAccountName.setValidators(fesm2020_forms.kI.required)):(this.exportSettingsForm.controls.cccExportType.clearValidators(),this.exportSettingsForm.controls.cccExportGroup.clearValidators(),this.exportSettingsForm.controls.cccExportDate.clearValidators(),this.exportSettingsForm.controls.cccEntityName.clearValidators(),this.exportSettingsForm.controls.cccExpenseState.clearValidators(),this.exportSettingsForm.controls.cccAccountName.clearValidators(),this.exportSettingsForm.controls.cccExportType.setValue(null),this.exportSettingsForm.controls.cccExpenseState.setValue(null),this.exportSettingsForm.controls.cccAccountName.setValue(null),this.exportSettingsForm.controls.cccExportGroup.setValue(null),this.exportSettingsForm.controls.cccExportDate.setValue(null),this.exportSettingsForm.controls.cccEntityName.setValue(null))}))}setExportSettingValidatorsAndWatchers(){this.createReimbursableExpenseWatcher(),this.createCreditCardExpenseWatcher(),this.CCCExportGroupWatcher(),this.CCCExportTypeWatcher()}exportSelectionValidator(){return control=>{let forbidden=!0;return this.exportSettingsForm&&("boolean"==typeof control.value?(control.value||control.parent?.get("reimbursableExpense")?.value||control.parent?.get("creditCardExpense")?.value)&&(forbidden=!1):control.value!==enum_model.z9.PAID&&control.value!==enum_model.z9.PAYMENT_PROCESSING||!control.parent?.get("reimbursableExpense")?.value&&!control.parent?.get("creditCardExpense")?.value||(forbidden=!1),!forbidden)?(control.parent?.get("reimbursableExpense")?.setErrors(null),control.parent?.get("creditCardExpense")?.setErrors(null),null):{forbiddenOption:{value:control.value}}}}setUpExpenseStates(){this.cccExpenseStateOptions=[{label:this.is_simplify_report_closure_enabled?"Approved":"Payment Processing",value:this.is_simplify_report_closure_enabled?enum_model.el.APPROVED:enum_model.el.PAYMENT_PROCESSING},{label:this.is_simplify_report_closure_enabled?"Closed":"Paid",value:enum_model.el.PAID}],this.expenseStateOptions=[{label:this.is_simplify_report_closure_enabled?"Processing":"Payment Processing",value:enum_model.z9.PAYMENT_PROCESSING},{label:this.is_simplify_report_closure_enabled?"Closed":"Paid",value:enum_model.z9.PAID}]}setupCCCExpenseGroupingDateOptions(){if(this.exportSettings?.credit_card_expense_export_type){const creditCardExpenseExportGroup=this.exportSettings?.credit_card_expense_grouped_by?this.exportSettings?.credit_card_expense_grouped_by:enum_model.VC.EXPENSE;this.setCreditCardExpenseGroupingDateOptions(this.exportSettings?.credit_card_expense_export_type,creditCardExpenseExportGroup)}else this.setCreditCardExpenseGroupingDateOptions(enum_model.jW.CREDIT_CARD_PURCHASE,enum_model.VC.EXPENSE)}getSettingsAndSetupForm(){this.isLoading=!0,this.isOnboarding=this.router.url.includes("onboarding"),this.exportSettingService.getQbdExportSettings().subscribe((exportSettingResponse=>{this.exportSettings=exportSettingResponse,this.is_simplify_report_closure_enabled=this.exportSettings?.is_simplify_report_closure_enabled,this.setUpExpenseStates(),this.setupCCCExpenseGroupingDateOptions(),this.exportSettingsForm=this.formBuilder.group({reimbursableExportType:[this.exportSettings?.reimbursable_expenses_export_type],reimbursableExpense:[!!this.exportSettings?.reimbursable_expenses_export_type,this.exportSelectionValidator()],reimbursableExportGroup:[this.exportSettings?.reimbursable_expense_grouped_by?this.exportSettings?.reimbursable_expense_grouped_by:null],reimbursableExportDate:[this.exportSettings?.reimbursable_expense_date?this.exportSettings?.reimbursable_expense_date:null],creditCardExpense:[!!this.exportSettings?.credit_card_expense_export_type,this.exportSelectionValidator()],cccExportType:[this.exportSettings?.credit_card_expense_export_type?this.exportSettings?.credit_card_expense_export_type:null],cccExportGroup:[this.exportSettings?.credit_card_expense_grouped_by?this.exportSettings?.credit_card_expense_grouped_by:this.expenseGroupingFieldOptions[1].value],cccExportDate:[this.exportSettings?.credit_card_expense_date?this.exportSettings?.credit_card_expense_date:this.cccExpenseGroupingDateOptions[0].value],bankAccount:[this.exportSettings?.bank_account_name?this.exportSettings?.bank_account_name:null],mileageAccountName:[this.exportSettings?.mileage_account_name?this.exportSettings?.mileage_account_name:null],cccEntityName:[this.exportSettings?.credit_card_entity_name_preference?this.exportSettings?.credit_card_entity_name_preference:null],cccAccountName:[this.exportSettings?.credit_card_account_name?this.exportSettings?.credit_card_account_name:null],reimbursableExpenseState:[this.exportSettings?.reimbursable_expense_state?this.exportSettings?.reimbursable_expense_state:null],cccExpenseState:[this.exportSettings?.credit_card_expense_state?this.exportSettings?.credit_card_expense_state:null]}),this.setExportSettingValidatorsAndWatchers(),this.isLoading=!1}),(()=>{this.setUpExpenseStates(),this.setupCCCExpenseGroupingDateOptions(),this.exportSettingsForm=this.formBuilder.group({reimbursableExportType:[null],reimbursableExpense:[!1,this.exportSelectionValidator()],reimbursableExportGroup:[this.expenseGroupingFieldOptions[1].value],reimbursableExportDate:[null],creditCardExpense:[!1,this.exportSelectionValidator()],cccExportType:[null],cccExportGroup:[this.expenseGroupingFieldOptions[1].value],cccExportDate:[this.cccExpenseGroupingDateOptions[0].value],bankAccount:[null],mileageAccountName:[null],cccEntityName:[null],cccAccountName:[null],reimbursableExpenseState:[null],cccExpenseState:[null]}),this.setExportSettingValidatorsAndWatchers(),this.isLoading=!1}))}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}constructPayloadAndSave(){this.saveInProgress=!0;const exportSettingPayload=class ExportSettingModel{static constructPayload(exportSettingsForm){return{reimbursable_expenses_export_type:exportSettingsForm.get("reimbursableExportType")?.value?exportSettingsForm.get("reimbursableExportType")?.value:null,bank_account_name:exportSettingsForm.get("bankAccount")?.value?exportSettingsForm.get("bankAccount")?.value:null,mileage_account_name:exportSettingsForm.get("mileageAccountName")?.value?exportSettingsForm.get("mileageAccountName")?.value:null,reimbursable_expense_state:exportSettingsForm.get("reimbursableExpenseState")?.value?exportSettingsForm.get("reimbursableExpenseState")?.value:null,reimbursable_expense_date:exportSettingsForm.get("reimbursableExportDate")?.value?exportSettingsForm.get("reimbursableExportDate")?.value:null,reimbursable_expense_grouped_by:exportSettingsForm.get("reimbursableExpense")?.value&&exportSettingsForm.get("reimbursableExportGroup")?.value?exportSettingsForm.get("reimbursableExportGroup")?.value:null,credit_card_expense_export_type:exportSettingsForm.get("cccExportType")?.value?exportSettingsForm.get("cccExportType")?.value:null,credit_card_expense_state:exportSettingsForm.get("cccExpenseState")?.value?exportSettingsForm.get("cccExpenseState")?.value:null,credit_card_entity_name_preference:exportSettingsForm.get("cccEntityName")?.value?exportSettingsForm.get("cccEntityName")?.value:null,credit_card_account_name:exportSettingsForm.get("cccAccountName")?.value?exportSettingsForm.get("cccAccountName")?.value:null,credit_card_expense_grouped_by:exportSettingsForm.get("creditCardExpense")?.value&&exportSettingsForm.get("cccExportGroup")?.value?exportSettingsForm.get("cccExportGroup")?.value:null,credit_card_expense_date:exportSettingsForm.get("creditCardExpense")?.value&&exportSettingsForm.get("cccExportDate")?.value?exportSettingsForm.get("cccExportDate")?.value:null}}}.constructPayload(this.exportSettingsForm);this.exportSettingService.postQbdExportSettings(exportSettingPayload).subscribe((response=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Export settings saved successfully"),this.mappingService.refreshMappingPages(),this.trackingService.trackTimeSpent(enum_model.T3.EXPORT_SETTING_QBD,this.sessionStartTime),this.workspaceService.getOnboardingState()===enum_model.Hi.EXPORT_SETTINGS?this.trackingService.onOnboardingStepCompletion(enum_model.Hi.EXPORT_SETTINGS,2,exportSettingPayload):this.trackingService.onUpdateEvent(enum_model.H1.ADVANCED_SETTINGS_QBD,{phase:this.getPhase(),oldState:this.exportSettings,newState:response}),this.isOnboarding&&(this.workspaceService.setOnboardingState(enum_model.Hi.FIELD_MAPPINGS),this.router.navigate(["/integrations/qbd/onboarding/field_mappings"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving export settings, please try again later")}))}save(){this.exportSettingsForm.valid&&this.constructPayloadAndSave()}ngOnInit(){this.getSettingsAndSetupForm()}};ExportSettingComponent.ctorParameters=()=>[{type:router.F0},{type:QbdExportSettingService},{type:fesm2020_forms.qu},{type:QbdWorkspaceService},{type:integrations_toast_service.d},{type:tracking_service.e},{type:QbdMappingService}],ExportSettingComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-export-setting",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n        <app-configuration-step-header \n        [headerText]="\'Export Settings\'"\n        [contentText]="\'In this section, you can configure how and when expenses from \' + brandingConfig.brandName + \' can be exported to QuickBooks Desktop.\'"\n        [redirectLink]="redirectLink"></app-configuration-step-header>\n    </div>\n    <div>\n        <form [formGroup]="exportSettingsForm">\n            <div class="tw-p-24-px">\n                <div class="tw-mb-16-px">\n                    <div class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg">\n                        <app-configuration-toggle-field \n                        [form]="exportSettingsForm"\n                        [label]="\'Export Reimbursable Expenses\'" \n                        [subLabel]="\'Enable this to export the reimbursable expenses from \' + brandingConfig.brandName + \'. If not enabled, any <b>out-of-pocket</b> expenses will not be exported to QuickBooks Desktop.\'" \n                        [formControllerName]="\'reimbursableExpense\'"\n                        [isSectionHeader]="true"></app-configuration-toggle-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.reimbursableExpense">\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-radio-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'how expenses to be exported\'"\n                            [label]="\'How should the expenses be exported?\'"\n                            [subLabel]="\'Choose the type of transaction in QuickBooks Desktop to export your \' + brandingConfig.brandName + \' expenses.\'"\n                            [options]="reimbursableExportTypes"\n                            [iconPath]="\'expense\'"\n                            [formControllerName]="\'reimbursableExportType\'"></app-configuration-radio-field>\n\n                            <div *ngIf="exportSettingsForm.value.reimbursableExportType">\n                                <div class="tw-pl-16 tw-pt-16-px tw-pr-24-px tw-pb-24-px tw-flex tw-flex-row tw-space-between">\n                                    <div class="lg:tw-w-3/5 md:tw-w-1/2">\n                                        <h4 class="!tw-text-14-px !tw-font-500">To which {{ accountName() }} account should the {{ exportType(exportSettingsForm.value.reimbursableExportType, reimbursableExportTypes) }} be posted to?<app-mandatory-field></app-mandatory-field></h4>\n                                        <h5 class="!tw-text-faded-text-color !tw-font-400 !tw-text-14-px tw-pt-6-px !tw-leading-4">Please share the exact name of the {{ accountName() }} account as per your QuickBooks Desktop setup. This is the account to which all the expenses from {{brandingConfig.brandName}} will be posted. </h5>\n                                    </div>\n\n                                    <div class="tw-pl-18-px">\n                                        <input type="text" class="tw-w-300-px !tw-px-10-px !tw-py-8-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px"[ngClass]="[exportSettingsForm.controls.bankAccount.invalid && exportSettingsForm.controls.bankAccount.touched ? \'error-box\' : \'normal-box\']"  pInputText formControlName="bankAccount" placeholder="Enter {{ exportSettingsForm.value.reimbursableExportType === QBDReimbursableExpensesObject.BILL ? \'Accounts Payable\' : \'Bank\'}} Name" [required]="exportSettingsForm.value.reimbursableExpense"> \n                                        <app-mandatory-error-message *ngIf="true && exportSettingsForm.controls.bankAccount.touched && !exportSettingsForm.controls.bankAccount.valid && !exportSettingsForm.controls.bankAccount.disabled" [customErrorMessage]="customMessage"></app-mandatory-error-message>\n                                    </div>\n                                </div>\n                            </div>\n                            <div *ngIf="exportSettingsForm.value.reimbursableExportType">\n                                <div class="tw-pl-16 tw-pt-16-px tw-pr-24-px tw-pb-24-px tw-flex tw-flex-row tw-space-between">\n                                    <div class="lg:tw-w-3/5 md:tw-w-1/2">\n                                        <h4 class="!tw-text-14-px !tw-font-500">To which account should the Mileage expenses be posted to?</h4>\n                                        <h5 class="!tw-text-faded-text-color !tw-font-400 !tw-text-14-px tw-pt-6-px !tw-leading-4">Please share the exact name of the Mileage account as per your QuickBooks Desktop setup. This is the account to which all the mileage expenses from {{ brandingConfig.brandName }} will be posted.</h5>\n                                    </div>\n                            \n                                    <div class="tw-pl-18-px">\n                                        <input type="text" class="tw-w-300-px !tw-px-10-px !tw-py-8-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px"  pInputText formControlName="mileageAccountName" placeholder="Enter Mileage Account Name"> \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-radio-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'how expenses to be grouped\'"\n                            [label]="\'How would you like to group your expenses?\'"\n                            [subLabel]="\'Grouping reflects how the expense entries are posted in QuickBooks Desktop.\'"\n                            [options]="expenseGroupingFieldOptions"\n                            [iconPath]="\'copy-v2\'"\n                            [formControllerName]="\'reimbursableExportGroup\'"></app-configuration-radio-field>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <div *ngIf="exportSettingsForm.controls.reimbursableExportGroup.value === expenseGroupingFieldOptions[0].value">\n                                <app-configuration-select-field\n                                [form]="exportSettingsForm"\n                                [label]="\'Set the transaction date\'"\n                                [subLabel]="\'The selected date will reflect in expenses exported to QuickBooks Desktop\'"\n                                [isFieldMandatory]="true"\n                                [mandatoryErrorListName]="\'transaction date\'"\n                                [options]="reimbursableExpenseGroupingDateOptionsFn()"\n                                [iconPath]="\'calender\'"\n                                [placeholder]="\'Select date type\'"\n                                [formControllerName]="\'reimbursableExportDate\'"></app-configuration-select-field>\n                            </div>\n                            <div *ngIf="exportSettingsForm.controls.reimbursableExportGroup.value === expenseGroupingFieldOptions[1].value">\n                                <app-configuration-select-field\n                                [form]="exportSettingsForm"\n                                [label]="\'Set the transaction date\'"\n                                [subLabel]="\'The selected date will reflect in expenses exported to QuickBooks Desktop\'"\n                                [isFieldMandatory]="true"\n                                [mandatoryErrorListName]="\'transaction date\'"\n                                [options]="reimbursableExpenseGroupingDateOptions"\n                                [iconPath]="\'calender\'"\n                                [placeholder]="\'Select date type\'"\n                                [formControllerName]="\'reimbursableExportDate\'"></app-configuration-select-field>\n                            </div>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'export state\'"\n                            [label]="\'At which state should the expenses be ready to export from \' + brandingConfig.brandName + \'?\'"\n                            [subLabel]="\'You could choose to export expenses when they have been approved and are awaiting payment clearance, OR simply when they have been paid out.\'"\n                            [options]="expenseStateOptions"\n                            [iconPath]="\'questionmark\'"\n                            [placeholder]="\'Select expense state \'"\n                            [formControllerName]="\'reimbursableExpenseState\'"></app-configuration-select-field>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg">\n                        <app-configuration-toggle-field \n                        [form]="exportSettingsForm"\n                        [label]="\'Export Corporate Card Expenses\'" \n                        [subLabel]="\'Enable the export of <b>credit card</b> expenses from \' + brandingConfig.brandName + \' to QuickBooks Desktop.\'"\n                        [formControllerName]="\'creditCardExpense\'"\n                        [isSectionHeader]="true"></app-configuration-toggle-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.creditCardExpense">\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-radio-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'expenses to be exported\'"\n                            [label]="\'How should the expenses be exported?\'"\n                            [subLabel]="\'Choose the type of transaction in QuickBooks Desktop to export your \' + brandingConfig.brandName + \' expenses.\'"\n                            [options]="creditCardExportTypes"\n                            [iconPath]="\'expense\'"\n                            [formControllerName]="\'cccExportType\'"></app-configuration-radio-field>\n\n                            <div *ngIf="exportSettingsForm.value.cccExportType">\n                                <div class="tw-pl-16 tw-pt-16-px tw-pr-24-px tw-pb-24-px tw-flex tw-flex-row tw-space-between">\n                                    <div class="lg:tw-w-3/5 md:tw-w-1/2">\n                                        <h4 class="!tw-text-14-px !tw-font-500">Enter the Credit card account name<app-mandatory-field></app-mandatory-field></h4>\n                                        <h5 class="!tw-text-faded-text-color !tw-font-400 !tw-text-14-px tw-pt-6-px !tw-leading-4">Please share the exact name of the Credit Card Account as per your QuickBooks Desktop setup. This is the account to which all the expenses from {{brandingConfig.brandName}} will be posted. </h5>\n                                    </div>\n\n                                    <div class="tw-pl-18-px">\n                                        <input type="text" class="tw-w-300-px !tw-px-10-px !tw-py-8-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" [ngClass]="[exportSettingsForm.controls.cccAccountName.invalid && exportSettingsForm.controls.cccAccountName.touched ? \'error-box\' : \'normal-box\']" pInputText formControlName="cccAccountName" placeholder="Enter Credit Card Account Name" [required]="exportSettingsForm.value.creditCardExpense"> \n                                        <app-mandatory-error-message *ngIf="true && exportSettingsForm.controls.cccAccountName.touched && !exportSettingsForm.controls.cccAccountName.valid && !exportSettingsForm.controls.cccAccountName.disabled" [customErrorMessage]="\'Please enter a Credit Card Account name\'"></app-mandatory-error-message>\n                                    </div>\n                                </div>\n\n                                <div class="tw-pl-16 tw-pr-24-px">\n                                    <div class="tw-p-12-px tw-bg-info-section tw-rounded-4-px tw-flex tw-flex-row tw-items-start">\n                                        <div class="tw-mr-6-px tw-mt-2-px">\n                                            <div class="tw-w-4 tw-h-4 tw-rounded-full tw-bg-info tw-flex tw-items-center tw-justify-center">\n                                                <strong class="tw-text-white tw-text-12-px tw-font-bold">i</strong>\n                                            </div>\n                                        </div>\n                                        <div class="tw-text-14-px tw-text-400 tw-text-faded-text-color">\n                                            <span *ngIf="isOnboarding" class="tw-max-w-sm tw-break-words">If you wish to export expenses to individual credit card accounts, you can establish credit card mappings in the integration dashboard after launching the integration.</span>\n                                            <span *ngIf="!isOnboarding" class="tw-max-w-sm tw-break-words">If you wish to export expenses to individual credit card accounts, you can establish credit card mappings in the <a class="tw-text-hyperlink-color tw-cursor-pointer" (click)="navigateToMapping()">Mapping section</a>.</span>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div>\n                                    <app-configuration-select-field\n                                        [form]="exportSettingsForm"\n                                        [isFieldMandatory]="true"\n                                        [mandatoryErrorListName]="\'entity name\'"\n                                        [label]="\'Set the PURCHASED FROM field to\'"\n                                        [subLabel]="\'Select how the Vendor or Employee should be represented as Payee for the credit card purchase.\'"\n                                        [options]="cccEntityNameOptions"\n                                        [placeholder]="\'Select Credit Card Entity Name Preference\'"\n                                        [formControllerName]="\'cccEntityName\'"></app-configuration-select-field>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <div *ngIf="exportSettingsForm.value.cccExportType === creditCardExportTypes[0].value">\n                                <app-configuration-label\n                                [label]="\'How would you like to group your expenses?\'"\n                                [subLabel]="\'Grouping reflects how the expense entries are posted in QuickBooks Desktop.\'"\n                                [labelValue]="expenseGroupingFieldOptions[1]"\n                                [iconPath]="\'copy-v2\'"></app-configuration-label>\n                            </div>\n                            <div *ngIf="exportSettingsForm.value.cccExportType !== creditCardExportTypes[0].value">\n                                <app-configuration-radio-field\n                                [form]="exportSettingsForm"\n                                [isFieldMandatory]="true"\n                                [mandatoryErrorListName]="\'expense to be grouped\'"\n                                [label]="\'How would you like to group your expenses?\'"\n                                [subLabel]="\'Grouping reflects how the expense entries are posted in QuickBooks Desktop.\'"\n                                [options]="expenseGroupingFieldOptions"\n                                [iconPath]="\'copy-v2\'"\n                                [formControllerName]="\'cccExportGroup\'"></app-configuration-radio-field>\n                            </div>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-select-field\n                                [form]="exportSettingsForm"\n                                [isFieldMandatory]="true"\n                                [mandatoryErrorListName]="\'transaction date\'"\n                                [label]="\'Set the transaction date\'"\n                                [subLabel]="\'The selected date will reflect in expenses exported to QuickBooks Desktop\'"\n                                [options]="cccExpenseGroupingDateOptions"\n                                [iconPath]="\'calender\'"\n                                [placeholder]="\'Select date type\'"\n                                [formControllerName]="\'cccExportDate\'">\n                            </app-configuration-select-field>\n                        </div>\n                        <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'expense state\'"\n                            [label]="\'At which state should the expenses be ready to export from \' + brandingConfig.brandName + \'?\'"\n                            [subLabel]="\'You could choose to export expenses when they have been approved and are awaiting payment clearance, OR simply when they have been paid out.\'"\n                            [options]="cccExpenseStateOptions"\n                            [iconPath]="\'questionmark\'"\n                            [placeholder]="\'Select expense state \'"\n                            [formControllerName]="\'cccExpenseState\'"></app-configuration-select-field>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <app-configuration-step-footer [ctaText]="!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" [isButtonDisabled]="!exportSettingsForm.valid || saveInProgress" (save)="save()"></app-configuration-step-footer>\n            </div>\n        </form>\n    </div>\n</div>',styles:[":host ::ng-deep .error-box {\n\n    border-color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .normal-box {\n\n    border-color: var(--box-color) !important\n}\n\n:host ::ng-deep .normal-box :enabled:focus-visible {\n\n    border-color: var(--slightly-normal-text-color) !important\n}"]})],ExportSettingComponent);var platform_browser=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/platform-browser.mjs"),api_service=__webpack_require__("./src/app/core/services/common/api.service.ts"),helper_service=__webpack_require__("./src/app/core/services/common/helper.service.ts");let OrgService=class OrgService{constructor(sanitizer,apiService,storageService,helper){this.sanitizer=sanitizer,this.apiService=apiService,this.storageService=storageService,helper.setBaseApiURL(enum_model._r.INTEGRATION)}getOrgId(){return this.storageService.get("orgId")}createOrg(){return this.apiService.patch("/orgs/",{})}getOrgs(orgId){return this.apiService.get("/orgs/",{org_id:orgId})}getCachedOrg(){return this.storageService.get("org")}createWorkatoWorkspace(){return this.apiService.patch(`/orgs/${this.getOrgId()}/workato_workspace/`,{})}connectFyle(appName){const payload={};return appName&&(payload.app_name=appName),this.apiService.post(`/orgs/${this.getOrgId()}/connect_fyle/`,payload)}getAdditionalEmails(){return this.apiService.get(`/orgs/${this.getOrgId()}/admins/`,{})}connectSendgrid(){return this.apiService.post(`/orgs/${this.getOrgId()}/sendgrid_connection/`,{})}sanitizeUrl(url){return this.sanitizer.bypassSecurityTrustResourceUrl(url)}generateToken(managedUserId){return this.apiService.get(`/orgs/${this.getOrgId()}/generate_token/`,{managed_user_id:managedUserId})}};OrgService.ctorParameters=()=>[{type:platform_browser.DomSanitizer},{type:api_service.s},{type:storage_service.V},{type:helper_service.W}],OrgService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],OrgService);let QbdAdvancedSettingService=class QbdAdvancedSettingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}getQbdAdvancedSettings(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/advanced_settings/`,{})}postQbdAdvancedSettings(advancedSettingPayload){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/advanced_settings/`,advancedSettingPayload)}};QbdAdvancedSettingService.ctorParameters=()=>[{type:QbdApiService},{type:QbdWorkspaceService}],QbdAdvancedSettingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdAdvancedSettingService);let AdvancedSettingComponent=class AdvancedSettingComponent{constructor(router,advancedSettingService,formBuilder,workspaceService,orgService,toastService,trackingService){this.router=router,this.advancedSettingService=advancedSettingService,this.formBuilder=formBuilder,this.workspaceService=workspaceService,this.orgService=orgService,this.toastService=toastService,this.trackingService=trackingService,this.ConfigurationCtaText=enum_model.Pw,this.QBDScheduleFrequency=enum_model.P4,this.frequencyOption=[{value:enum_model.P4.DAILY,label:"Daily"},{value:enum_model.P4.WEEKLY,label:"Weekly"},{value:enum_model.P4.MONTHLY,label:"Monthly"}],this.defaultMemoFields=["employee_email","merchant","purpose","category","spent_on","report_number","expense_link"],this.defaultTopMemoOptions=["employee_email","employee_name","purpose","merchant"],this.weeklyOptions=["SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY"],this.frequencyIntervals=[...Array(30).keys()].map((day=>({label:this.setFrequencyInterval(day+1)+" of every month",value:(day+1).toString()}))),this.memoStructure=[],this.sessionStartTime=new Date,this.brandingConfig=branding_config.Wg}formatMemoPreview(){const time=Date.now(),previewValues={employee_email:"john.doe@acme.com",category:"Meals and Entertainment",purpose:"Client Meeting",merchant:"Pizza Hut",report_number:"C/2021/12/R/1",spent_on:new Date(time).toLocaleDateString(),expense_link:`${environment.N.fyle_app_url}/app/main/#/enterprise/view_expense/`};this.memoPreviewText="";const memo=[];this.memoStructure.forEach(((field,index)=>{if(field in previewValues){const defaultIndex=this.defaultMemoFields.indexOf(this.memoStructure[index]);memo[defaultIndex]=previewValues[field]}})),memo.forEach(((field,index)=>{this.memoPreviewText+=field,index+1!==memo.length&&(this.memoPreviewText=this.memoPreviewText+" - ")}))}setFrequencyInterval(day){return 1===day?day+" st":2===day?day+" nd":3===day?day+" rd":day+" th"}initialTime(){const inputTime=this.advancedSettings?.time_of_day?this.advancedSettings.time_of_day:"12:00:00",time=new Date(`01/01/2000 ${inputTime} GMT`).toLocaleString("en-US",{hour12:!0,hour:"numeric",minute:"numeric",second:"numeric"}).split(" "),Time=time[0][0]>"1"&&":"===time[0][1]?"0"+time[0]:time[0];return time[0]=Time.slice(0,-3),time}createMemoStructureWatcher(){this.memoStructure=this.advancedSettingsForm.value.expenseMemoStructure,this.formatMemoPreview(),this.advancedSettingsForm.controls.expenseMemoStructure.valueChanges.subscribe((memoChanges=>{this.memoStructure=memoChanges,this.formatMemoPreview()}))}frequencyWatcher(){this.advancedSettingsForm.controls.frequency.valueChanges.subscribe((frequency=>{frequency===this.frequencyOption[1].value?(this.advancedSettingsForm.controls.dayOfWeek.setValidators(fesm2020_forms.kI.required),this.advancedSettingsForm.controls.dayOfMonth.clearValidators()):frequency===this.frequencyOption[2].value&&(this.advancedSettingsForm.controls.dayOfWeek.clearValidators(),this.advancedSettingsForm.controls.dayOfMonth.setValidators(fesm2020_forms.kI.required))}))}scheduledWatcher(){this.advancedSettingsForm.controls.exportSchedule.value&&(this.advancedSettingsForm.controls.email.setValidators(fesm2020_forms.kI.required),this.advancedSettingsForm.controls.frequency.setValidators(fesm2020_forms.kI.required)),this.advancedSettingsForm.controls.exportSchedule.valueChanges.subscribe((isScheduledSelected=>{isScheduledSelected?(this.advancedSettingsForm.controls.email.setValidators(fesm2020_forms.kI.required),this.advancedSettingsForm.controls.frequency.setValidators(fesm2020_forms.kI.required)):(this.advancedSettingsForm.controls.frequency.clearValidators(),this.advancedSettingsForm.controls.frequency.setValue(null),this.advancedSettingsForm.controls.email.clearValidators(),this.advancedSettingsForm.controls.email.setValue([]))}))}getAdminEmails(){this.isLoading=!0,this.orgService.getAdditionalEmails().subscribe((emailResponse=>{this.adminEmails=emailResponse,this.getSettingsAndSetupForm()}))}getSettingsAndSetupForm(){this.isOnboarding=this.router.url.includes("onboarding"),this.advancedSettingService.getQbdAdvancedSettings().subscribe((advancedSettingResponse=>{this.advancedSettings=advancedSettingResponse;const resultTime=this.initialTime();this.advancedSettingsForm=this.formBuilder.group({expenseMemoStructure:[this.advancedSettings?.expense_memo_structure&&this.advancedSettings?.expense_memo_structure.length>0?this.advancedSettings?.expense_memo_structure:this.defaultMemoFields,fesm2020_forms.kI.required],topMemoStructure:[this.advancedSettings?.top_memo_structure.length>0?this.advancedSettings?.top_memo_structure[0]:this.defaultTopMemoOptions[0],fesm2020_forms.kI.required],exportSchedule:[!!this.advancedSettings?.schedule_is_enabled&&this.advancedSettings?.schedule_is_enabled],email:[this.advancedSettings?.emails_selected.length>0?this.advancedSettings?.emails_selected:[]],frequency:[this.advancedSettings?.frequency?this.advancedSettings?.frequency:null],dayOfMonth:[this.advancedSettings?.day_of_month?this.advancedSettings?.day_of_month:null],dayOfWeek:[this.advancedSettings?.day_of_week?this.advancedSettings?.day_of_week:null],timeOfDay:[resultTime[0]],meridiem:[resultTime[1]],search:[]}),this.isLoading=!1,this.setCustomValidator()}),(error=>{const resultTime=this.initialTime();this.advancedSettingsForm=this.formBuilder.group({expenseMemoStructure:[this.defaultMemoFields,fesm2020_forms.kI.required],topMemoStructure:[this.defaultTopMemoOptions[0],fesm2020_forms.kI.required],exportSchedule:[!1],email:[[]],frequency:[null],dayOfMonth:[null],dayOfWeek:[null],timeOfDay:[resultTime[0]],meridiem:[resultTime[1]],search:[]}),this.isLoading=!1,this.setCustomValidator()}))}setCustomValidator(){this.createMemoStructureWatcher(),this.frequencyWatcher(),this.scheduledWatcher()}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}constructPayloadAndSave(){this.saveInProgress=!0;const advancedSettingPayload=class AdvancedSettingModel{static constructPayload(advancedSettingForm){const topMemo=[];topMemo.push(advancedSettingForm.value.topMemoStructure);const time=function getFrequencyTime(advancedSettingForm){if(advancedSettingForm.get("frequency")?.value){const currentDate=`${advancedSettingForm.controls.timeOfDay.value} ${advancedSettingForm.controls.meridiem.value}`,date=new Date(`01/01/2000 ${currentDate}`),hours=date.getUTCHours(),minutes=date.getUTCMinutes();return`${hours.toString().padStart(2,"0")}:${minutes.toString().padStart(2,"0")}:00`}return null}(advancedSettingForm);return{expense_memo_structure:advancedSettingForm.get("expenseMemoStructure")?.value?advancedSettingForm.get("expenseMemoStructure")?.value:null,top_memo_structure:advancedSettingForm.get("topMemoStructure")?.value?topMemo:null,schedule_is_enabled:!!advancedSettingForm.get("exportSchedule")?.value&&advancedSettingForm.get("exportSchedule")?.value,emails_selected:advancedSettingForm.get("email")?.value?advancedSettingForm.get("email")?.value:null,day_of_month:advancedSettingForm.get("dayOfMonth")?.value?advancedSettingForm.get("dayOfMonth")?.value:null,day_of_week:advancedSettingForm.get("dayOfWeek")?.value?advancedSettingForm.get("dayOfWeek")?.value:null,frequency:advancedSettingForm.get("frequency")?.value?advancedSettingForm.get("frequency")?.value:null,time_of_day:advancedSettingForm.get("frequency")?.value?time:null}}}.constructPayload(this.advancedSettingsForm);this.advancedSettingService.postQbdAdvancedSettings(advancedSettingPayload).subscribe((response=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Advanced settings saved successfully"),this.trackingService.trackTimeSpent(enum_model.T3.ADVANCED_SETTINGS_QBD,this.sessionStartTime),this.workspaceService.getOnboardingState()===enum_model.Hi.ADVANCED_SETTINGS?this.trackingService.onOnboardingStepCompletion(enum_model.Hi.ADVANCED_SETTINGS,4,advancedSettingPayload):this.trackingService.onUpdateEvent(enum_model.H1.ADVANCED_SETTINGS_QBD,{phase:this.getPhase(),oldState:this.advancedSettings,newState:response}),this.isOnboarding&&(this.workspaceService.setOnboardingState(enum_model.Hi.COMPLETE),this.router.navigate(["/integrations/qbd/onboarding/done"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving advanced settings, please try again later")}))}save(){this.advancedSettingsForm.valid&&this.constructPayloadAndSave()}ngOnInit(){this.getAdminEmails()}};AdvancedSettingComponent.ctorParameters=()=>[{type:router.F0},{type:QbdAdvancedSettingService},{type:fesm2020_forms.qu},{type:QbdWorkspaceService},{type:OrgService},{type:integrations_toast_service.d},{type:tracking_service.e}],AdvancedSettingComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-advanced-setting",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n        <app-configuration-step-header \n        [headerText]="\'Advanced Settings\'"\n        [contentText]="\'This section contains settings to automate and customize your expense export.\'"></app-configuration-step-header>\n    </div>\n    <div>\n        <form [formGroup]="advancedSettingsForm">\n            <div class="tw-p-24-px">\n                <div class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg tw-my-16-px">\n                    <app-configuration-toggle-field \n                        [form]="advancedSettingsForm"\n                        [label]="\'Schedule automatic export\'" \n                        [subLabel]="\'Set up a schedule to frequently automate the export of expenses from \' + brandingConfig.brandName + \' to QuickBooks Desktop.\'"\n                        [formControllerName]="\'exportSchedule\'">\n                    </app-configuration-toggle-field>\n                </div>\n                <div *ngIf="advancedSettingsForm.value.exportSchedule">\n                    <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="advancedSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'Frequency\'"\n                        [label]="\'How frequently do you want the IIF file to be generated?\'"\n                        [subLabel]="\'You can select the frequency you want your IIF file to be sent via email.\'"\n                        [options]="frequencyOption"\n                        [iconPath]="\'sync\'"\n                        [placeholder]="\'Select frequency\'"\n                        [formControllerName]="\'frequency\'"></app-configuration-select-field>\n    \n                        <div *ngIf="advancedSettingsForm.value.frequency">\n                            <div class="tw-pl-22-px">\n                                <div *ngIf="advancedSettingsForm.value.frequency === QBDScheduleFrequency.DAILY" >\n                                    <app-configuration-select-field\n                                    [form]="advancedSettingsForm"\n                                    [isFieldMandatory]="true"\n                                    [mandatoryErrorListName]="\'Time\'"\n                                    [label]="\'Select the time of the day for the IIF file to be generated\'"\n                                    [subLabel]="\'You can select the frequency you want your IIF file to be sent via email.\'"\n                                    [options]="weeklyOptions"\n                                    [formControllerName]="\'timeOfDay\'"></app-configuration-select-field>\n                                </div>\n                                <div *ngIf="advancedSettingsForm.value.frequency === QBDScheduleFrequency.WEEKLY" >\n                                    <app-configuration-select-field\n                                    [form]="advancedSettingsForm"\n                                    [isFieldMandatory]="true"\n                                    [mandatoryErrorListName]="\'day\'"\n                                    [label]="\'Select the time of the week for the IIF file to be generated\'"\n                                    [subLabel]="\'You can select the frequency you want your IIF file to be sent via email.\'"\n                                    [options]="weeklyOptions"\n                                    [placeholder]="\'Select Weekly frequency\'"\n                                    [formControllerName]="\'dayOfWeek\'"></app-configuration-select-field>\n                                </div>\n                                <div *ngIf="advancedSettingsForm.value.frequency === QBDScheduleFrequency.MONTHLY" >\n                                    <app-configuration-select-field\n                                    [form]="advancedSettingsForm"\n                                    [isFieldMandatory]="true"\n                                    [mandatoryErrorListName]="\'date\'"\n                                    [label]="\'Select the time of the month for the IIF file to be generated\'"\n                                    [subLabel]="\'You can select the frequency you want your IIF file to be sent via email.\'"\n                                    [options]="frequencyIntervals"\n                                    [placeholder]="\'Select Monthly frequency\'"\n                                    [formControllerName]="\'dayOfMonth\'"></app-configuration-select-field> \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-email-multi-select-field\n                            [form]="advancedSettingsForm"\n                            [label]="\'Select an email address that should receive the IIF file\'"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'email for export\'"\n                            [subLabel]="\'You can select the email address from the given list, or add new one to receive the IIF file via email.\'"\n                            [options]="adminEmails"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select email address\'"\n                            [formControllerName]="\'email\'">\n                        </app-email-multi-select-field>\n                    </div>\n                </div>\n                <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                    <app-configuration-select-field\n                    [form]="advancedSettingsForm"\n                    [label]="\'Select the Top level MEMO field data for QuickBooks Desktop\'"\n                    [subLabel]="\'You can customize the <b>data point</b> you would like to export to QuickBooks Desktop\\’s <b>Top-level MEMO</b> field while exporting expenses from \' + brandingConfig.brandName + \'.\'"\n                    [isFieldMandatory]="true"\n                    [mandatoryErrorListName]="\'top level memo\'"\n                    [simpleOptions]="defaultTopMemoOptions"\n                    [iconPath]="\'expense\'"\n                    [placeholder]="\'Select Top Memo Type\'"\n                    [formControllerName]="\'topMemoStructure\'"></app-configuration-select-field>\n                </div>\n                <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                    <app-configuration-multi-select\n                    [form]="advancedSettingsForm"\n                    [isFieldMandatory]="true"\n                    [customErrorMessage]="\'Please select atleast one memo type from the list\'"\n                    [label]="\'Set the Line-Item level MEMO field data for QuickBooks Desktop.*\'"\n                    [subLabel]="\'You can customize the data set you would like to export to QuickBooks Desktop\\’s <b>Transaction Line-Item level MEMO</b> field while exporting expenses from \' + brandingConfig.brandName + \'.\'"\n                    [options]="defaultMemoFields"\n                    [iconPath]="\'expense\'"\n                    [placeholder]="\'Select Memo Types\'"\n                    [formControllerName]="\'expenseMemoStructure\'"></app-configuration-multi-select>\n                    <div class="tw-p-24-px">\n                        <p class="tw-text-12-px tw-mb-12-px tw-text-faded-text-color">Preview of the data in QuickBooks Desktop Memo field</p>\n                        <div class="tw-bg-disabled-bg-color tw-rounded-4-px tw-text-14-px tw-py-8-px tw-px-8-px">\n                            <span>{{ memoPreviewText }}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <app-configuration-step-footer [ctaText]="!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" [isButtonDisabled]="!advancedSettingsForm.valid || saveInProgress" (save)="save()"></app-configuration-step-footer>\n            </div>\n        </form>\n    </div>\n</div>\n',styles:[""]})],AdvancedSettingComponent);let QbdFieldMappingService=class QbdFieldMappingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}getQbdFieldMapping(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/field_mappings/`,{})}postQbdFieldMapping(fieldMappingPayload){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/field_mappings/`,fieldMappingPayload)}};QbdFieldMappingService.ctorParameters=()=>[{type:QbdApiService},{type:QbdWorkspaceService}],QbdFieldMappingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QbdFieldMappingService);let FieldMappingComponent=class FieldMappingComponent{constructor(router,formBuilder,fieldMappingService,workspaceService,toastService,trackingService){this.router=router,this.formBuilder=formBuilder,this.fieldMappingService=fieldMappingService,this.workspaceService=workspaceService,this.toastService=toastService,this.trackingService=trackingService,this.isOnboarding=!0,this.ConfigurationCtaText=enum_model.Pw,this.redirectLink=branding_config.K9.topLevelArticles.QBD,this.representationOption=[{label:"Project",value:enum_model.NJ.PROJECT},{label:"Cost Center",value:enum_model.NJ.COST_CENTER}],this.sessionStartTime=new Date,this.brandingConfig=branding_config.Wg}mappingFieldFormOptionsFunction(formControllerName){return this.representationOption.filter((option=>option.value!==this.fieldMappingForm.value[formControllerName]))}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}constructPayloadAndSave(){this.saveInProgress=!0;const fieldMappingPayload=class FieldMappingModel{static constructPayload(fieldMappingForm){return{class_type:fieldMappingForm.get("classType")?.value?fieldMappingForm.get("classType")?.value:null,project_type:fieldMappingForm.get("customerType")?.value?fieldMappingForm.get("customerType")?.value:null}}}.constructPayload(this.fieldMappingForm);this.fieldMappingService.postQbdFieldMapping(fieldMappingPayload).subscribe((response=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Field mapping saved successfully"),this.trackingService.trackTimeSpent(enum_model.T3.FIELD_MAPPING_QBD,this.sessionStartTime),this.workspaceService.getOnboardingState()===enum_model.Hi.FIELD_MAPPINGS?this.trackingService.onOnboardingStepCompletion(enum_model.Hi.FIELD_MAPPINGS,3,fieldMappingPayload):this.trackingService.onUpdateEvent(enum_model.H1.ADVANCED_SETTINGS_QBD,{phase:this.getPhase(),oldState:this.fieldMapping,newState:response}),this.isOnboarding&&(this.workspaceService.setOnboardingState(enum_model.Hi.ADVANCED_SETTINGS),this.router.navigate(["/integrations/qbd/onboarding/advanced_settings"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving field mapping, please try again later")}))}save(){this.fieldMappingForm.valid&&this.constructPayloadAndSave()}getSettingsAndSetupForm(){this.isLoading=!0,this.isOnboarding=this.router.url.includes("onboarding"),this.fieldMappingService.getQbdFieldMapping().subscribe((fieldMappingResponse=>{this.fieldMapping=fieldMappingResponse,this.fieldMappingForm=this.formBuilder.group({classType:[this.fieldMapping?.class_type?this.fieldMapping?.class_type:null],customerType:[this.fieldMapping?.project_type?this.fieldMapping?.project_type:null]}),this.isLoading=!1}),(()=>{this.fieldMappingForm=this.formBuilder.group({classType:[null],customerType:[null]}),this.isLoading=!1}))}ngOnInit(){this.getSettingsAndSetupForm()}};FieldMappingComponent.ctorParameters=()=>[{type:router.F0},{type:fesm2020_forms.qu},{type:QbdFieldMappingService},{type:QbdWorkspaceService},{type:integrations_toast_service.d},{type:tracking_service.e}],FieldMappingComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-field-mapping",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n        <app-configuration-step-header \n        [headerText]="\'Field Mapping\'"\n        [contentText]="\'In this section, choose appropriate representation of your Customers & Classes on \' + brandingConfig.brandName + \'.\'"\n        [redirectLink]="redirectLink"></app-configuration-step-header>\n    </div>\n    <div>\n        <form [formGroup]="fieldMappingForm">\n            <div class="tw-p-24-px">\n                <div class="tw-mb-16-px">\n                    <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="fieldMappingForm"\n                        [label]="\'How to map CUSTOMER: JOB in QuickBooks Desktop to \' + brandingConfig.brandName + \'\'"\n                        [subLabel]="\'Select the field in \' + brandingConfig.brandName + \' that needs to be mapped to the \\\'Customers\\\' field in QuickBooks Desktops\'"\n                        [options]="mappingFieldFormOptionsFunction(\'classType\')"\n                        [iconPath]="\'people\'"\n                        [placeholder]="\'Select representation\'"\n                        [formControllerName]="\'customerType\'"></app-configuration-select-field>\n                    </div>\n                    <div class="tw-mt-12-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="fieldMappingForm"\n                        [label]="\'How to map CLASS in QuickBooks Desktop to \' + brandingConfig.brandName + \'\'"\n                        [subLabel]="\'Select the field in \' + brandingConfig.brandName + \' that needs to be mapped to the \\\'Class\\\' field in QuickBooks Desktops\'"\n                        [options]="mappingFieldFormOptionsFunction(\'customerType\')"\n                        [iconPath]="\'expense\'"\n                        [placeholder]="\'Select representation\'"\n                        [formControllerName]="\'classType\'"></app-configuration-select-field>\n                    </div>\n                </div> \n            </div>\n            <div>\n                <app-configuration-step-footer [ctaText]="!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" [isButtonDisabled]="!fieldMappingForm.valid || saveInProgress" (save)="save()"></app-configuration-step-footer>\n            </div>\n        </form>\n    </div>\n</div>\n',styles:[""]})],FieldMappingComponent);var configuration_toggle_field_component=__webpack_require__("./src/app/shared/components/configuration/configuration-toggle-field/configuration-toggle-field.component.ts"),configuration_select_field_component=__webpack_require__("./src/app/shared/components/configuration/configuration-select-field/configuration-select-field.component.ts"),configuration_radio_field_component=__webpack_require__("./src/app/shared/components/qbd/configuration/configuration-radio-field/configuration-radio-field.component.ts"),configuration_step_footer_component=__webpack_require__("./src/app/shared/components/configuration/configuration-step-footer/configuration-step-footer.component.ts"),configuration_step_header_component=__webpack_require__("./src/app/shared/components/configuration/configuration-step-header/configuration-step-header.component.ts"),email_multi_select_field_component=__webpack_require__("./src/app/shared/components/configuration/email-multi-select-field/email-multi-select-field.component.ts"),configuration_multi_select_component=__webpack_require__("./src/app/shared/components/configuration/configuration-multi-select/configuration-multi-select.component.ts"),configuration_label_component=__webpack_require__("./src/app/shared/components/qbd/configuration/configuration-label/configuration-label.component.ts"),primeng_calendar=__webpack_require__("./node_modules/primeng/fesm2020/primeng-calendar.mjs"),app_landing_page_body_component=__webpack_require__("./src/app/shared/components/helper/app-landing-page-body/app-landing-page-body.component.ts");let MappingTableComponent=class MappingTableComponent{constructor(){this.postMapping=new core.EventEmitter,this.allOS=enum_model.U5,this.fieldType=enum_model.fS}onTextBoxChange(event){const targetValue=event.target.value;this.destinationValue=targetValue}isTypingInBox(event,row){13===event.keyCode?(this.focussedMappingId=0,this.postTextFieldValue(row)):this.focussedMappingId=row.id}postTextFieldValue(data){data.destination_value=this.destinationValue.length>0?this.destinationValue:null;const mappingPayload=class MappingModel{static constructPayload(mapping){return{attribute_type:mapping.attribute_type,source_value:mapping.source_value,source_id:mapping.source_id.toString(),destination_value:mapping.destination_value}}}.constructPayload(data);this.postMapping.emit(mappingPayload),this.focussedMappingId=0}getToolTipText(){return`\n            <div style="padding:0px 6px 4px;text-align: center;>\n              <p style="font-size:12px;padding-top:0">Save</p>\n              <p style="margin-top:5px;padding:4px;background: #A9ACBC80;font-size:10px;border-radius: 4px;">${this.operatingSystem===enum_model.U5.MAC?"return":"⏎"}<p>\n            </div>`}ngOnInit(){}};MappingTableComponent.ctorParameters=()=>[],MappingTableComponent.propDecorators={mappings:[{type:core.Input}],destinationFieldType:[{type:core.Input}],fyleHeaderName:[{type:core.Input}],destinationHeaderName:[{type:core.Input}],operatingSystem:[{type:core.Input}],postMapping:[{type:core.Output}]},MappingTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-mapping-table",template:'<div class="tw-border-t-1-px tw-border-t-separator">\n    <p-table [value]="mappings" [tableStyle]="{ \'min-width\': \'50rem\' }" [sortField]="\'source_value\'" [sortOrder]="1">\n        <ng-template pTemplate="header">\n            <tr>\n                <th class="tw-flex tw-justify-start tw-items-center">{{ fyleHeaderName }} <i class="tw-ml-6-px pi pi-sort-amount-down"></i></th>\n                <th>{{ destinationHeaderName }}</th>\n                <th>Status</th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate="body" let-mapping let-rowIndex="rowIndex">\n            <tr>\n                <td>{{ mapping.source_value }}</td>\n                <td>\n                    <span class="p-input-icon-right" (keydown)="isTypingInBox($event, mapping)" *ngIf="destinationFieldType === fieldType.TEXT">\n                        <i *ngIf="focussedMappingId === mapping.id" class="pi pi-check tooltip" (click)="postTextFieldValue(mapping)" [pTooltip]="getToolTipText()" [escape]="false"  tooltipPosition="top"></i>\n                        <input type="text" pInputText placeholder="Enter Credit card account" [value]="mapping.destination_value" (input)="onTextBoxChange($event)">        \n                    </span>  \n                </td>\n                <td>\n                    <p *ngIf="mapping.destination_value" class="mapped">MAPPED</p>\n                    <p *ngIf="!mapping.destination_value" class="unmapped">UNMAPPED</p>\n                </td>\n            </tr>\n        </ng-template>\n    </p-table>\n</div>\n',styles:["th {\n\n    border-right-width: 1px !important;\n\n    border-color: var(--box-color) !important;\n\n    background-color: var(--disabled-bg-color) !important;\n\n    padding-top: 12px !important;\n\n    padding-bottom: 12px !important;\n\n    padding-left: 24px !important;\n\n    padding-right: 24px !important;\n\n    font-size: 12px !important;\n\n    font-weight: 500 !important;\n\n    color: var(--normal-text-color) !important\n}\n\ntd {\n\n    padding-left: 24px !important;\n\n    padding-right: 24px !important;\n\n    font-size: 14px !important;\n\n    font-weight: 400 !important;\n\n    color: var(--sub-text-color) !important\n}\n\n.pi-check:before {\n\n    cursor: pointer !important;\n\n    font-size: 14px !important;\n\n    color: var(--faded-text-color) !important\n}\n\n.p-inputtext {\n\n    height: 40px !important;\n\n    width: 220px !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}\n\n:host ::ng-deep .tooltip-main {\n\n    padding-left: 1.5rem !important;\n\n    padding-right: 1.5rem !important;\n\n    padding-bottom: 1rem !important;\n\n    text-align: center !important\n}\n\n:host ::ng-deep .tooltip-save {\n\n    font-size: 12px !important\n}\n\n:host ::ng-deep .tooltip-return {\n\n    margin-top: 6px !important;\n\n    border-radius: 0.375rem !important;\n\n    background-color: var(--placeholder) !important;\n\n    padding-left: 4px !important;\n\n    padding-right: 4px !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    font-size: 9px !important\n}"]})],MappingTableComponent);var mapping_filter_component=__webpack_require__("./src/app/shared/components/helper/mapping/mapping-filter/mapping-filter.component.ts");let MappingHeaderSectionComponent=class MappingHeaderSectionComponent{constructor(){}ngOnInit(){}};MappingHeaderSectionComponent.ctorParameters=()=>[],MappingHeaderSectionComponent.propDecorators={sourceType:[{type:core.Input}],mappingStats:[{type:core.Input}]},MappingHeaderSectionComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-mapping-header-section",template:'<div class="tw-inline-flex tw-space-x-4">\n    <div class="tw-rounded-10-px tw-bg-white tw-border-1-px tw-border-separator tw-p-16-px tw-w-200-px tw-h-84-px">\n        <div class="tw-w-36-px tw-h-6-px tw-rounded-12-px tw-border tw-border-white tw-bg-pink-box-border">\n        </div>\n        <div class="tw-pt-8-px tw-text-faded-text-color tw-text-12-px tw-text-400">\n            <p>Total {{sourceType | titlecase | snakeCaseToSpaceCase}}</p>\n        </div>\n        <div class="tw-text-20-px tw-text-500 tw-text-slightly-normal-text-color">\n            <p>{{mappingStats.all_attributes_count}}</p>\n        </div>\n    </div>\n\n    <div class="tw-rounded-12-px tw-bg-white tw-border-1-px tw-border-separator tw-p-16-px tw-w-200-px tw-h-84-px">\n        <div class="tw-w-36-px tw-h-6-px tw-rounded-12-px tw-border tw-border-white tw-bg-pink-box-border">\n        </div>\n        <div class="tw-pt-8-px tw-text-faded-text-color tw-text-12-px tw-text-400">\n            <p>Unmapped {{sourceType | titlecase | snakeCaseToSpaceCase}}</p>\n        </div>\n        <div class="tw-text-20-px tw-text-500 tw-text-slightly-normal-text-color">\n            <p>{{mappingStats.unmapped_attributes_count}}</p>\n        </div>\n    </div>\n</div>\n',styles:[".tw-bg-mandatory-field-color {\n  background-color: rgba(255, 51, 102, 0.16);\n}"]})],MappingHeaderSectionComponent);var primeng_table=__webpack_require__("./node_modules/primeng/fesm2020/primeng-table.mjs");var Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),debounceTime=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"),filter=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js"),forkJoin=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js");class export_settings_model_ExportSettingModel{static getExportGroup(exportGroups){if(exportGroups){const exportGroup=exportGroups.find((exportGroup=>exportGroup===enum_model.Af.EXPENSE_ID||exportGroup===enum_model.Af.CLAIM_NUMBER||exportGroup===enum_model.Af.SETTLEMENT_ID));return exportGroup||enum_model.Af.CLAIM_NUMBER}return""}static formatGeneralMappingPayload(destinationAttribute){return{name:destinationAttribute.value,id:destinationAttribute.destination_id}}}const si_api_service_API_BASE_URL=environment.N.si_api_url,si_api_service_httpOptions={headers:new http.WM({"Content-Type":"application/json"}),body:{}};let SiApiService=class SiApiService{constructor(http){this.http=http}handleError(error,httpMethod){return error.error instanceof ErrorEvent?console.error("An error occurred:",error.error.message):(error.status>=500&&"GET"===httpMethod||error.status>=400&&"POST"===httpMethod)&&console.error(`Backend returned code ${error.status}, body was: ${JSON.stringify(error.error)}`),(0,throwError._)(error)}post(endpoint,body){return this.http.post(si_api_service_API_BASE_URL+endpoint,body,si_api_service_httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"POST"))))}put(endpoint,body){return this.http.put(si_api_service_API_BASE_URL+endpoint,body,si_api_service_httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"PUT"))))}patch(endpoint,body){return this.http.patch(si_api_service_API_BASE_URL+endpoint,body,si_api_service_httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"PATCH"))))}get(endpoint,apiParams){let params=new http.LE;return Object.keys(apiParams).forEach((key=>{params=params.set(key,apiParams[key])})),this.http.get(si_api_service_API_BASE_URL+endpoint,{params}).pipe((0,catchError.K)((error=>this.handleError(error,"GET"))))}delete(endpoint,body){return si_api_service_httpOptions.body=body,this.http.delete(si_api_service_API_BASE_URL+endpoint,si_api_service_httpOptions).pipe((0,catchError.K)((error=>this.handleError(error,"DELETE"))))}};SiApiService.ctorParameters=()=>[{type:http.eN}],SiApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiApiService);let SiWorkspaceService=class SiWorkspaceService{constructor(storageService,apiService){this.storageService=storageService,this.apiService=apiService}syncFyleDimensions(){return this.apiService.post(`/workspaces/${this.getWorkspaceId()}/fyle/sync_dimensions/`,{})}syncIntacctDimensions(){return this.apiService.post(`/workspaces/${this.getWorkspaceId()}/sage_intacct/sync_dimensions/`,{})}getWorkspace(orgId){return this.apiService.get("/workspaces/",{org_id:orgId})}postWorkspace(){return this.apiService.post("/workspaces/",{})}getWorkspaceId(){return this.storageService.get("si.workspaceId")}setIntacctOnboardingState(onboardingState){return this.storageService.set("si.onboardingState",onboardingState)}getIntacctOnboardingState(){const onboardingState=this.storageService.get("si.onboardingState");return onboardingState||enum_model.kG.CONNECTION}getConfiguration(){return this.apiService.get(`/workspaces/${this.getWorkspaceId()}/configuration/`,{})}};SiWorkspaceService.ctorParameters=()=>[{type:storage_service.V},{type:SiApiService}],(0,tslib_es6.gn)([(0,cacheable_decorator.q)()],SiWorkspaceService.prototype,"syncFyleDimensions",null),(0,tslib_es6.gn)([(0,cacheable_decorator.q)()],SiWorkspaceService.prototype,"syncIntacctDimensions",null),(0,tslib_es6.gn)([(0,cacheable_decorator.q)()],SiWorkspaceService.prototype,"getWorkspace",null),SiWorkspaceService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiWorkspaceService);let SiExportSettingService=class SiExportSettingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}getExportSettings(){return this.apiService.get(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/export_settings/`,{})}postExportSettings(exportSettingsPayload){return this.apiService.put(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/export_settings/`,exportSettingsPayload)}};SiExportSettingService.ctorParameters=()=>[{type:SiApiService},{type:SiWorkspaceService}],SiExportSettingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiExportSettingService);var from=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js");let SiMappingsService=class SiMappingsService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}refreshSageIntacctDimensions(dimensionsToSync=[]){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.post(`/workspaces/${workspaceId}/sage_intacct/refresh_dimensions/`,{dimensions_to_sync:dimensionsToSync})}refreshFyleDimensions(){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.post(`/workspaces/${workspaceId}/fyle/refresh_dimensions/`,{})}getMappingStats(sourceType,destinationType){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/mappings/stats/`,{source_type:sourceType,destination_type:destinationType,app_name:"INTACCT"})}getConfiguration(){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/configuration/`,{})}getSageIntacctFields(){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/sage_intacct/sage_intacct_fields/`,{})}getFyleFields(){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/fyle/fyle_fields/`,{})}getFyleExpenseAttributes(attributeType,active){const workspaceId=this.workspaceService.getWorkspaceId(),params={attribute_type:attributeType};return active&&(params.active=active),this.apiService.get(`/workspaces/${workspaceId}/fyle/expense_attributes/`,params)}getPaginatedDestinationAttributes(attributeType,value){const workspaceId=this.workspaceService.getWorkspaceId(),params={limit:100,offset:0,attribute_type:attributeType};return value&&(params.value=value),this.apiService.get(`/workspaces/${workspaceId}/sage_intacct/paginated_destination_attributes/`,params)}getSageIntacctDestinationAttributes(attributeTypes,accountType,active){const workspaceId=this.workspaceService.getWorkspaceId(),params={attribute_types:attributeTypes};return accountType&&(params.account_type=accountType),active&&(params.active=active),this.apiService.get(`/workspaces/${workspaceId}/sage_intacct/destination_attributes/`,params)}getGroupedDestinationAttributes(attributeTypes){return(0,from.D)(this.getSageIntacctDestinationAttributes(attributeTypes).toPromise().then((response=>response?.reduce(((groupedAttributes,attribute)=>{const group=groupedAttributes[attribute.attribute_type]||[];return group.push(attribute),groupedAttributes[attribute.attribute_type]=group,groupedAttributes}),{ACCOUNT:[],EXPENSE_TYPE:[],EXPENSE_PAYMENT_TYPE:[],VENDOR:[],EMPLOYEE:[],CHARGE_CARD_NUMBER:[],TAX_DETAIL:[]}))))}getCategoryMappings(pageLimit,pageOffset,sourceType,mappingState,alphabetsFilter){const workspaceId=this.workspaceService.getWorkspaceId(),isMapped="UNMAPPED"!==mappingState,params={limit:pageLimit,offset:pageOffset,mapped:mappingState===enum_model.tE.ALL?enum_model.tE.ALL:isMapped,destination_type:sourceType};return alphabetsFilter&&"All"!==alphabetsFilter&&(params.mapping_source_alphabets=alphabetsFilter),this.apiService.get(`/workspaces/${workspaceId}/mappings/category_attributes/`,params)}postCategoryMappings(mapping){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.post(`/workspaces/${workspaceId}/mappings/category/`,mapping)}getEmployeeMappings(pageLimit,pageOffset,sourceType,mappingState,alphabetsFilter){const workspaceId=this.workspaceService.getWorkspaceId(),isMapped="UNMAPPED"!==mappingState,params={limit:pageLimit,offset:pageOffset,mapped:mappingState===enum_model.tE.ALL?enum_model.tE.ALL:isMapped,destination_type:sourceType};return alphabetsFilter&&"All"!==alphabetsFilter&&(params.mapping_source_alphabets=alphabetsFilter),this.apiService.get(`/workspaces/${workspaceId}/mappings/employee_attributes/`,params)}postEmployeeMappings(employeeMapping){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/employee/`,employeeMapping)}getMappingSettings(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/settings/`,{})}postMappingSettings(mappingSettings){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/settings/`,mappingSettings)}triggerAutoMapEmployees(){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/auto_map_employees/trigger/`,{})}getMappings(mappingState,limit,offset,sourceType,destinationType,alphabetsFilter){const isMapped="UNMAPPED"!==mappingState,params={limit,offset,mapped:mappingState===enum_model.tE.ALL?enum_model.tE.ALL:isMapped,source_type:sourceType.toUpperCase(),destination_type:destinationType};return alphabetsFilter&&"All"!==alphabetsFilter&&(params.mapping_source_alphabets=alphabetsFilter),this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/expense_attributes/`,params)}postMapping(mapping){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/mappings/`,mapping)}};SiMappingsService.ctorParameters=()=>[{type:SiApiService},{type:SiWorkspaceService}],SiMappingsService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiMappingsService);let ConfigurationExportSettingsComponent=class ConfigurationExportSettingsComponent{constructor(router,exportSettingService,formBuilder,toastService,trackingService,workspaceService,mappingService,sanitizer){this.router=router,this.exportSettingService=exportSettingService,this.formBuilder=formBuilder,this.toastService=toastService,this.trackingService=trackingService,this.workspaceService=workspaceService,this.mappingService=mappingService,this.sanitizer=sanitizer,this.isLoading=!0,this.isDialogClicked=!0,this.redirectLink=branding_config.K9.onboardingArticles.INTACCT.EXPORT_SETTING,this.saveInProgress=!1,this.ConfigurationCtaText=enum_model.Pw,this.IntacctReimbursableExpensesObject=enum_model.Q3,this.CorporateCreditCardExpensesObject=enum_model.QI,this.is_simplify_report_closure_enabled=!0,this.destinationOptions={[enum_model.u7.ACCOUNT]:[],[enum_model.u7.EXPENSE_PAYMENT_TYPE]:[],[enum_model.u7.CCC_EXPENSE_PAYMENT_TYPE]:[],[enum_model.u7.VENDOR]:[],[enum_model.u7.CHARGE_CARD]:[]},this.IntacctExportSettingDestinationOptionKey=enum_model.u7,this.appName=enum_model.lW.INTACCT,this.sessionStartTime=new Date,this.previewImagePaths=[{EXPENSE_REPORT:"assets/illustrations/sageIntacct/Reimbursable - Expense Report.jpg",BILL:"assets/illustrations/sageIntacct/Reimbursable Bill.jpg",JOURNAL_ENTRY:"assets/illustrations/sageIntacct/Reimbursable Journal Entry.jpg"},{EXPENSE_REPORT:"assets/illustrations/sageIntacct/CCC Expense Report.jpg",BILL:"assets/illustrations/sageIntacct/CCC Bill.jpg",JOURNAL_ENTRY:"assets/illustrations/sageIntacct/CCC Journal Entry.jpg",CHARGE_CARD_TRANSACTION:"assets/illustrations/sageIntacct/CCC Credit Card Purchase.jpg"}],this.expenseGroupingFieldOptions=[{label:"Expense",value:enum_model.Af.EXPENSE_ID},{label:"Report",value:enum_model.Af.CLAIM_NUMBER}],this.reimbursableExpenseGroupingDateOptions=[{label:"Spend Date",value:enum_model.AH.SPENT_AT},{label:"Current Date",value:enum_model.AH.CURRENT_DATE},{label:"Verification Date",value:enum_model.AH.VERIFIED_DATE},{label:"Approval Date",value:enum_model.AH.APPROVAL_DATE},{label:"Last Spend Date",value:enum_model.AH.LAST_SPENT_AT}],this.creditCardExportTypes=[{label:"Bill",value:enum_model.Q3.BILL},{label:"Expense Report",value:enum_model.Q3.EXPENSE_REPORT},{label:"Journal Entry",value:enum_model.QI.JOURNAL_ENTRY},{label:"Charge Card Transaction",value:enum_model.QI.CHARGE_CARD_TRANSACTION}],this.autoMapEmployeeOptions=[{label:"Based on Employee E-mail ID",value:"EMAIL"},{label:"Based on Employee Name",value:"NAME"},{label:"Based on Employee Code",value:"EMPLOYEE_CODE"}],this.reimbursableExportTypes=[{label:"Expense Report",value:enum_model.Q3.EXPENSE_REPORT},{label:"Bill",value:enum_model.Q3.BILL},{label:"Journal Entry",value:enum_model.Q3.JOURNAL_ENTRY}],this.employeeFieldOptions=[{label:"Employee",value:enum_model.qZ.EMPLOYEE},{label:"Vendor",value:enum_model.qZ.VENDOR}],this.optionSearchUpdate=new Subject.x,this.brandingFeatureConfig=branding_config.Rj,this.brandingConfig=branding_config.Wg}refreshDimensions(isRefresh){this.mappingService.refreshSageIntacctDimensions().subscribe(),this.mappingService.refreshFyleDimensions().subscribe(),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Refreshing data dimensions from Sage Intacct")}getEmployeeFieldMapping(employeeFieldMapping,reimbursableExportType){let employeeFieldMappingLabel="";return employeeFieldMappingLabel=employeeFieldMapping||(reimbursableExportType===enum_model.Q3.JOURNAL_ENTRY?this.exportSettingsForm.controls.employeeFieldMapping.value:reimbursableExportType===enum_model.Q3.EXPENSE_REPORT?enum_model.qZ.EMPLOYEE:enum_model.qZ.VENDOR),(new common.TitleCasePipe).transform(employeeFieldMappingLabel)}getExportType(exportType){if(exportType){const lowerCaseWord=exportType.toLowerCase();return lowerCaseWord.charAt(0).toUpperCase()+lowerCaseWord.slice(1)}return"export"}setUpExpenseStates(){this.cccExpenseStateOptions=[{label:this.is_simplify_report_closure_enabled?"Approved":"Payment Processing",value:this.is_simplify_report_closure_enabled?enum_model.el.APPROVED:enum_model.el.PAYMENT_PROCESSING},{label:this.is_simplify_report_closure_enabled?"Closed":"Paid",value:enum_model.el.PAID}],this.expenseStateOptions=[{label:this.is_simplify_report_closure_enabled?"Processing":"Payment Processing",value:enum_model.z9.PAYMENT_PROCESSING},{label:this.is_simplify_report_closure_enabled?"Closed":"Paid",value:enum_model.z9.PAID}]}setCCExpenseDateOptions(cccExportType){cccExportType===enum_model.QI.CHARGE_CARD_TRANSACTION?(this.cccExpenseGroupingDateOptions=[{label:"Card Transaction Post date",value:enum_model.AH.POSTED_AT},{label:"Spend Date",value:enum_model.AH.SPENT_AT}],this.exportSettingsForm?.controls.cccExportDate.patchValue(enum_model.AH.SPENT_AT)):this.cccExpenseGroupingDateOptions=this.reimbursableExpenseGroupingDateOptions}reimbursableExportTypeWatcher(){this.exportSettingsForm.controls.reimbursableExportType.valueChanges.subscribe((isreimbursableExportTypeSelected=>{isreimbursableExportTypeSelected===enum_model.Q3.JOURNAL_ENTRY?(this.exportSettingsForm.controls.glAccount.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.employeeFieldMapping.enable()):(this.exportSettingsForm.controls.glAccount.setValue(null),this.exportSettingsForm.controls.glAccount.clearValidators()),isreimbursableExportTypeSelected===enum_model.Q3.EXPENSE_REPORT?(this.exportSettingsForm.controls.employeeFieldMapping.patchValue(enum_model.qZ.EMPLOYEE),this.exportSettingsForm.controls.employeeFieldMapping.disable()):this.exportSettingsForm.controls.reimbursableExpensePaymentType.setValue(null),isreimbursableExportTypeSelected===enum_model.Q3.BILL&&(this.exportSettingsForm.controls.employeeFieldMapping.patchValue(enum_model.qZ.VENDOR),this.exportSettingsForm.controls.employeeFieldMapping.disable())}))}createReimbursableExpenseWatcher(){this.exportSettingsForm.controls.reimbursableExpense.valueChanges.subscribe((isReimbursableExpenseSelected=>{isReimbursableExpenseSelected?(this.exportSettingsForm.controls.reimbursableExportType.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExportGroup.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExportDate.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.reimbursableExpenseState.setValidators(fesm2020_forms.kI.required)):(this.exportSettingsForm.controls.reimbursableExportType.clearValidators(),this.exportSettingsForm.controls.reimbursableExportGroup.clearValidators(),this.exportSettingsForm.controls.reimbursableExportDate.clearValidators(),this.exportSettingsForm.controls.reimbursableExpenseState.clearValidators(),this.exportSettingsForm.controls.reimbursableExportType.setValue(null))})),this.reimbursableExportTypeWatcher()}cccExportTypeWatcher(){this.exportSettingsForm.controls.cccExportType.valueChanges.subscribe((isCCCExportTypeSelected=>{this.setCCExpenseDateOptions(isCCCExportTypeSelected),isCCCExportTypeSelected===enum_model.QI.JOURNAL_ENTRY?(this.exportSettingsForm.controls.creditCard.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.employeeFieldMapping.enable()):(this.exportSettingsForm.controls.creditCard.clearValidators(),this.exportSettingsForm.controls.creditCard.setValue(null)),isCCCExportTypeSelected===enum_model.QI.BILL?this.exportSettingsForm.controls.creditCardVendor.setValidators(fesm2020_forms.kI.required):(this.exportSettingsForm.controls.creditCardVendor.clearValidators(),this.exportSettingsForm.controls.creditCardVendor.setValue(null)),isCCCExportTypeSelected===enum_model.QI.EXPENSE_REPORT?this.exportSettingsForm.controls.cccExpensePaymentType.setValidators(fesm2020_forms.kI.required):(this.exportSettingsForm.controls.cccExpensePaymentType.clearValidators(),this.exportSettingsForm.controls.cccExpensePaymentType.setValue(null)),isCCCExportTypeSelected===enum_model.QI.CHARGE_CARD_TRANSACTION?this.exportSettingsForm.controls.chargeCard.setValidators(fesm2020_forms.kI.required):(this.exportSettingsForm.controls.chargeCard.clearValidators(),this.exportSettingsForm.controls.chargeCard.setValue(null))}))}createCreditCardExpenseWatcher(){this.exportSettingsForm.controls.creditCardExpense.valueChanges.subscribe((isCreditCardExpenseSelected=>{isCreditCardExpenseSelected?(this.exportSettingsForm.controls.cccExportType.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExportGroup.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExportDate.setValidators(fesm2020_forms.kI.required),this.exportSettingsForm.controls.cccExpenseState.setValidators(fesm2020_forms.kI.required)):(this.exportSettingsForm.controls.cccExportType.clearValidators(),this.exportSettingsForm.controls.cccExportGroup.clearValidators(),this.exportSettingsForm.controls.cccExportDate.clearValidators(),this.exportSettingsForm.controls.cccExpenseState.clearValidators(),this.exportSettingsForm.controls.cccExportType.setValue(null))})),this.cccExportTypeWatcher()}cccWatcher(){const cccExportGroup=this.exportSettingsForm.get("cccExportGroup");this.exportSettingsForm.controls.cccExportType.valueChanges.subscribe((cccExport=>{cccExport===enum_model.QI.CHARGE_CARD_TRANSACTION?(cccExportGroup?.disable(),cccExportGroup?.setValue("Expense")):cccExportGroup?.enable()}))}exportFieldsWatcher(){this.exportSettings?.configurations?.reimbursable_expenses_object===enum_model.Q3.JOURNAL_ENTRY||this.exportSettings?.configurations?.corporate_credit_card_expenses_object===enum_model.QI.JOURNAL_ENTRY?this.exportSettingsForm.get("employeeFieldMapping")?.enable():this.exportSettingsForm.get("employeeFieldMapping")?.disable(),this.exportSettings?.configurations?.corporate_credit_card_expenses_object===enum_model.QI.CHARGE_CARD_TRANSACTION&&(this.exportSettingsForm.controls.cccExportGroup.setValue("Expense"),this.exportSettingsForm.controls.cccExportGroup.disable()),this.createReimbursableExpenseWatcher(),this.createCreditCardExpenseWatcher(),this.cccWatcher()}setupCCCExpenseGroupingDateOptions(){if(this.exportSettings?.configurations?.corporate_credit_card_expenses_object){this.exportSettings?.expense_group_settings?.corporate_credit_card_expense_group_fields?this.exportSettings?.expense_group_settings.corporate_credit_card_expense_group_fields:enum_model.$K.EXPENSE;this.setCCExpenseDateOptions(this.exportSettings?.configurations?.corporate_credit_card_expenses_object)}else this.setCCExpenseDateOptions(enum_model.QI.CHARGE_CARD_TRANSACTION)}exportSelectionValidator(){return control=>{let forbidden=!0;return this.exportSettingsForm&&("boolean"==typeof control.value?(control.value||control.parent?.get("reimbursableExpense")?.value||control.parent?.get("creditCardExpense")?.value)&&(forbidden=!1):control.value!==enum_model.z9.PAID&&control.value!==enum_model.z9.PAYMENT_PROCESSING||!control.parent?.get("reimbursableExpense")?.value&&!control.parent?.get("creditCardExpense")?.value||(forbidden=!1),!forbidden)?(control.parent?.get("reimbursableExpense")?.setErrors(null),control.parent?.get("creditCardExpense")?.setErrors(null),null):{forbiddenOption:{value:control.value}}}}initializeExportSettingsFormWithData(){const configurations=this.exportSettings?.configurations,generalMappings=this.exportSettings?.general_mappings,findObjectById=(array,id)=>array?.find((item=>item.destination_id===id))||null;this.exportSettingsForm=this.formBuilder.group({reimbursableExpense:[Boolean(configurations?.reimbursable_expenses_object)||null,this.exportSelectionValidator()],reimbursableExportType:[configurations?.reimbursable_expenses_object||null],reimbursableExpensePaymentType:[findObjectById(this.destinationOptions.EXPENSE_PAYMENT_TYPE,generalMappings?.default_reimbursable_expense_payment_type.id)],reimbursableExportGroup:[export_settings_model_ExportSettingModel.getExportGroup(this.exportSettings?.expense_group_settings.reimbursable_expense_group_fields)||null],reimbursableExportDate:[this.exportSettings?.expense_group_settings.reimbursable_export_date_type||null],reimbursableExpenseState:[this.exportSettings?.expense_group_settings.expense_state||null],employeeFieldMapping:[configurations?.employee_field_mapping||null,fesm2020_forms.kI.required],autoMapEmployees:[configurations?.auto_map_employees||null],glAccount:[findObjectById(this.destinationOptions.ACCOUNT,generalMappings?.default_gl_account.id)],creditCardExpense:[Boolean(configurations?.corporate_credit_card_expenses_object),this.exportSelectionValidator()],cccExportType:[configurations?.corporate_credit_card_expenses_object||null],cccExportGroup:[export_settings_model_ExportSettingModel.getExportGroup(this.exportSettings?.expense_group_settings.corporate_credit_card_expense_group_fields)],cccExportDate:[this.exportSettings?.expense_group_settings.ccc_export_date_type||null],cccExpenseState:[this.exportSettings?.expense_group_settings.ccc_expense_state||null],cccExpensePaymentType:[findObjectById(this.destinationOptions.CCC_EXPENSE_PAYMENT_TYPE,generalMappings?.default_ccc_expense_payment_type.id)],creditCardVendor:[findObjectById(this.destinationOptions.VENDOR,generalMappings?.default_ccc_vendor.id)],creditCard:[findObjectById(this.destinationOptions.ACCOUNT,generalMappings?.default_credit_card.id)],chargeCard:[findObjectById(this.destinationOptions.CHARGE_CARD,generalMappings?.default_charge_card.id)]}),this.exportFieldsWatcher(),this.optionSearchWatcher()}addMissingOption(key,defaultDestinationAttribute){const optionArray=this.destinationOptions[key];if(!optionArray.find((attribute=>attribute.destination_id===defaultDestinationAttribute?.id))&&defaultDestinationAttribute?.id&&defaultDestinationAttribute?.name){const newOption={destination_id:defaultDestinationAttribute.id,value:defaultDestinationAttribute.name};optionArray.push(newOption),this.sortDropdownOptions(key)}}addMissingOptions(){this.addMissingOption(enum_model.u7.ACCOUNT,this.exportSettings.general_mappings?.default_gl_account),this.addMissingOption(enum_model.u7.ACCOUNT,this.exportSettings.general_mappings?.default_credit_card),this.addMissingOption(enum_model.u7.EXPENSE_PAYMENT_TYPE,this.exportSettings.general_mappings?.default_reimbursable_expense_payment_type),this.addMissingOption(enum_model.u7.CCC_EXPENSE_PAYMENT_TYPE,this.exportSettings.general_mappings?.default_ccc_expense_payment_type),this.addMissingOption(enum_model.u7.VENDOR,this.exportSettings.general_mappings?.default_ccc_vendor),this.addMissingOption(enum_model.u7.CHARGE_CARD,this.exportSettings.general_mappings?.default_credit_card)}getSettingsAndSetupForm(){this.isOnboarding=this.router.url.includes("onboarding"),this.exportSettingService.getExportSettings().subscribe((exportSettings=>{this.exportSettings=exportSettings,this.addMissingOptions(),this.setUpExpenseStates(),this.setupCCCExpenseGroupingDateOptions(),this.initializeExportSettingsFormWithData(),this.isLoading=!1}))}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}save(){this.saveInProgress=!0;const exportSettingPayload=class si_configuration_export_settings_model_ExportSettingModel{static constructPayload(exportSettingsForm){const getValueOrDefault=(control,defaultValue=null)=>control?.value?control.value:defaultValue,emptyDestinationAttribute={id:null,name:null},cccExportType=getValueOrDefault(exportSettingsForm.get("cccExportType"));let cccExportGroup=exportSettingsForm.get("cccExportGroup")?.value?[exportSettingsForm.value.cccExportGroup]:null;return cccExportType===enum_model.QI.CHARGE_CARD_TRANSACTION&&(cccExportGroup=[enum_model.Af.EXPENSE_ID]),{expense_group_settings:{expense_state:getValueOrDefault(exportSettingsForm.get("reimbursableExpenseState")),ccc_expense_state:getValueOrDefault(exportSettingsForm.get("cccExpenseState")),reimbursable_expense_group_fields:exportSettingsForm.get("reimbursableExportGroup")?.value?[exportSettingsForm.value.reimbursableExportGroup]:null,reimbursable_export_date_type:exportSettingsForm.get("reimbursableExportDate")?.value?exportSettingsForm.get("reimbursableExportDate")?.value:null,corporate_credit_card_expense_group_fields:cccExportGroup,ccc_export_date_type:"Spend Date"===getValueOrDefault(exportSettingsForm.get("cccExportDate"))?"spent_at":getValueOrDefault(exportSettingsForm.get("cccExportDate"))},configurations:{reimbursable_expenses_object:getValueOrDefault(exportSettingsForm.get("reimbursableExportType")),corporate_credit_card_expenses_object:cccExportType,employee_field_mapping:exportSettingsForm.get("employeeFieldMapping")?.value?exportSettingsForm.get("employeeFieldMapping")?.value.toUpperCase():null,auto_map_employees:getValueOrDefault(exportSettingsForm.get("autoMapEmployees"))},general_mappings:{default_gl_account:exportSettingsForm.get("glAccount")?.value?.value?{id:exportSettingsForm.get("glAccount")?.value.destination_id,name:exportSettingsForm.get("glAccount")?.value.value}:emptyDestinationAttribute,default_credit_card:exportSettingsForm.get("creditCard")?.value?.value?{id:exportSettingsForm.get("creditCard")?.value.destination_id,name:exportSettingsForm.get("creditCard")?.value.value}:emptyDestinationAttribute,default_charge_card:exportSettingsForm.get("chargeCard")?.value?.value?{id:exportSettingsForm.get("chargeCard")?.value.destination_id,name:exportSettingsForm.get("chargeCard")?.value.value}:emptyDestinationAttribute,default_ccc_expense_payment_type:exportSettingsForm.get("cccExpensePaymentType")?.value?.value?{id:exportSettingsForm.get("cccExpensePaymentType")?.value.destination_id,name:exportSettingsForm.get("cccExpensePaymentType")?.value.value}:emptyDestinationAttribute,default_reimbursable_expense_payment_type:exportSettingsForm.get("reimbursableExpensePaymentType")?.value?.value?{id:exportSettingsForm.get("reimbursableExpensePaymentType")?.value.destination_id,name:exportSettingsForm.get("reimbursableExpensePaymentType")?.value.value}:emptyDestinationAttribute,default_ccc_vendor:exportSettingsForm.get("creditCardVendor")?.value?.value?{id:exportSettingsForm.get("creditCardVendor")?.value.destination_id,name:exportSettingsForm.get("creditCardVendor")?.value.value}:emptyDestinationAttribute}}}}.constructPayload(this.exportSettingsForm);this.exportSettingService.postExportSettings(exportSettingPayload).subscribe((response=>{this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Export settings saved successfully"),this.trackingService.trackTimeSpent(enum_model.T3.EXPORT_SETTING_INTACCT,this.sessionStartTime),this.workspaceService.getIntacctOnboardingState()===enum_model.kG.EXPORT_SETTINGS?this.trackingService.integrationsOnboardingCompletion(enum_model.kG.EXPORT_SETTINGS,2,exportSettingPayload):this.trackingService.intacctUpdateEvent(enum_model.fd.IMPORT_SETTINGS_INTACCT,{phase:this.getPhase(),oldState:this.exportSettings,newState:response}),this.saveInProgress=!1,this.isOnboarding&&(this.workspaceService.setIntacctOnboardingState(enum_model.kG.IMPORT_SETTINGS),this.router.navigate(["/integrations/intacct/onboarding/import_settings"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving export settings, please try again later")}))}sortDropdownOptions(destinationOptionKey){this.destinationOptions[destinationOptionKey].sort(((a,b)=>a.value.localeCompare(b.value)))}optionSearchWatcher(){this.optionSearchUpdate.pipe((0,debounceTime.b)(1e3)).subscribe((event=>{const existingOptions=this.destinationOptions[event.destinationOptionKey].concat(),newOptions=[];this.mappingService.getPaginatedDestinationAttributes(existingOptions[0].attribute_type,event.searchTerm).subscribe((response=>{response.results.forEach((option=>{event.destinationOptionKey===enum_model.u7.EXPENSE_PAYMENT_TYPE?option.detail.is_reimbursable&&newOptions.push(option):event.destinationOptionKey===enum_model.u7.CCC_EXPENSE_PAYMENT_TYPE&&option.detail.is_reimbursable||newOptions.push(option)})),newOptions.forEach((option=>{existingOptions.find((existingOption=>existingOption.id===option.id))||existingOptions.push(option)})),this.destinationOptions[event.destinationOptionKey]=existingOptions.concat(),this.sortDropdownOptions(event.destinationOptionKey),this.isOptionSearchInProgress=!1}))}))}searchOptionsDropdown(event){event.searchTerm&&(this.isOptionSearchInProgress=!0,this.optionSearchUpdate.next(event))}setupPage(){const groupedAttributes$=[];["ACCOUNT","EXPENSE_PAYMENT_TYPE","VENDOR","CHARGE_CARD_NUMBER"].forEach((destinationAttribute=>{groupedAttributes$.push(this.mappingService.getPaginatedDestinationAttributes(destinationAttribute).pipe((0,filter.h)((response=>!!response))))})),(0,forkJoin.D)(groupedAttributes$).subscribe((response=>{this.destinationOptions.ACCOUNT=response[0].results,this.destinationOptions.EXPENSE_PAYMENT_TYPE=response[1].results.filter((attr=>attr.detail.is_reimbursable)),this.destinationOptions.CCC_EXPENSE_PAYMENT_TYPE=response[1].results.filter((attr=>!attr.detail.is_reimbursable)),this.destinationOptions.VENDOR=response[2].results,this.destinationOptions.CHARGE_CARD=response[3].results,this.getSettingsAndSetupForm()}))}ngOnInit(){this.setupPage()}};ConfigurationExportSettingsComponent.ctorParameters=()=>[{type:router.F0},{type:SiExportSettingService},{type:fesm2020_forms.qu},{type:integrations_toast_service.d},{type:tracking_service.e},{type:SiWorkspaceService},{type:SiMappingsService},{type:platform_browser.DomSanitizer}],ConfigurationExportSettingsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-export-settings",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n    <app-configuration-step-header \n    [headerText]="\'Export Settings\'"\n    [contentText]="\'In this section, you can configure how and when expenses from \' + brandingConfig.brandName + \' should be exported to Sage Intacct.\'"\n    [redirectLink]="redirectLink"\n    [showSyncButton]="isOnboarding"\n    [appName]="appName"\n    (refreshDimension)="refreshDimensions($event)"></app-configuration-step-header>\n    </div>\n    <form [formGroup]="exportSettingsForm">\n        <div class="tw-p-24-px">\n            <div class="tw-mb-16-px">\n                <div *ngIf="brandingFeatureConfig.reimbursableExpenses" class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg">\n                    <app-configuration-toggle-field \n                    [form]="exportSettingsForm"\n                    [label]="\'Export Reimbursable Expenses\'" \n                    [subLabel]="\'Enable this to export the reimbursable expenses from \' + brandingConfig.brandName + \'. If not enabled, any <b>out-of-pocket</b> expenses will not be exported to Sage Intacct .\'" \n                    [formControllerName]="\'reimbursableExpense\'"\n                    [isSectionHeader]="true"></app-configuration-toggle-field>\n                </div>\n                <div *ngIf="brandingFeatureConfig.reimbursableExpenses && exportSettingsForm.value?.reimbursableExpense">\n                    <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'export module\'"\n                            [label]="\'How should the expenses be exported?\'"\n                            [options]="reimbursableExportTypes"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select expense export module\'"\n                            [formControllerName]="\'reimbursableExportType\'"\n                            [appName]="appName"\n                            [exportConfigurationIconPath]="\'assets/flow-charts/intacct-export-module.svg\'"\n                            [exportTypeIconPathArray]="previewImagePaths">\n                        </app-configuration-select-field>\n                            <div *ngIf="exportSettingsForm.value.reimbursableExportType===IntacctReimbursableExpensesObject.JOURNAL_ENTRY">\n                                <app-configuration-select-field\n                                [form]="exportSettingsForm"\n                                [isFieldMandatory]="true"\n                                [mandatoryErrorListName]="\'GL Account\'"\n                                [label]="\'To which GL Account should the expenses be credited to?\'"\n                                [subLabel]="\'The integration will credit the account selected here for Reimbursable Expenses exported as Journal Entries.\'"\n                                [destinationAttributes]="this.destinationOptions[\'ACCOUNT\']"\n                                [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.ACCOUNT"\n                                [isOptionSearchInProgress]="isOptionSearchInProgress"\n                                [iconPath]="\'expense\'"\n                                [placeholder]="\'Select GL account\'"\n                                [formControllerName]="\'glAccount\'"\n                                (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                            </div>\n                            <div *ngIf="exportSettingsForm.value.reimbursableExportType===IntacctReimbursableExpensesObject.EXPENSE_REPORT">\n                                <app-configuration-select-field\n                                [form]="exportSettingsForm"\n                                [isFieldMandatory]="false"\n                                [mandatoryErrorListName]="\'expense payment type\'"\n                                [label]="\'Set the Default Expense Payment Type as?\'"\n                                [subLabel]="\'The selected Expense Payment Type will be added to the reimbursable expenses exported from \' + brandingConfig.brandName + \' to Sage Intacct.\'"\n                                [destinationAttributes]="this.destinationOptions[\'EXPENSE_PAYMENT_TYPE\']"\n                                [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.EXPENSE_PAYMENT_TYPE"\n                                [isOptionSearchInProgress]="isOptionSearchInProgress"\n                                [iconPath]="\'expense\'"\n                                [placeholder]="\'Select expense payment type\'"\n                                [formControllerName]="\'reimbursableExpensePaymentType\'"\n                                (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                            </div>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.reimbursableExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <ng-container *ngTemplateOutlet="employeeFieldMapping"></ng-container>\n                        <div *ngIf="exportSettingsForm.value.reimbursableExportType">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="false"\n                            [showClearIcon]="true"\n                            [mandatoryErrorListName]="\'employee mapping\'"\n                            [label]="\'How should Employees in \' + brandingConfig.brandName + \' be mapped to \' + getEmployeeFieldMapping(exportSettingsForm.value.employeeFieldMapping, exportSettingsForm.value.reimbursableExportType) + \' in Sage Intacct?\'"\n                            [subLabel]="\'Automatically map the employees in \' + brandingConfig.brandName + \' to their corresponding records in Sage Intacct based on a unique parameter.\'"\n                            [options]="autoMapEmployeeOptions"\n                            [iconPath]="\'questionmark\'"\n                            [placeholder]="\'Select mapping method\'"\n                            [formControllerName]="\'autoMapEmployees\'"></app-configuration-select-field>\n                        </div>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.reimbursableExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'expense state\'"\n                        [label]="\'At which state should the expenses be ready to export from \' + brandingConfig.brandName + \'?\'"\n                        [subLabel]="\'You can export expenses either when they are awaiting closure after approval (Processing) or when the payment has been settled (Closed).\'"\n                        [options]="expenseStateOptions"\n                        [iconPath]="\'questionmark\'"\n                        [placeholder]="\'Select export state\'"\n                        [formControllerName]="\'reimbursableExpenseState\'"></app-configuration-select-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.reimbursableExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'export date\'"\n                        [label]="\'Set the \' + getExportType(exportSettingsForm.value.reimbursableExportType ? exportSettingsForm.value.reimbursableExportType : IntacctReimbursableExpensesObject.EXPENSE_REPORT) + \' date as\'"\n                        [subLabel]="\'Expenses will be grouped and posted using the configured date when exporting from \' + brandingConfig.brandName + \' to Sage Intacct. Click here for more details.\'"\n                        [options]="reimbursableExpenseGroupingDateOptions"\n                        [iconPath]="\'calender\'"\n                        [placeholder]="\'Select date\'"\n                        [formControllerName]="\'reimbursableExportDate\'"></app-configuration-select-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.reimbursableExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'how expenses to be grouped\'"\n                        [label]="\'How should the expenses be grouped?\'"\n                        [subLabel]="\'Expenses can either be exported as single line items (Expense) or as a grouped report with multiple line items (Report)\'"\n                        [options]="expenseGroupingFieldOptions"\n                        [iconPath]="\'questionmark\'"\n                        [placeholder]="\'Select expense grouping\'"\n                        [formControllerName]="\'reimbursableExportGroup\'"></app-configuration-select-field>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class="tw-rounded-lg tw-border-separator tw-border tw-bg-configuration-bg">\n                    <app-configuration-toggle-field \n                    [form]="exportSettingsForm"\n                    [label]="\'Export Corporate Card Expenses\'" \n                    [subLabel]="\'Enable this to export Non-Reimbursable expenses from \' + brandingConfig.brandName + \'. If not enabled, any <b>Corporate Credit Card</b> expenses will not be exported to Sage Intacct.\'" \n                    [formControllerName]="\'creditCardExpense\'"\n                    [isSectionHeader]="true"></app-configuration-toggle-field>\n                </div>\n                <div *ngIf="exportSettingsForm.value?.creditCardExpense">\n                    <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'export module\'"\n                        [label]="\'How should the expenses be exported?\'"\n                        [options]="creditCardExportTypes"\n                        [iconPath]="\'expense\'"\n                        [placeholder]="\'Select expense export module\'"\n                        [formControllerName]="\'cccExportType\'"\n                        [exportConfigurationIconPath]="\'assets/illustrations/sageIntacct/cccExportTypeTable.svg\'"\n                        [exportTypeIconPathArray]="previewImagePaths"></app-configuration-select-field>\n                        <div *ngIf="exportSettingsForm.value.cccExportType===CorporateCreditCardExpensesObject.EXPENSE_REPORT">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'expense payment type\'"\n                            [label]="\'Set the Default Expense Payment Type as?\'"\n                            [subLabel]="\'The selected Expense Payment Type will be added to the Corporate credit card expenses exported from \' + brandingConfig.brandName + \' to Sage Intacct.\'"\n                            [destinationAttributes]="this.destinationOptions[\'CCC_EXPENSE_PAYMENT_TYPE\']"\n                            [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.CCC_EXPENSE_PAYMENT_TYPE"\n                            [isOptionSearchInProgress]="isOptionSearchInProgress"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select expense payment type\'"\n                            [formControllerName]="\'cccExpensePaymentType\'"\n                            (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                        </div>\n                        <div *ngIf="exportSettingsForm.value.cccExportType===CorporateCreditCardExpensesObject.BILL">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'credit card vendor\'"\n                            [label]="\'Set the Default Credit Card Vendor as\'"\n                            [subLabel]="\'The vendor configured here will be added to all the Credit Card expenses exported as Bills.\'"\n                            [destinationAttributes]="this.destinationOptions[\'VENDOR\']"\n                            [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.VENDOR"\n                            [isOptionSearchInProgress]="isOptionSearchInProgress"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select credit card vendor\'"\n                            [formControllerName]="\'creditCardVendor\'"\n                            (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                        </div>\n                        <div *ngIf="exportSettingsForm.value.cccExportType===CorporateCreditCardExpensesObject.JOURNAL_ENTRY">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'GL account\'"\n                            [label]="\'To which GL Account should the expenses be credited to?\'"\n                            [subLabel]="\'The integration will credit the account selected here for Corporate Credit Card Expenses exported as Journal Entries.\'"\n                            [destinationAttributes]="this.destinationOptions[\'ACCOUNT\']"\n                            [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.ACCOUNT"\n                            [isOptionSearchInProgress]="isOptionSearchInProgress"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select GL account\'"\n                            [formControllerName]="\'creditCard\'"\n                            (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                        </div>\n                        <div *ngIf="exportSettingsForm.value.cccExportType===CorporateCreditCardExpensesObject.CHARGE_CARD_TRANSACTION">\n                            <app-configuration-select-field\n                            [form]="exportSettingsForm"\n                            [isFieldMandatory]="true"\n                            [mandatoryErrorListName]="\'charge card\'"\n                            [label]="\'Set the Default Charge Card\'"\n                            [subLabel]="\'Expenses of Corporate Cards in \' + brandingConfig.brandName + \' that are not mapped to their respective cards in Sage Intacct will be posted to the Card configured here. You can map your cards in the Mapping section after configuring the integration.\'"\n                            [destinationAttributes]="this.destinationOptions[\'CHARGE_CARD\']"\n                            [destinationOptionKey]="IntacctExportSettingDestinationOptionKey.CHARGE_CARD"\n                            [isOptionSearchInProgress]="isOptionSearchInProgress"\n                            [iconPath]="\'expense\'"\n                            [placeholder]="\'Select Charge Corporate Card\'"\n                            [formControllerName]="\'chargeCard\'"\n                            (searchOptionsDropdown)="searchOptionsDropdown($event)"></app-configuration-select-field>\n                        </div>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.cccExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <div *ngIf="!exportSettingsForm.value.reimbursableExportType && exportSettingsForm.value.cccExportType === CorporateCreditCardExpensesObject.JOURNAL_ENTRY">\n                            <ng-container *ngTemplateOutlet="employeeFieldMapping"></ng-container>\n                        </div>\n                        <app-configuration-select-field *ngIf="exportSettingsForm.value.cccExportType"\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'expense state\'"\n                        [label]="\'At which state should the expenses be ready to export from \' + brandingConfig.brandName + \'?\'"\n                        [subLabel]="\'You can export expenses either when they are awaiting closure after approval (Approved) or when the transaction has been settled (Closed)\'"\n                        [options]="cccExpenseStateOptions"\n                        [iconPath]="\'questionmark\'"\n                        [placeholder]="\'Select export state\'"\n                        [formControllerName]="\'cccExpenseState\'"></app-configuration-select-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.cccExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'export date\'"\n                        [label]="\'Set the \' + getExportType(exportSettingsForm.value.cccExportType) + \' date as\'"\n                        [subLabel]="\'Expenses will be grouped and posted using the configured date when exporting from \' + brandingConfig.brandName + \' to Sage Intacct. Click here for more details.\'"\n                        [options]="cccExpenseGroupingDateOptions"\n                        [iconPath]="\'calender\'"\n                        [placeholder]="\'Select date\'"\n                        [formControllerName]="\'cccExportDate\'"></app-configuration-select-field>\n                    </div>\n                    <div *ngIf="exportSettingsForm.value.cccExportType" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                        <app-configuration-select-field *ngIf="exportSettingsForm.value.cccExportType!==CorporateCreditCardExpensesObject.CHARGE_CARD_TRANSACTION"\n                        [form]="exportSettingsForm"\n                        [isFieldMandatory]="true"\n                        [mandatoryErrorListName]="\'how expenses to be grouped\'"\n                        [label]="\'How should the expenses be grouped?\'"\n                        [subLabel]="\'Expenses can either be exported as single line items (Expense) or as a grouped report with multiple line items (Report)\'"\n                        [options]="expenseGroupingFieldOptions"\n                        [iconPath]="\'questionmark\'"\n                        [placeholder]="\'Select expense grouping\'"\n                        [formControllerName]="\'cccExportGroup\'"></app-configuration-select-field>\n                        <div *ngIf="exportSettingsForm.value.cccExportType===CorporateCreditCardExpensesObject.CHARGE_CARD_TRANSACTION">\n                            <div class="tw-p-24-px tw-flex tw-flex-row tw-justify-between tw-items-center">\n                                <div class="tw-flex tw-items-start lg:tw-w-3/5 md:tw-w-1/2">\n                                    <svg-icon-sprite src="expense" width="20px" hight="20px" class="tw-text-mandatory-field-color"></svg-icon-sprite>\n                                    <div class="lg:tw-w-3/5 md:tw-w-1/2 tw-pl-6">\n                                        <h4 class="!tw-text-14-px !tw-font-500">How should the expenses be grouped?<app-mandatory-field></app-mandatory-field></h4>\n                                        <h5 class="!tw-text-faded-text-color !tw-font-400 !tw-text-14-px tw-pt-6-px !tw-leading-4">Expenses can either be exported as single line items (Expense) or as a grouped report with multiple line items (Expense Report)</h5>\n                                    </div>\n                                </div>\n                                <div class="tw-pl-18-px tw-pt-18-px">\n                                    <input type="text" class="tw-text-14-px !tw-font-500 tw-w-300-px !tw-px-10-px !tw-py-8-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" formControlName="cccExportGroup">\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div>\n            <app-configuration-step-footer [ctaText] = "!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" (save)="save()" [isButtonDisabled]="!exportSettingsForm.valid"></app-configuration-step-footer>\n        </div>\n    </form>\n</div>\n\n<ng-template #employeeFieldMapping>\n    <div [formGroup]="exportSettingsForm">\n        <app-configuration-select-field\n            *ngIf="!exportSettingsForm.controls.employeeFieldMapping.disabled"\n            [form]="exportSettingsForm"\n            [isFieldMandatory]="true"\n            [mandatoryErrorListName]="\'employee field\'"\n            [label]="\'How are your Employees represented in Sage Intacct?\'"\n            [subLabel]="\'Select how your employees are represented in Sage Intacct. This would help to export the expenses to the correct record in Sage Intacct\'"\n            [options]="employeeFieldOptions"\n            [iconPath]="\'twopeople\'"\n            [placeholder]="\'Select representation\'"\n            [formControllerName]="\'employeeFieldMapping\'"></app-configuration-select-field>\n\n        <div *ngIf="exportSettingsForm.controls.employeeFieldMapping.disabled">\n            <div class="tw-p-24-px tw-flex tw-flex-row tw-justify-between tw-items-center">\n                <div class="tw-flex tw-items-start lg:tw-w-3/5 md:tw-w-1/2">\n                    <svg-icon-sprite src="expense" width="20px" hight="20px" class="tw-text-mandatory-field-color tw-pr-16-px tw-mt-4-px"></svg-icon-sprite>\n                    <div>\n                        <h4 class="!tw-text-14-px !tw-font-500">How are your Employees represented in Sage Intacct?<app-mandatory-field></app-mandatory-field></h4>\n                        <h5 class="!tw-text-faded-text-color !tw-font-400 !tw-text-14-px tw-pt-6-px !tw-leading-4">Select how your employees are represented in Sage Intacct. This would help to export the expenses to the correct record in Sage Intacct</h5>\n                    </div>\n                </div>\n                <div class="tw-h-40-px tw-w-300-px tw-bg-disabled-bg-color tw-border radius">\n                    <div class="tw-text-14-px tw-text-slightly-normal-text-color tw-my-10-px tw-mx-14-px">{{getEmployeeFieldMapping(exportSettingsForm.value.employeeFieldMapping, exportSettingsForm.value.reimbursableExportType)}}</div>\n                    <span class="sub-text tw-pt-3-px tw-text-12-px tw-text-sub-text-color">Auto-selected based on your export module</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n',styles:[":host ::ng-deep .error-box {\n  border-color: var(--alert-toast) !important;\n}\n\n:host ::ng-deep .normal-box {\n  border-color: var(--box-color) !important;\n}\n\n:host ::ng-deep .normal-box :enabled:focus-visible {\n  border-color: var(--slightly-normal-text-color) !important;\n}\n\n.sub-text {\n  color: #5A5D72;\n  font-size: 12px;\n}\n\n.radius {\n  border-radius: 4px;\n}"]})],ConfigurationExportSettingsComponent);let IntacctStepperComponent=class IntacctStepperComponent{constructor(router,workspaceService){this.router=router,this.workspaceService=workspaceService,this.onboardingSteps=[{active:!1,completed:!1,number:1,step:"Connect to Sage Intacct",icon:"connector",route:"connector",size:{height:"18px",width:"15px"}},{active:!1,completed:!1,number:2,step:"Export Settings",icon:"export-setting",route:"export_settings",size:{height:"18px",width:"15px"}},{active:!1,completed:!1,number:3,step:"Import Settings",icon:"import-setting",route:"import_settings",size:{height:"18px",width:"15px"}},{active:!1,completed:!1,number:4,step:"Advanced Settings",icon:"advanced-setting",route:"advanced_settings",size:{height:"20px",width:"20px"}}]}updateActiveAndCompletedSteps(){this.onboardingSteps.forEach((step=>{step.step===this.currentStep&&(step.active=!0)}));const onboardingState=this.workspaceService.getIntacctOnboardingState();for(let index={[enum_model.kG.CONNECTION]:1,[enum_model.kG.LOCATION_ENTITY]:2,[enum_model.kG.EXPORT_SETTINGS]:3,[enum_model.kG.IMPORT_SETTINGS]:4,[enum_model.kG.ADVANCED_CONFIGURATION]:5,[enum_model.kG.COMPLETE]:6}[onboardingState]-2;index>0;index--)this.onboardingSteps[index-1].completed=!0}navigate(canNavigate,route){canNavigate&&this.router.navigate([`/integrations/intacct/onboarding/${route}`])}ngOnInit(){this.updateActiveAndCompletedSteps()}};IntacctStepperComponent.ctorParameters=()=>[{type:router.F0},{type:SiWorkspaceService}],IntacctStepperComponent.propDecorators={currentStep:[{type:core.Input}]},IntacctStepperComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-intacct-stepper",template:'<div class="tw-absolute tw-bg-header-1 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n<div class="tw-absolute tw-bg-header-2 tw-h-168-px tw-w-[100%] tw-z-[-1]"></div>\n\n<div class="tw-py-60-px tw-text-slightly-normal-text-color">\n    <div>\n        <div class="tw-text-center tw-pb-38-px">\n            <p class="tw-font-500">Configure the following settings to set up your integration</p>\n        </div>\n        <div class="tw-flex tw-justify-center">\n            <div *ngFor="let onboardingStep of onboardingSteps">\n                <div class="tw-grip tw-grid-cols-1">\n                    <div class="tw-flex tw-items-center">\n                        <div class="tw-flex tw-justify-center step" (click)="navigate(onboardingStep.completed, onboardingStep.route)" [ngClass]="[onboardingStep.active && !onboardingStep.completed ? \'step-state tw-border-success-toast tw-cursor-pointer\' : \'step-state tw-border-box-color tw-cursor-not-allowed\', onboardingStep.active && onboardingStep.completed ? \'step-state tw-border-success-toast !tw-cursor-pointer\' : \'\',onboardingStep.completed && !onboardingStep.active ? \'!tw-bg-success-toast tw-border-success-toast !tw-cursor-pointer\':\'\',]">\n                            <img *ngIf="onboardingStep.active" src=\'{{ "../../../../../assets/icons/integrations-stepper/" + onboardingStep.icon + ".svg" }}\' class="icon" >\n                            <img *ngIf="!onboardingStep.active && onboardingStep.completed" src="../../../../../assets/icons/tick.svg" class="icon">\n                            <img *ngIf="!onboardingStep.active && !onboardingStep.completed" src=\'{{ "../../../../../assets/icons/integrations-stepper/" + onboardingStep.icon + "-inactive.svg" }}\' class="icon">\n                        </div>\n                        <div *ngIf="onboardingStep.number !== 4" >\n                            <div *ngIf="!onboardingStep.completed">\n                                <hr class="line-active">\n                            </div>\n                            <div *ngIf="onboardingStep.completed" class="">\n                                <hr class="line-inactive">\n                            </div>\n                        </div>\n                    </div>\n                    <div class="tw-text-14-px tw-pt-10-px tw-font-500" [ngClass]="[onboardingStep.step === \'Connect to Sage Intacct\' ? \'step-name-connector\' : \'\', onboardingStep.step === \'Export Settings\' ? \'step-name-export\' : \'\', onboardingStep.step === \'Import Settings\' ? \'step-name-import\' : \'\', onboardingStep.step === \'Advanced Settings\' ? \'step-name-advanced\' : \'\']">\n                        {{ onboardingStep.step }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>',styles:[".step {\n  box-sizing: border-box;\n  display: flex;\n  height: 48px;\n  width: 48px;\n  align-items: center;\n  border-radius: 9999px;\n}\n\n.step-state {\n  border-width: 1px;\n  background-color: var(--white);\n}\n\n.icon {\n  height: 20px;\n  width: 20px;\n}\n\n.line-active {\n  height: 2px;\n  width: 10rem;\n  border-top-width: 2px;\n  border-style: dashed;\n  border-color: var(--line-inactive);\n}\n\n.line-inactive {\n  height: 2px;\n  width: 10rem;\n  border-top-width: 2px;\n  border-style: solid;\n  border-color: var(--success-toast);\n}\n\n.step-name-connector {\n  position: relative;\n  left: -50px;\n}\n\n.step-name-export {\n  position: relative;\n  left: -20px;\n}\n\n.step-name-import {\n  position: relative;\n  left: -18px;\n}\n\n.step-name-advanced {\n  position: relative;\n  left: -30px;\n}"]})],IntacctStepperComponent);var cache_buster_decorator=__webpack_require__("./node_modules/ts-cacheable/dist/esm2015/cache-buster.decorator.js");const sageIntacctCredentialCache=new Subject.x;let IntacctConnectorService=class IntacctConnectorService{constructor(apiService,workspaceService,workspace,storageService){this.apiService=apiService,this.workspaceService=workspaceService,this.workspace=workspace,this.storageService=storageService}getSageIntacctCredential(){return this.workspaceId=this.storageService.get("si.workspaceId"),this.apiService.get("/workspaces/"+this.workspaceId+"/credentials/sage_intacct/",{})}connectSageIntacct(data){return this.workspaceId=this.storageService.get("si.workspaceId"),cacheable_decorator.h.next(),this.apiService.post("/workspaces/"+this.workspaceId+"/credentials/sage_intacct/",data)}postLocationEntityMapping(locationEntityMappingPayload){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.post(`/workspaces/${workspaceId}/mappings/location_entity/`,locationEntityMappingPayload)}getLocationEntityMapping(){const workspaceId=this.workspaceService.getWorkspaceId();return this.apiService.get(`/workspaces/${workspaceId}/mappings/location_entity/`,{})}};IntacctConnectorService.ctorParameters=()=>[{type:SiApiService},{type:SiWorkspaceService},{type:SiWorkspaceService},{type:storage_service.V}],(0,tslib_es6.gn)([(0,cacheable_decorator.q)({cacheBusterObserver:sageIntacctCredentialCache})],IntacctConnectorService.prototype,"getSageIntacctCredential",null),(0,tslib_es6.gn)([(0,cache_buster_decorator.Zs)({cacheBusterNotifier:sageIntacctCredentialCache})],IntacctConnectorService.prototype,"connectSageIntacct",null),IntacctConnectorService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],IntacctConnectorService);let IntacctConnectorComponent=class IntacctConnectorComponent{constructor(router,formBuilder,connectorService,mappingsService,toastService){this.router=router,this.formBuilder=formBuilder,this.connectorService=connectorService,this.mappingsService=mappingsService,this.toastService=toastService,this.isLoading=!0,this.ConfigurationCtaText=enum_model.Pw,this.saveInProgress=!1,this.redirectLink=branding_config.K9.onboardingArticles.INTACCT.CONNECTOR,this.setupConnectionStatus=new core.EventEmitter,this.brandingConfig=branding_config.Wg}clearField(){this.connectSageIntacctForm.get("userID")?.setValue(""),this.connectSageIntacctForm.get("companyID")?.setValue(""),this.connectSageIntacctForm.get("userPassword")?.setValue("")}save(){const userID=this.connectSageIntacctForm.value.userID,companyID=this.connectSageIntacctForm.value.companyID,userPassword=this.connectSageIntacctForm.value.userPassword;this.isLoading=!0,this.connectorService.connectSageIntacct({si_user_id:userID,si_company_id:companyID,si_user_password:userPassword}).subscribe((response=>{this.mappingsService.refreshSageIntacctDimensions(["location_entities"]).subscribe((()=>{this.setupConnectionStatus.emit(!0),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Connection Successful."),this.isLoading=!1}))}),(()=>{this.setupConnectionStatus.emit(!1),this.clearField(),this.isLoading=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error while connecting, please try again later.")}))}setupPage(){this.isLoading=!0,this.isOnboarding=this.router.url.includes("onboarding"),this.connectorService.getSageIntacctCredential().subscribe((intacctCredential=>{this.setupConnectionStatus.emit(!0),this.isLoading=!1}),(()=>{this.connectSageIntacctForm=this.formBuilder.group({userID:["",fesm2020_forms.kI.required],companyID:["",fesm2020_forms.kI.required],userPassword:["",fesm2020_forms.kI.required]}),this.setupConnectionStatus.emit(!1),this.isLoading=!1}))}ngOnInit(){this.setupPage()}};IntacctConnectorComponent.ctorParameters=()=>[{type:router.F0},{type:fesm2020_forms.qu},{type:IntacctConnectorService},{type:SiMappingsService},{type:integrations_toast_service.d}],IntacctConnectorComponent.propDecorators={setupConnectionStatus:[{type:core.Output}]},IntacctConnectorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-intacct-connector",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n   <app-loader></app-loader>\n</div>\n<div  class="configuration--contents tw-border-separator tw-mt-6">\n   <div>\n      <app-configuration-step-header \n      [headerText]="\'Connect to Sage Intacct\'"\n      [contentText]="\'Connect to your Sage Intacct account to establish a connection between \' + brandingConfig.brandName + \' and Sage Intacct.\'"\n      [redirectLink]="redirectLink"></app-configuration-step-header>\n   </div>\n   <div *ngIf="!isLoading">\n      <form [formGroup]="connectSageIntacctForm">\n         <div class="tw-p-24-px">\n           <div class="container">\n             <div class="tw-mb-4">\n               <p class="tw-text-faded-text-color tw-pb-8-px">User ID<app-mandatory-field [noSpacing]="true"></app-mandatory-field></p>\n               <input placeholder="Enter User ID" type="text" id="userId" name="userId" formControlName="userID" class="custom-focus tw-border tw-border-gray-300 tw-rounded tw-px-3 tw-py-2 tw-w-400-px" [ngClass]="[connectSageIntacctForm.controls.userID.invalid && connectSageIntacctForm.controls.userID.touched ? \'error-box\' : \'normal-box\']">\n               <div *ngIf="connectSageIntacctForm.controls.userID.invalid && connectSageIntacctForm.controls.userID.touched" class="incorrect-credential">\n                  Invalid User ID. Please enter valid User ID.\n               </div>\n             </div>\n             <div class="tw-mb-4">\n               <p for="companyId" class="tw-text-faded-text-color tw-pb-8-px tw-pt-16-px">Company ID<app-mandatory-field [noSpacing]="true"></app-mandatory-field></p>\n               <input placeholder="Enter Company ID" type="text" id="companyId" name="companyId" formControlName="companyID" class="custom-focus tw-border tw-border-gray-300 tw-rounded tw-px-3 tw-py-2 tw-w-400-px" [ngClass]="[connectSageIntacctForm.controls.companyID.invalid && connectSageIntacctForm.controls.companyID.touched ? \'error-box\' : \'normal-box\']">\n               <div *ngIf="connectSageIntacctForm.controls.companyID.invalid && connectSageIntacctForm.controls.companyID.touched" class="incorrect-credential">\n                 Invalid Company ID. Please enter valid Company ID.\n               </div>\n             </div>\n             <div class="tw-mb-4">\n               <p for="userPassword" class="tw-text-faded-text-color tw-pb-8-px tw-pt-16-px">User Password<app-mandatory-field [noSpacing]="true"></app-mandatory-field></p>\n               <input placeholder="Enter User Password" type="password" formControlName="userPassword" class="custom-focus tw-border tw-border-gray-300 tw-rounded tw-px-3 tw-py-2 tw-w-400-px" [ngClass]="[connectSageIntacctForm.controls.userPassword.invalid && connectSageIntacctForm.controls.userPassword.touched ? \'error-box\' : \'normal-box\']">\n               <div *ngIf="connectSageIntacctForm.controls.userPassword.invalid && connectSageIntacctForm.controls.userPassword.touched" class="incorrect-credential">\n                  Incorrect Password. Please enter correct Password.\n                </div>\n             </div>\n           </div>\n         </div>\n       </form>\n       \n      <div>\n         <app-configuration-step-footer [ctaText]="!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" (save)="save()" [isButtonDisabled]="!connectSageIntacctForm.valid"></app-configuration-step-footer>\n      </div>\n   </div>\n</div>',styles:[":host ::ng-deep .error-box {\n  border-color: var(--alert-toast) !important;\n}\n\n:host ::ng-deep .normal-box {\n  border-color: var(--box-color) !important;\n}\n\n:host ::ng-deep .normal-box :enabled:focus-visible {\n  border-color: var(--slightly-normal-text-color) !important;\n}\n\ninput.custom-focus:focus {\n  outline: none;\n  border: 1px solid black !important;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Add these styles to highlight the input fields with red border */\n\n.tw-border-red-600 {\n  border-color: #EF4444; /* Red color */\n}\n\n.incorrect-credential {\n  color: #DA1E28;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n}\n\n::placeholder {\n  font-size: 14px;\n  color: var(--placeholder);\n}"]})],IntacctConnectorComponent);var user_service=__webpack_require__("./src/app/core/services/misc/user.service.ts");let IntacctLocationEntityComponent=class IntacctLocationEntityComponent{constructor(formBuilder,mappingsService,connectorService,userService,storageService,router,workspaceService,toastService,trackingService){this.formBuilder=formBuilder,this.mappingsService=mappingsService,this.connectorService=connectorService,this.userService=userService,this.storageService=storageService,this.router=router,this.workspaceService=workspaceService,this.toastService=toastService,this.trackingService=trackingService,this.isLoading=!0,this.saveInProgress=!1,this.ConfigurationCtaText=enum_model.Pw,this.redirectLink=branding_config.K9.onboardingArticles.INTACCT.CONNECTOR,this.fyleOrgName=this.userService.getUserProfile().org_name,this.brandingConfig=branding_config.Wg}patchFormValue(event){this.locationEntityForm.controls.locationEntity.patchValue(event.value)}save(){this.isLoading=!0,this.saveInProgress=!0;const locationEntityId=this.locationEntityForm.value.locationEntity,locationEntityMappingPayload=this.getLocationEntityMappingPayload(locationEntityId);this.connectorService.postLocationEntityMapping(locationEntityMappingPayload).subscribe((locationEntity=>{this.locationEntity=locationEntity,this.isLoading=!1,this.handleSuccess(locationEntityMappingPayload)}),(()=>{this.isLoading=!1,this.saveInProgress=!1}))}getLocationEntityMappingPayload(locationEntityId){if("top_level"!==locationEntityId.destination_id){const locationEntity=this.locationEntityOptions.filter((entity=>entity.destination_id===locationEntityId.destination_id));return{location_entity_name:locationEntity[0].value,destination_id:locationEntity[0].destination_id,country_name:locationEntity[0].detail?.country?locationEntity[0].detail.country:null,workspace:this.workspaceId}}return{location_entity_name:"Top Level",destination_id:"top_level",country_name:null,workspace:this.workspaceId}}navigateToExportSetting(){this.router.navigate(["/integrations/intacct/onboarding/export_settings"])}setOnboardingStateAndRedirect(locationEntityMappingPayload){this.workspaceService.getIntacctOnboardingState()===enum_model.kG.CONNECTION&&this.trackingService.integrationsOnboardingCompletion(enum_model.kG.CONNECTION,2,locationEntityMappingPayload),this.isOnboarding&&(this.workspaceService.setIntacctOnboardingState(enum_model.kG.EXPORT_SETTINGS),this.router.navigate(["/integrations/intacct/onboarding/export_settings"])),this.isLoading=!1,this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Location Entity Selected Successfully.")}handleSuccess(locationEntityMappingPayload){this.isRefreshDimensionInProgress=!0,this.mappingsService.refreshSageIntacctDimensions().subscribe((()=>{this.setOnboardingStateAndRedirect(locationEntityMappingPayload)}),(()=>{this.setOnboardingStateAndRedirect(locationEntityMappingPayload)}))}setupPage(){this.workspaceId=this.storageService.get("si.workspaceId"),this.isOnboarding=this.router.url.includes("onboarding"),this.mappingsService.getSageIntacctDestinationAttributes(enum_model.NF.LOCATION_ENTITY).subscribe((locationEntities=>{const topLevelOption={id:1,attribute_type:"LOCATION_ENTITY",display_name:"Location Entity",destination_id:"top_level",value:"Top Level",active:!0,created_at:new Date,updated_at:new Date,workspace:this.workspaceId,detail:{}};this.locationEntityOptions=[topLevelOption].concat(locationEntities),this.setupLocationEntityMapping()}))}setupLocationEntityMapping(){this.connectorService.getLocationEntityMapping().subscribe((locationEntityMappings=>{this.locationEntity=locationEntityMappings,this.locationEntityForm=this.formBuilder.group({locationEntity:[this.locationEntity?this.locationEntity:""]}),this.locationEntityForm.controls.locationEntity.disable(),this.isLoading=!1}),(()=>{this.locationEntityForm=this.formBuilder.group({locationEntity:[null,fesm2020_forms.kI.required]}),this.isLoading=!1}))}ngOnInit(){this.setupPage()}};IntacctLocationEntityComponent.ctorParameters=()=>[{type:fesm2020_forms.qu},{type:SiMappingsService},{type:IntacctConnectorService},{type:user_service.K},{type:storage_service.V},{type:router.F0},{type:SiWorkspaceService},{type:integrations_toast_service.d},{type:tracking_service.e}],IntacctLocationEntityComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-intacct-location-entity",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n  <app-loader></app-loader>\n</div>\n\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n  <div class="configuration--step-header configuration--step-header-styles">\n    <app-configuration-step-header\n      [headerText]="\'Connect to Sage Intacct\'"\n      [contentText]="\'Expenses will be posted to the Sage Intacct Location entity selected here. Once configured, you can not change \' + brandingConfig.brandName + \' Organization or Location Entity.\'"\n      [redirectLink]="redirectLink">\n    </app-configuration-step-header>\n  </div>\n  <div class="tw-flex">\n    <div class="tw-w-40-vw tw-h-240-px tw-flex tw-flex-col tw-items-center tw-justify-center">\n      <h5 class="tw-text-14-px tw-font-500 align-center tw-text-sub-text-color tw-cursor-default">\n        {{ brandingConfig.brandName | uppercase }}\n      </h5>\n      <h3 [pTooltip]="fyleOrgName" [tooltipDisabled]="fyleOrgName.length < 26" tooltipPosition="left" tooltipStyleClass="left" class="tw-text-18-px tw-pt-18-px tw-whitespace-nowrap tw-cursor-default">\n        {{ fyleOrgName | trimCharacter: 26 }}\n      </h3>\n    </div>\n    <div class="tw-flex tw-justify-center tw-items-center tw-w-20-vw">\n      <div>\n        <img src="assets/gifs/disconnect.gif" height="100px" width="100px" alt="Disconnect GIF" />\n      </div>\n    </div>\n      <form class="tw-flex tw-flex-col tw-justify-center tw-items-center tw-w-40-vw" [formGroup]="locationEntityForm">\n        <div class="tw-whitespace-nowrap">\n          <div>\n            <h5 class="tw-text-14-px tw-font-500 tw-items-center tw-text-sub-text-color">\n            SAGE INTACCT\n          </h5>\n          </div>\n        </div>\n          <div class="tw-pt-16-px">\n            <p-dropdown appendTo="body" (onChange)="patchFormValue($event)" class="tw-pl-7" *ngIf="!locationEntity?.location_entity_name" placeholder="Select Location Entity" formControllerName="locationEntity" [options]="locationEntityOptions" optionLabel="value">\n            </p-dropdown>\n        </div>\n          <h3 *ngIf="locationEntity" [pTooltip]="locationEntity.location_entity_name" [tooltipDisabled]="locationEntity.location_entity_name.length < 26" tooltipPosition="left" tooltipStyleClass="left" class="tw-text-18-px center-align-text tw-whitespace-nowrap tw-cursor-default">\n            {{ locationEntity.location_entity_name | trimCharacter: 26 }}\n          </h3>\n\n          <div *ngIf="!locationEntity" class="tw-text-14-px tw-pt-16-px tw-w-300-px tw-text-faded-text-color tw-text-center">\n            Please select a Location (Entity) from Sage Intacct to proceed further.\n          </div>\n\n          <div *ngIf="isRefreshDimensionInProgress" class="tw-text-14-px tw-pt-16-px tw-w-300-px tw-text-faded-text-color tw-text-center">\n            Please hold on; we are fetching data from your Sage Intacct account, which may take a few seconds.\n          </div>\n      </form>\n  </div>\n  <div>\n    <app-configuration-step-footer *ngIf="!locationEntity" [ctaText]="saveInProgress ? ConfigurationCtaText.SYNCING : ConfigurationCtaText.SAVE_AND_CONTINUE" (save)="save()" [isButtonDisabled]="!locationEntityForm.valid"></app-configuration-step-footer>\n    <app-configuration-step-footer *ngIf="locationEntity" [ctaText]="saveInProgress ? ConfigurationCtaText.SYNCING : ConfigurationCtaText.CONTINUE" (save)="navigateToExportSetting()" [isButtonDisabled]="saveInProgress"></app-configuration-step-footer>\n  </div>\n</div>\n',styles:["/* Common styles */\n.tw-flex {\n  display: flex;\n}\n.tw-justify-center {\n  justify-content: center;\n}\n.tw-items-center {\n  align-items: center;\n}\n.tw-relative {\n  position: relative;\n}\n.tw-absolute {\n  position: absolute;\n}\n.tw-h-screen {\n  height: 100vh;\n}\n.sub-text-color {\n  color: #5A5D72;\n}\n/* Loader styles */\n.intacct-connector--loader {\n  position: fixed;\n  z-index: 9999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.7);\n}\n/* Content styles */\n.connector--org-switch-separator {\n  border-top: 1px solid #F5F5F5;\n  width: 302px;\n}\n.connector--connection-block-separator-1 {\n  left: -82px;\n}\n.connector--connection-block-separator-2 {\n  right: -82px;\n}\n/* PrimeNG component styles */\n.p-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 10px;\n}\n.actionable-text {\n  color: #FF3366;\n  cursor: pointer;\n}\n.intacct-location-select {\n  margin-left: 20px;\n}\n.connector--connection-block-separator, .connector--connection-block-separator-2, .connector--connection-block-separator-1 {\n  border-top: 1px solid #F5F5F5;\n  transform: rotate(90deg);\n  position: absolute;\n  margin-left: -82px;\n}\n.connector--connection-block-separator-1 {\n  width: 102px;\n  height: 160px;\n  margin-top: -112px;\n}\n.connector--connection-block-separator-2 {\n  width: 165px;\n  height: 100px;\n  margin-top: 7px;\n}"]})],IntacctLocationEntityComponent);var rxweb_reactive_form_validators=__webpack_require__("./node_modules/@rxweb/reactive-form-validators/__ivy_ngcc__/fesm2015/rxweb-reactive-form-validators.js");const emptyDestinationAttribute={id:null,name:null};let SiImportSettingService=class SiImportSettingService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService}getImportSettings(){return this.apiService.get(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/import_settings/`,{})}postImportSettings(importSettingsPayload){return this.apiService.put(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/import_settings/`,importSettingsPayload)}};SiImportSettingService.ctorParameters=()=>[{type:SiApiService},{type:SiWorkspaceService}],SiImportSettingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiImportSettingService);let ConfigurationImportSettingsComponent=class ConfigurationImportSettingsComponent{constructor(router,mappingService,connectorService,importSettingService,formBuilder,toastService,trackingService,storageService,workspaceService){this.router=router,this.mappingService=mappingService,this.connectorService=connectorService,this.importSettingService=importSettingService,this.formBuilder=formBuilder,this.toastService=toastService,this.trackingService=trackingService,this.storageService=storageService,this.workspaceService=workspaceService,this.isLoading=!0,this.appName=enum_model.lW.INTACCT,this.redirectLink=branding_config.K9.onboardingArticles.INTACCT.IMPORT_SETTING,this.saveInProgress=!1,this.ConfigurationCtaText=enum_model.Pw,this.showAddButton=!0,this.toggleSwitchTrue=!0,this.customFieldForDependentField=!1,this.sessionStartTime=new Date,this.costCodeFieldOption=[{attribute_type:"custom_field",display_name:"Create a Custom Field",source_placeholder:null,is_dependent:!0}],this.isCostCodeFieldSelected=!1,this.costTypeFieldOption=[{attribute_type:"custom_field",display_name:"Create a Custom Field",source_placeholder:null,is_dependent:!0}],this.customFieldOption=[{attribute_type:"custom_field",display_name:"Create a Custom Field",source_placeholder:null,is_dependent:!1}],this.isImportTaxVisible=!0,this.isDialogVisible=!1,this.existingFields=["employee id","organisation name","employee name","employee email","expense date","expense date","expense id","report id","employee id","department","state","reporter","report","purpose","vendor","category","category code","mileage distance","mileage unit","flight from city","flight to city","flight from date","flight to date","flight from class","flight to class","hotel checkin","hotel checkout","hotel location","hotel breakfast","currency","amount","foreign currency","foreign amount","tax","approver","project","billable","cost center","cost center code","approved on","reimbursable","receipts","paid date","expense created date"],this.brandingConfig=branding_config.Wg}get expenseFieldsGetter(){return this.importSettingsForm.get("expenseFields")}refreshDimensions(isRefresh){this.mappingService.refreshSageIntacctDimensions().subscribe(),this.mappingService.refreshFyleDimensions().subscribe(),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Refreshing data dimensions from Sage Intacct")}removeFilter(expenseField){expenseField.controls.source_field.patchValue(""),expenseField.controls.import_to_fyle.patchValue(!1),event?.stopPropagation()}hasDuplicateOption(formGroup,index,controlName){return formGroup.controls[controlName].valid}toTitleCase(str){return str.replace(/\w\S*/g,(function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()}))}showOrHideAddButton(){return this.importSettingsForm.controls.expenseFields.value.length!==this.sageIntacctFields.length}showPreviewDialog(visible){this.isDialogVisible=visible}addExpenseField(){this.expenseFields=this.importSettingsForm.get("expenseFields");this.expenseFields.push(this.createFormGroup({source_field:"",destination_field:"",import_to_fyle:!0,is_custom:!1,source_placeholder:null})),this.importSettingWatcher(),this.showAddButton=this.showOrHideAddButton()}closeModel(){this.customFieldForm.reset(),this.showDialog=!1}saveCustomField(){if(this.customFieldForDependentField&&this.customFieldForm.value)this.customField={attribute_type:this.customFieldForm.value.attribute_type,display_name:this.customFieldForm.value.attribute_type,source_placeholder:this.customFieldForm.value.source_placeholder,is_dependent:!0},this.customFieldControl&&(this.isCostCodeFieldSelected?this.costCodeFieldOption.push(this.customField):this.costTypeFieldOption.push(this.customField),this.customFieldControl.patchValue({attribute_type:this.customFieldForm.value.attribute_type,display_name:this.customFieldForm.value.attribute_type,source_placeholder:this.customFieldForm.value.source_placeholder,is_dependent:!0}),this.fyleFields=this.fyleFields.filter((field=>!field.is_dependent)),this.customFieldControl.value.is_custom=!0,this.customFieldForm.reset(),this.showDialog=!1),this.customFieldControl.disable(),this.customFieldForDependentField=!1;else if(this.customField={attribute_type:this.customFieldForm.value.attribute_type.split(" ").join("_").toUpperCase(),display_name:this.customFieldForm.value.attribute_type,source_placeholder:this.customFieldForm.value.source_placeholder,is_dependent:!1},this.customFieldControl){this.fyleFields.pop(),this.fyleFields.push(this.customField),this.fyleFields.push(this.customFieldOption[0]);const expenseField={source_field:this.customField.attribute_type,destination_field:this.customFieldControl.value.destination_field,import_to_fyle:!0,is_custom:!0,source_placeholder:this.customField.source_placeholder};this.importSettingsForm.get("expenseFields").controls.filter((field=>field.value.destination_field===this.customFieldControl.value.destination_field))[0].patchValue(expenseField),this.customFieldForm.reset(),this.showDialog=!1}}updateDependentField(sourceField,importToFyle){"PROJECT"===sourceField&&importToFyle||this.importSettingsForm.controls.isDependentImportEnabled.setValue(!1)}costCodesCostTypesWatcher(){this.importSettingsForm.value.costCodes&&(this.costCodeFieldOption=[this.importSettingsForm.value.costCodes],this.importSettingsForm.controls.costCodes.disable()),this.importSettingsForm.value.costTypes&&(this.costTypeFieldOption=[this.importSettingsForm.value.costTypes],this.importSettingsForm.controls.costTypes.disable()),this.importSettingsForm.value.isDependentImportEnabled&&(this.importSettingsForm.controls.costCodes.disable(),this.importSettingsForm.controls.costTypes.disable()),this.importSettingsForm.controls.isDependentImportEnabled.valueChanges.subscribe((isDependentImportEnabled=>{isDependentImportEnabled?(this.importSettingsForm.controls.costCodes.enable(),this.importSettingsForm.controls.costTypes.enable(),this.importSettingsForm.controls.costCodes.setValidators(fesm2020_forms.kI.required),this.importSettingsForm.controls.costTypes.setValidators(fesm2020_forms.kI.required)):(this.importSettingsForm.controls.costCodes.disable(),this.importSettingsForm.controls.costTypes.disable(),this.importSettingsForm.controls.costCodes.clearValidators(),this.importSettingsForm.controls.costTypes.clearValidators())})),this.importSettingsForm.controls.costCodes.valueChanges.subscribe((value=>{this.isCostCodeFieldSelected=!0,"custom_field"===value?.attribute_type&&(this.customFieldForDependentField=!0,this.addCustomField(),this.customFieldControl=this.importSettingsForm.controls.costCodes,"custom_field"===value.source_field&&this.importSettingsForm.controls.costCodes.patchValue({source_field:null}))})),this.importSettingsForm.controls.costTypes.valueChanges.subscribe((value=>{this.isCostCodeFieldSelected=!1,"custom_field"===value?.attribute_type&&(this.customFieldForDependentField=!0,this.addCustomField(),this.customFieldControl=this.importSettingsForm.controls.costTypes,"custom_field"===value.source_field&&this.importSettingsForm.controls.costTypes.patchValue({source_field:null}))}))}addCustomField(){this.customFieldForm=this.formBuilder.group({attribute_type:[null,fesm2020_forms.kI.required],display_name:[null],source_placeholder:[null,fesm2020_forms.kI.required]}),this.showDialog=!0}importSettingWatcher(){this.importSettingsForm.get("expenseFields").controls.forEach((control=>{control.valueChanges.subscribe((value=>{"custom_field"===value.source_field&&(this.addCustomField(),this.customFieldControl=control,this.customFieldControl.patchValue({source_field:"",destination_field:control.value.destination_field,import_to_fyle:control.value.import_to_fyle,is_custom:control.value.is_custom,source_placeholder:null}))}))})),this.importSettingsForm.controls.importTaxCodes?.valueChanges.subscribe((isImportTaxEnabled=>{isImportTaxEnabled?this.importSettingsForm.controls?.sageIntacctTaxCodes.setValidators([fesm2020_forms.kI.required]):(this.importSettingsForm.controls.sageIntacctTaxCodes.clearValidators(),this.importSettingsForm.controls.sageIntacctTaxCodes.updateValueAndValidity())})),this.costCodesCostTypesWatcher()}createFormGroup(data){return this.formBuilder.group({source_field:[data.source_field||"",rxweb_reactive_form_validators.CM.unique()],destination_field:[data.destination_field||"",rxweb_reactive_form_validators.CM.unique()],import_to_fyle:[data.import_to_fyle||!1],is_custom:[data.is_custom||!1],source_placeholder:[data.source_placeholder||null]})}constructFormArray(){const expenseFieldFormArray=[],mappedFieldMap=new Map,unmappedFieldMap=new Map;this.sageIntacctFields.forEach((sageIntacctField=>{const mappingSetting=this.importSettings.mapping_settings.find((setting=>setting.destination_field===sageIntacctField.attribute_type)),fieldData=mappingSetting||{destination_field:sageIntacctField.attribute_type,import_to_fyle:!1,is_custom:!1,source_field:"",source_placeholder:null};mappingSetting?mappedFieldMap.set(sageIntacctField.attribute_type,fieldData):unmappedFieldMap.set(sageIntacctField.attribute_type,fieldData)}));const topPriorityFields=["PROJECT","DEPARTMENT","LOCATION"];return this.sageIntacctFields.sort(((a,b)=>(topPriorityFields.includes(b.attribute_type)?1:0)-(topPriorityFields.includes(a.attribute_type)?1:0))),this.sageIntacctFields.forEach((sageIntacctField=>{const fieldData=mappedFieldMap.get(sageIntacctField.attribute_type);fieldData&&expenseFieldFormArray.push(this.createFormGroup(fieldData))})),0===mappedFieldMap.size&&this.sageIntacctFields.forEach((sageIntacctField=>{if(expenseFieldFormArray.length<3){const fieldData=unmappedFieldMap.get(sageIntacctField.attribute_type);fieldData&&expenseFieldFormArray.push(this.createFormGroup(fieldData))}})),expenseFieldFormArray}onDropdownChange(event,index){const selectedValue=event.value;this.fyleFields.find((field=>field.attribute_type===selectedValue))?.is_dependent&&(this.importSettingsForm.get("expenseFields").at(index)?.get("import_to_fyle")?.setValue(!1),this.importSettingsForm.get("expenseFields").at(index)?.get("import_to_fyle")?.disable())}isExpenseFieldDependent(expenseField){const isDependent=this.fyleFields.find((field=>field.attribute_type===expenseField.source_field))?.is_dependent;return!!isDependent}generateDependentFieldValue(attribute_type,source_placeholder){return{attribute_type,display_name:attribute_type,source_placeholder,is_dependent:!0}}showImportTax(locationEntity){return!(!locationEntity.country_name||"United States"===locationEntity.country_name||"top_level"===locationEntity.destination_id)}initializeForm(importSettings){this.importSettingsForm=this.formBuilder.group({importVendorAsMerchant:[importSettings.configurations.import_vendors_as_merchants||null],importCategories:[importSettings.configurations.import_categories||null],importTaxCodes:[importSettings.configurations.import_tax_codes||null],costCodes:[importSettings.dependent_field_settings?.cost_code_field_name?this.generateDependentFieldValue(importSettings.dependent_field_settings.cost_code_field_name,importSettings.dependent_field_settings.cost_code_placeholder):null],dependentFieldImportToggle:[!0],workspaceId:this.storageService.get("si.workspaceId"),costTypes:[importSettings.dependent_field_settings?.cost_type_field_name?this.generateDependentFieldValue(importSettings.dependent_field_settings.cost_type_field_name,importSettings.dependent_field_settings.cost_type_placeholder):null],isDependentImportEnabled:[importSettings.dependent_field_settings?.is_import_enabled||null],sageIntacctTaxCodes:[this.sageIntacctTaxGroup?.find((taxGroup=>taxGroup.destination_id===this.importSettings?.general_mappings?.default_tax_code?.id))||null,importSettings.configurations.import_tax_codes?[fesm2020_forms.kI.required]:[]],expenseFields:this.formBuilder.array(this.constructFormArray())}),this.importSettingsForm.controls.costCodes.value&&this.importSettingsForm.controls.costTypes.value&&this.dependentFieldSettings?.is_import_enabled&&(this.fyleFields=this.fyleFields.filter((field=>!field.is_dependent)));this.importSettingsForm.get("expenseFields").controls.forEach(((control,index)=>{this.isExpenseFieldDependent(control.value)&&control.get("import_to_fyle")?.disable()})),this.importSettingWatcher(),this.costCodesCostTypesWatcher(),this.isLoading=!1}getSettingsAndSetupForm(){this.isLoading=!0,this.isOnboarding=this.router.url.includes("onboarding");const sageIntacctFieldsObservable=this.mappingService.getSageIntacctFields(),fyleFieldsObservable=this.mappingService.getFyleFields(),groupedAttributesObservable=this.mappingService.getGroupedDestinationAttributes(["TAX_DETAIL"]),importSettingsObservable=this.importSettingService.getImportSettings(),configuration=this.mappingService.getConfiguration(),locationEntity=this.connectorService.getLocationEntityMapping();(0,forkJoin.D)([sageIntacctFieldsObservable,fyleFieldsObservable,groupedAttributesObservable,importSettingsObservable,configuration,locationEntity]).subscribe((([sageIntacctFields,fyleFields,groupedAttributesResponse,importSettings,configuration,locationEntity])=>{this.dependentFieldSettings=importSettings.dependent_field_settings,this.isImportTaxVisible=this.showImportTax(locationEntity),this.sageIntacctFields=sageIntacctFields.map((field=>({...field,display_name:this.toTitleCase(field.display_name)}))),this.fyleFields=fyleFields,this.fyleFields.push(this.customFieldOption[0]),this.sageIntacctTaxGroup=groupedAttributesResponse.TAX_DETAIL,this.importSettings=importSettings;const mappingSettings=this.importSettings.mapping_settings;for(const setting of mappingSettings){const{source_field,destination_field,import_to_fyle}=setting;if("PROJECT"===source_field&&"PROJECT"===destination_field&&!0===import_to_fyle){importSettings.dependent_field_settings?.is_import_enabled&&(this.customField={attribute_type:importSettings.dependent_field_settings.cost_code_field_name,display_name:importSettings.dependent_field_settings.cost_code_field_name,source_placeholder:importSettings.dependent_field_settings.cost_code_placeholder,is_dependent:!0},this.costCodeFieldOption.push(this.customField),this.customField={attribute_type:importSettings.dependent_field_settings.cost_type_field_name,display_name:importSettings.dependent_field_settings.cost_type_field_name,source_placeholder:importSettings.dependent_field_settings.cost_type_placeholder,is_dependent:!0},this.costTypeFieldOption.push(this.customField));break}}"EMPLOYEE"===configuration.employee_field_mapping?this.intacctCategoryDestination=enum_model.TT.EXPENSE_TYPE:this.intacctCategoryDestination=enum_model.TT.ACCOUNT,this.initializeForm(importSettings)}))}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}acceptDependentFieldWarning(isWarningAccepted){this.showDependentFieldWarning=!1,isWarningAccepted||this.expenseFieldsGetter.controls.forEach((control=>{control.value.source_field===enum_model.rK.PROJECT&&(control.patchValue({source_field:enum_model.rK.PROJECT,destination_field:control.value.destination_field,import_to_fyle:!0,is_custom:control.value.is_custom,source_placeholder:control.value.source_placeholder}),this.importSettingsForm.controls.isDependentImportEnabled.setValue(!0))}))}showWarningForDependentFields(event,formGroup){event.checked||formGroup.value.source_field!==enum_model.rK.PROJECT||(this.showDependentFieldWarning=!0)}save(){this.saveInProgress=!0;const importSettingPayload=class ImportSettings{static constructPayload(importSettingsForm,existingDependentFieldSettings){const mappingSettings=importSettingsForm.value.expenseFields.filter((field=>field.destination_field&&field.source_field)).map((field=>({source_field:field.source_field.toUpperCase(),destination_field:field.destination_field,import_to_fyle:field.import_to_fyle,is_custom:"PROJECT"!==field.source_field.toUpperCase()&&"COST_CENTER"!==field.source_field.toUpperCase(),source_placeholder:field.source_placeholder})));let dependentFieldSetting=null;return(existingDependentFieldSettings||importSettingsForm.value.isDependentImportEnabled)&&(dependentFieldSetting={is_import_enabled:importSettingsForm.value.isDependentImportEnabled,cost_code_field_name:importSettingsForm.get("costCodes")?.value?.attribute_type,cost_code_placeholder:importSettingsForm.get("costCodes")?.value?.source_placeholder,cost_type_field_name:importSettingsForm.get("costTypes")?.value?.attribute_type,cost_type_placeholder:importSettingsForm.get("costTypes")?.value?.source_placeholder,workspace:importSettingsForm.value.workspaceId}),{configurations:{import_categories:!!importSettingsForm.value.importCategories&&importSettingsForm.value.importCategories,import_tax_codes:!!importSettingsForm.value.importTaxCodes&&importSettingsForm.value.importTaxCodes,import_vendors_as_merchants:!!importSettingsForm.value.importVendorAsMerchant&&importSettingsForm.value.importVendorAsMerchant},general_mappings:{default_tax_code:importSettingsForm.value.importTaxCodes?{name:importSettingsForm.value.sageIntacctTaxCodes.value,id:importSettingsForm.value.sageIntacctTaxCodes.destination_id}:emptyDestinationAttribute},mapping_settings:mappingSettings,dependent_field_settings:dependentFieldSetting}}}.constructPayload(this.importSettingsForm,this.dependentFieldSettings);this.importSettingService.postImportSettings(importSettingPayload).subscribe((response=>{this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Import settings saved successfully"),this.trackingService.trackTimeSpent(enum_model.T3.IMPORT_SETTINGS_INTACCT,this.sessionStartTime),this.workspaceService.getIntacctOnboardingState()===enum_model.kG.IMPORT_SETTINGS?this.trackingService.integrationsOnboardingCompletion(enum_model.kG.IMPORT_SETTINGS,3,importSettingPayload):this.trackingService.intacctUpdateEvent(enum_model.fd.ADVANCED_SETTINGS_INTACCT,{phase:this.getPhase(),oldState:this.importSettings,newState:response}),this.saveInProgress=!1,this.isOnboarding&&(this.workspaceService.setIntacctOnboardingState(enum_model.kG.ADVANCED_CONFIGURATION),this.router.navigate(["/integrations/intacct/onboarding/advanced_settings"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving import settings, please try again later")}))}ngOnInit(){this.getSettingsAndSetupForm()}};ConfigurationImportSettingsComponent.ctorParameters=()=>[{type:router.F0},{type:SiMappingsService},{type:IntacctConnectorService},{type:SiImportSettingService},{type:fesm2020_forms.qu},{type:integrations_toast_service.d},{type:tracking_service.e},{type:storage_service.V},{type:SiWorkspaceService}],ConfigurationImportSettingsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-import-settings",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n        <app-configuration-step-header \n        [headerText]="\'Import Settings\'"\n        [contentText]="\'In this section, you can choose the fields required to be imported from Sage Intacct to \' + brandingConfig.brandName + \'.\'"\n        [redirectLink]="redirectLink"\n        [showSyncButton]="isOnboarding"\n        [appName]="appName"\n        (refreshDimension)="refreshDimensions($event)"></app-configuration-step-header>\n    </div>\n    <form [formGroup]="importSettingsForm">\n        <div class="tw-p-24-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500 ">Import Sage Intacct Dimensions</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4 tw-pb-12-px">The Sage Intacct dimensions listed below will be mapped to their corresponding {{brandingConfig.brandName}} Field as shown below. Importing these dimensions from Sage Intacct to {{brandingConfig.brandName}} will make the values available as a dropdown in the expense form for your employees to choose from. <a (click)="showPreviewDialog(true)" class="tw-text-hyperlink-color tw-cursor-pointer">Click here</a> to preview.</h5>\n                    <div class="tw-pt-12-px sub-text-note">\n                        <img src="/assets/icons/info_filled.svg">\n                        <span class="tw-text-14-px tw-pl-6-px">This is a default mapping and you will not be able to modify it.</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="fields-header" fxLayout="row" fxLayoutAlign="start center">\n            <div class="fields-header-text tw-pl-48-px tw-w-450-px">Sage Intacct Dimensions</div>\n            <div class="fields-header-text tw-w-30-vw">{{brandingConfig.brandName}} Fields</div>\n            <div class="fields-header-text tw-flex tw-w-[10vw] tw-whitespace-nowrap">\n                Import to {{brandingConfig.brandName}}\n                <svg-icon-sprite src="info" width="20px" hight="20px" class="tw-text-faded-text-color" pTooltip="Importing a dimension syncs active values from Sage Intacct every 24 hours. Deactivated values in Sage will also be disabled in {{brandingConfig.brandName}}"></svg-icon-sprite>\n            </div>\n        </div>\n        <div class="tw-flex tw-pt-18-px">\n            <div class="tw-pl-48-px">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="{{intacctCategoryDestination | snakeCaseToSpaceCase | titlecase}}" disabled>\n            </div>\n            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n            <div class="tw-w-30-vw">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Category" disabled>\n            </div>\n            <div class="input-toggle-section tw-w-10-vw">\n                <p-inputSwitch formControlName="importCategories"></p-inputSwitch>\n            </div>\n        </div>\n        <div class="tw-flex tw-pt-18-px">\n            <span class="tw-pl-48-px">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Vendor" disabled>\n            </span>\n            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n            <span class="tw-w-30-vw">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Merchant" disabled>\n            </span>\n            <span class="input-toggle-section tw-w-10-vw">\n                <p-inputSwitch formControlName="importVendorAsMerchant"></p-inputSwitch>\n            </span>\n        </div>\n        <div class="tw-flex tw-pt-18-px" *ngIf="isImportTaxVisible">\n            <span class="tw-pl-48-px">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Tax Detail" disabled>\n            </span>\n            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n            <span class="tw-w-30-vw">\n                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-font-500 tw-w-300-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Tax Group" disabled>\n            </span>\n            <span class="input-toggle-section tw-w-10-vw">\n                <p-inputSwitch formControlName="importTaxCodes"></p-inputSwitch>\n            </span>\n        </div>\n        <div class="tw-flex tw-pl-48-px tw-pt-18-px" *ngIf="importSettingsForm.value?.importTaxCodes && isImportTaxVisible">\n            <p-dropdown appendTo="body" [options]="sageIntacctTaxGroup" optionLabel="value" class="tw-w-600-px" formControlName="sageIntacctTaxCodes" placeholder="Select Tax Group">\n            </p-dropdown>\n        </div>\n        <div class="tw-p-22-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500">Import / Map Sage Intacct Dimensions</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4 tw-pb-12-px">The Sage Intacct dimensions listed below can be mapped to an existing {{brandingConfig.brandName}} field of your preference, or a new custom field. Importing these dimensions from Sage Intacct to {{brandingConfig.brandName}} will make the values available as a dropdown in the expense form for your employees to choose from.  <a (click)="showPreviewDialog(true)" class="tw-text-hyperlink-color tw-cursor-pointer">Click here</a> to preview.</h5>\n                    <div class="tw-pt-4 sub-text-note">\n                        <img src="/assets/icons/info_filled.svg">\n                        <span class="tw-pl-6-px">\n                            If you\'d like to use only selective data from Sage Intacct, map a Sage Intacct dimension to a field in {{brandingConfig.brandName}} and turn off the import, as importing the data will sync in all the active values in Sage Intacct. You can add the required values in {{brandingConfig.brandName}} and map them later in the integration mapping section.\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div class="tw-p-22-px" formArrayName="expenseFields">\n                <div class="tw-flex fields-header" fxLayout="row" fxLayoutAlign="start center">\n                    <div class="fields-header-text tw-pl-4-px tw-w-404-px tw-whitespace-nowrap">Sage Intacct Dimensions</div>\n                    <div class="fields-header-text tw-w-30-vw tw-whitespace-nowrap">{{brandingConfig.brandName}} Fields</div>\n                    <div class="fields-header-text tw-flex tw-whitespace-nowrap">\n                        Import to {{brandingConfig.brandName}}\n                        <svg-icon-sprite src="info" width="20px" hight="20px" class="tw-text-faded-text-color" pTooltip="Importing a dimension syncs active values from Sage Intacct every 24 hours. Deactivated values in Sage will also be disabled in {{brandingConfig.brandName}}"></svg-icon-sprite>\n                    </div>\n                </div>\n                <div class="tw-pt-32-px" *ngFor="let expenseField of expenseFieldsGetter.controls; let i = index" [formGroupName]="i">\n                    <div class="tw-flex">\n                        <div>\n                            <p-dropdown appendTo="body" [options]="sageIntacctFields" placeholder="Choose Sage Intacct field" formControlName="destination_field"\n                            optionLabel="display_name" optionValue="attribute_type"></p-dropdown>\n                            <p *ngIf="expenseField.value.destination_field && !expenseField.valid && !hasDuplicateOption(expenseField, i, \'destination_field\')" class="tw-text-alert-toast tw-text-12-px tw-pt-4-px">\n                                Sage Intacct Fields should be unique\n                            </p>\n                        </div>\n                            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                            <div class="tw-w-28-vw">\n                                <p-dropdown (onChange)="onDropdownChange($event, i)" appendTo="body" [options]="fyleFields" [placeholder]="\'Choose \' + brandingConfig.brandName + \' Expense field\'" formControlName="source_field"\n                                optionLabel="display_name" optionValue="attribute_type" [ngClass]="{\'selectedItem\': expenseField.value.source_field, \'filterDropdown\': !expenseField.value.source_field}">\n                                    <ng-template let-option pTemplate="item">\n                                    <div [ngClass]="{\'custom-option\': option.attribute_type === \'custom_field\'}">\n                                        <svg-icon-sprite *ngIf="option.attribute_type === \'custom_field\'" src="add" width="20px" height="20px" class="icon-align"></svg-icon-sprite>\n                                        {{ option.display_name }}\n                                    </div>\n                                    </ng-template>\n                                    <ng-template pTemplate="selectedItem" let-item>\n                                    <div class="tw-flex tw-justify-between tw-items-center">\n                                        <span>\n                                            {{ item.display_name }}\n                                        </span>\n                                        <i class="pi pi-times" (click)="removeFilter(expenseField)"></i>\n                                    </div>\n                                    </ng-template>\n                              </p-dropdown>\n                              <p *ngIf="expenseField.value.source_field && !expenseField.valid && !hasDuplicateOption(expenseField, i, \'source_field\')" class="tw-text-alert-toast tw-text-12-px tw-pt-4-px">\n                                {{brandingConfig.brandName}} Fields should be unique\n                                </p>\n                            </div>\n                        <p-inputSwitch (onChange)="showWarningForDependentFields($event, expenseField)" [pTooltip]="isExpenseFieldDependent(expenseField.value) ? \'You cannot import dependent fields\' : \'\' " (click)="updateDependentField(expenseField.value.source_field,expenseField.value.import_to_fyle)" formControlName="import_to_fyle" class="tw-pl-32-px input-toggle-section"></p-inputSwitch>\n                    </div>\n                    <div class="tw-pt-26-px" *ngIf="expenseField.value.source_field === \'PROJECT\' && expenseField.value.destination_field === \'PROJECT\' && expenseField.value.import_to_fyle" [formGroup]="importSettingsForm">\n                        <div class="tw-flex">\n                            <div>\n                                <input formControlName="isDependentImportEnabled" type="checkbox"/>\n                            </div>\n                            <label class="tw-pl-2 tw-text-14-px" for="checkbox">Import Cost Code and Cost Type from Sage Intacct as dependent fields</label>\n                        </div>\n                        <div class="tw-flex tw-pt-4" *ngIf="importSettingsForm.value.isDependentImportEnabled">\n                            <div>\n                                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-ml-40-px !tw-font-500 tw-w-260-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Cost Code" disabled>\n                            </div>\n                            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                            <p-dropdown appendTo="body" class="tw-w-28-vw" formControlName="costCodes" [options]="costCodeFieldOption" optionLabel="attribute_type" placeholder="Select Expense Field">\n                                <ng-template let-option pTemplate="item">\n                                    <div [ngClass]="{\'custom-option\': option.attribute_type === \'custom_field\'}">\n                                      <svg-icon-sprite *ngIf="option.attribute_type === \'custom_field\'" src="add" width="20px" height="20px" class="icon-align"></svg-icon-sprite>\n                                      {{ option.display_name }}\n                                    </div>\n                                  </ng-template>\n                            </p-dropdown>\n                            <p-inputSwitch class="tw-pl-32-px input-toggle-section" formControlName="dependentFieldImportToggle" [disabled]="true"></p-inputSwitch>\n                        </div>\n                        <div class="tw-flex tw-pt-4" *ngIf="importSettingsForm.value.isDependentImportEnabled">\n                            <div>\n                                <input type="text" class="tw-text-14-px tw-text-slightly-normal-text-color !tw-ml-60-px !tw-font-500 tw-w-240-px !tw-px-14-px !tw-py-10-px tw-border tw-border-solid !tw-border-separator tw-rounded-4-px" value="Cost Type" disabled>\n                            </div>\n                            <svg-icon-sprite src="arrow-line" height="10px" width="100px" class="!tw-ml-0 tw-pt-16-px tw-text-box-color"></svg-icon-sprite>\n                            <p-dropdown appendTo="body" class="tw-w-28-vw" formControlName="costTypes" [options]="costTypeFieldOption" optionLabel="attribute_type" placeholder="Select Expense Field">\n                                <ng-template let-option pTemplate="item">\n                                    <div [ngClass]="{\'custom-option\': option.attribute_type === \'custom_field\'}">\n                                      <svg-icon-sprite *ngIf="option.attribute_type === \'custom_field\'" src="add" width="20px" height="20px" class="icon-align"></svg-icon-sprite>\n                                      {{ option.display_name }}\n                                    </div>\n                                  </ng-template>\n                            </p-dropdown>\n                            <p-inputSwitch class="tw-pl-32-px input-toggle-section" formControlName="dependentFieldImportToggle" [disabled]="true"></p-inputSwitch>\n                        </div>\n                    </div>                      \n                </div>\n                <div class="tw-text-alert-toast tw-pt-4 tw-pl-1" *ngIf="importSettingsForm.get(\'expenseFields\')?.hasError(\'duplicateFyleFields\') || importSettingsForm.get(\'expenseFields\')?.hasError(\'duplicateSageIntacctFields\')">\n                    *{{brandingConfig.brandName}} and Sage Intacct Fields should be unique.\n                  </div>                  \n            </div>\n            <div *ngIf="showAddButton" class="add-button-container tw-pl-4">\n                <svg-icon-sprite src="add" width="20px" height="20px" class="add-row-text" (click)="addExpenseField()"></svg-icon-sprite>\n                <a class="add-row-text tw-pl-2" (click)="addExpenseField()">\n                    Add more fields\n                </a>\n            </div>            \n        </div>\n        <div>\n            <app-configuration-step-footer [ctaText] = "!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" (save)="save()" [isButtonDisabled]="!importSettingsForm.valid"></app-configuration-step-footer>\n        </div>\n    </form>\n</div>\n\n<p-dialog *ngIf="showDialog" [dismissableMask]="true" [showHeader]="false" [modal]="true" [(visible)]="showDialog" [draggable]="false" [style]="{width: \'468px\'}">\n    <div [formGroup]="customFieldForm">\n        <div class="tw-p-24-px tw-border-b-1-px tw-border-b-box-color">\n            <div class="tw-flex tw-justify-between tw-items-center">\n                <p class="tw-text-20-px tw-font-500">Add new Custom Field</p>\n                <i class="pi pi-times tw-cursor-pointer" style="font-size: 12px" (click)="closeModel()"></i>\n            </div>\n        </div>\n        <div *ngIf="existingFields.indexOf(customFieldForm.value.attribute_type?.toLowerCase()) !== -1">\n            <div class="tw-px-16-px tw-text-12-px tw-pt-12-px tw-flex">\n                <span class="error-box tw-flex tw-p-4-px">\n                    <img class="tw-mb-16-px" src="assets/icons/error.svg"/>\n                    <h5 class="tw-ml-6-px">\n                        Oops! It looks like another field with the same name already exists in your {{brandingConfig.brandName}} account. Would you please\n                        give the field a different name?\n                    </h5>\n                </span>\n            </div>\n        </div>\n        <div class="tw-p-24-px">\n            <p class="tw-pb-8-px tw-text-sub-text-color tw-text-14-px">\n                Field Name <span class="tw-text-mandatory-field-color">*</span>\n            </p>\n            <input formControlName="attribute_type" type="text" class="tw-w-388-px tw-h-48-px" pInputText placeholder="Enter field type" [ngClass]="[customFieldForm.controls[\'attribute_type\'].touched && !customFieldForm.controls[\'attribute_type\'].valid && !customFieldForm.controls[\'attribute_type\'].disabled ? \'error-box\' : \'normal-box\']" required/>\n            <app-mandatory-error-message *ngIf="customFieldForm.controls[\'attribute_type\'].touched && !customFieldForm.controls[\'attribute_type\'].valid && !customFieldForm.controls[\'attribute_type\'].disabled" [customErrorMessage]="\'Enter a valid type\'"></app-mandatory-error-message>\n\n            <p class="tw-pt-16-px tw-text-sub-text-color tw-text-14-px tw-pb-8-px">\n                Placeholder Name <span class="tw-text-mandatory-field-color">*</span>\n            </p>\n            <input formControlName="source_placeholder" type="text" class="tw-w-388-px tw-h-48-px" pInputText placeholder="Enter field name" [ngClass]="[customFieldForm.controls[\'source_placeholder\'].touched && !customFieldForm.controls[\'source_placeholder\'].valid && !customFieldForm.controls[\'source_placeholder\'].disabled ? \'error-box\' : \'normal-box\']" required/>\n            <app-mandatory-error-message *ngIf="customFieldForm.controls[\'source_placeholder\'].touched && !customFieldForm.controls[\'source_placeholder\'].valid && !customFieldForm.controls[\'source_placeholder\'].disabled" [customErrorMessage]="\'Enter a valid Name\'"></app-mandatory-error-message>\n\n            <div>\n                <h5 class="tw-pt-16-px tw-text-sub-text-color tw-text-14-px tw-pb-8-px">\n                  Field Type\n                </h5>\n                <div class="tw-w-388-px tw-h-48-px">\n                  <input class="tw-w-388-px form-input-disabled" type="text" placeholder="Select" disabled>\n                </div>\n              </div>\n\n              <div class="label-section tw-pt-8">\n                <div class="label-content tw-w-388-px">\n                  <h5 class="name-text sub-text-color tw-text-14-px">\n                    {{customFieldForm.value.attribute_type ? customFieldForm.value.attribute_type : \'Label\'}}\n                  </h5>\n                  <div class="form-field tw-pt-4-px">\n                    <input class="form-input tw-w-320-px" type="text"\n                    [placeholder]="customFieldForm.value.source_placeholder ? customFieldForm.value.source_placeholder : \'Enter Text\'">\n                  </div>\n                </div>\n              </div>              \n            \n            <div class="tw-flex tw-justify-end tw-pt-24-px tw-text-14-px">\n                <button type="button" class="cancel-btn" (click)="closeModel()">\n                    Cancel\n                </button>\n                <button type="button" class="save-btn" pButton [disabled]="!customFieldForm.valid || existingFields.indexOf(customFieldForm.value.attribute_type?.toLowerCase()) !== -1" (click)="saveCustomField()">\n                    Create and Save\n                </button>\n            </div>\n        </div>\n    </div>\n</p-dialog>\n\n<p-dialog *ngIf="showDependentFieldWarning" [showHeader]="false" [modal]="true" [(visible)]="showDependentFieldWarning" [draggable]="false" [style]="{width: \'468px\'}">\n    <div class="tw-px-24-px tw-py-22-px tw-border-b-1-px tw-border-b-box-color">\n        <div class="tw-flex tw-justify-between tw-items-center">\n            <div class="tw-flex">\n                <img src="assets/icons/alert_dialog.svg" class="tw-pr-12-px"/>\n                <p class="tw-text-20-px tw-font-500 tw-text-normal-text-color">Warning</p>\n            </div>\n            <i class="pi pi-times tw-cursor-pointer" style="font-size: 12px" (click)="acceptDependentFieldWarning(false)"></i>\n        </div>\n    </div>\n    <div class="tw-pl-24-px tw-pr-10-px tw-pt-16-px tw-pb-24-px">\n        <div class="tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color">\n            You have imported Cost codes and Cost Types from Sage Intacct by mapping them to fields in {{brandingConfig.brandName}}. By turning off the import, you would lose the mappings you\'ve established for these fields.\n        </div>\n        <div class="tw-pt-26-px tw-text-14-px tw-font-400 tw-text-slightly-normal-text-color">\n            Are you sure you want to continue?\n        </div>\n    </div>\n    <div class="tw-flex tw-justify-end tw-text-14-px tw-border-t-1-px">\n        <div class="tw-px-24-px tw-py-16-px">\n            <button type="button" class="cancel-btn" (click)="acceptDependentFieldWarning(false)">\n                Cancel\n            </button>\n            <button type="button" class="save-btn" pButton (click)="acceptDependentFieldWarning(true)">\n                Continue\n            </button>\n        </div>\n    </div>\n</p-dialog>\n\n<div *ngIf="isDialogVisible">\n    <p-dialog header="Preview" [dismissableMask]="true" [showHeader]="true" [modal]="true" [(visible)]="isDialogVisible" [breakpoints]="{ \'960px\': \'75vw\' }" [draggable]="false" [resizable]="false">\n        <div class="tw-flex tw-items-center tw-justify-center tw-px-24-px tw-pb-24-px">\n            <img height="300px" width="700px" src="assets/illustrations/sageIntacct/IntacctImportSettings.png">\n        </div>\n    </p-dialog>\n</div>\n',styles:[':host ::ng-deep .p-button {\n  width: -moz-fit-content !important;\n  width: fit-content !important;\n}\n\n.save-btn {\n  border-radius: 4px !important;\n  border-width: 1px !important;\n  background-color: var(--mandatory-field-color) !important;\n}\n\n.cancel-btn {\n  margin-right: 16px !important;\n  border-radius: 4px !important;\n  border-width: 1px !important;\n  border-color: var(--box-color) !important;\n  background-color: var(--white) !important;\n  padding-top: 10px !important;\n  padding-bottom: 10px !important;\n  padding-left: 16px !important;\n  padding-right: 16px !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-dropdown {\n  transform: scale(0.9);\n}\n\n.form-input-disabled {\n  padding: 11px 0px 11px 14px;\n  background: #F5F5F5;\n  border: 1px solid #DFDFE2;\n  box-sizing: border-box;\n  border-radius: 8px;\n}\n\n.label-content {\n  background: #F5F5F5;\n  border: 1px solid #DFDFE2;\n  box-sizing: border-box;\n  border-radius: 4px;\n  height: 100px;\n}\n\n.name-text {\n  padding: 12px 0px 8px 16px;\n}\n\n.form-field {\n  padding: 8px 16px 22px;\n}\n\n.form-input {\n  padding: 11px 0px 11px 14px;\n  height: 40px;\n  background: #FFFFFF;\n  border: 1px solid #DFDFE2;\n  box-sizing: border-box;\n  border-radius: 8px;\n}\n\n.container {\n  display: flex;\n  justify-content: center;\n}\n\n.sub-text {\n  border-radius: 8px;\n  border: 1px solid var(--grayscale-light-border, #ECECEE);\n  background: var(--grayscale-background, #FAFCFF);\n  padding: 24px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  max-width: auto;\n}\n\n.sub-text-note {\n  display: flex;\n  padding: 16px;\n  align-items: flex-start;\n  align-self: stretch;\n  border-radius: 4px;\n  background: var(--shades-info, #EFF5FC);\n  font-size: 0.84em;\n  font-weight: 400;\n  color: #5a5d72;\n  font-style: normal;\n}\n\n.fields-header {\n  display: flex;\n}\n\n.fields-header-text {\n  font-weight: 500;\n  line-height: 18px;\n}\n\n:host ::ng-deep .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider::after {\n  content: "Yes";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 8px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}\n\n:host ::ng-deep .p-inputswitch:not(.p-inputswitch-checked) .p-inputswitch-slider::after {\n  content: "No";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 24px;\n  bottom: 1px;\n  font-size: 12px;\n  color: white;\n  font-weight: 500;\n}\n\n.add-button-container {\n  display: flex;\n  align-items: center;\n}\n\nsvg-icon-sprite {\n  margin-left: 10px; /* Adds some space between the icon and the text */\n}\n\n.add-row-text {\n  cursor: pointer; /* Changes the cursor to a hand when hovering */\n  color: #F36;\n}\n\n.delete-button {\n  cursor: pointer;\n}\n\n.custom-option {\n  color: rgb(232, 73, 99);\n  display: flex;\n}\n\n.icon-align {\n  margin-left: 0;\n  margin-right: 5px;\n  vertical-align: middle;\n}\n\n:host ::ng-deep input {\n  font-size: 14px !important;\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n  display: none !important;\n}\n\n.error-box {\n  background: rgba(218, 30, 40, 0.02);\n  border: 1px solid rgba(218, 30, 40, 0.04);\n  box-sizing: border-box;\n  border-radius: 4px;\n}']})],ConfigurationImportSettingsComponent);var advanced_settings_model=__webpack_require__("./src/app/core/models/si/si-configuration/advanced-settings.model.ts");let SiAdvancedSettingService=class SiAdvancedSettingService{constructor(apiService,storageService,workspaceService){this.apiService=apiService,this.storageService=storageService,this.workspaceService=workspaceService}getFyleCustomFields(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/fyle/custom_fields/`,{})}postExpenseFilter(skipExport){return this.apiService.post(`/workspaces/${this.workspaceService.getWorkspaceId()}/fyle/expense_filters/`,skipExport)}getExpenseFilter(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/fyle/expense_filters/`,{})}deleteExpenseFilter(rank){return this.apiService.delete(`/workspaces/${this.workspaceService.getWorkspaceId()}/fyle/expense_filters/`,{rank})}getAdvancedSettings(){return this.apiService.get(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/advanced_settings/`,{})}postAdvancedSettings(advancedSettingsPayload){return this.apiService.put(`/v2/workspaces/${this.workspaceService.getWorkspaceId()}/advanced_settings/`,advancedSettingsPayload)}getAdditionalEmails(){return this.apiService.get(`/workspaces/${this.workspaceService.getWorkspaceId()}/admins/`,{})}};SiAdvancedSettingService.ctorParameters=()=>[{type:SiApiService},{type:storage_service.V},{type:SiWorkspaceService}],SiAdvancedSettingService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SiAdvancedSettingService);class AdvancedSettingsModel{static getDefaultMemoOptions(){return["employee_email","purpose","category","spent_on","report_number","expense_link"]}static formatMemoPreview(memoStructure,defaultMemoOptions){const time=Date.now(),previewValues={employee_email:"john.doe@acme.com",category:"Meals and Entertainment",purpose:"Client Meeting",merchant:"Pizza Hut",report_number:"C/2021/12/R/1",spent_on:new Date(time).toLocaleDateString(),expense_link:`${environment.N.fyle_app_url}/app/main/#/enterprise/view_expense/`};let memoPreviewText="";const memo=[];return memoStructure.forEach(((field,index)=>{if(field in previewValues){const defaultIndex=defaultMemoOptions.indexOf(memoStructure[index]);memo[defaultIndex]=previewValues[field]}})),memo.forEach(((field,index)=>{memoPreviewText+=field,index+1!==memo.length&&(memoPreviewText+=" - ")})),memoPreviewText}static formatSelectedEmails(emails){return emails.map((option=>option.email))}}AdvancedSettingsModel.filterAdminEmails=(emailToSearch,adminEmails)=>{const adminEmailsList=[];for(const email of emailToSearch)adminEmails.find((item=>item.email===email?adminEmailsList.push(item):null));return adminEmailsList};let ConfigurationAdvancedSettingsComponent=class ConfigurationAdvancedSettingsComponent{constructor(router,advancedSettingsService,formBuilder,toastService,trackingService,workspaceService,mappingService){this.router=router,this.advancedSettingsService=advancedSettingsService,this.formBuilder=formBuilder,this.toastService=toastService,this.trackingService=trackingService,this.workspaceService=workspaceService,this.mappingService=mappingService,this.isLoading=!0,this.redirectLink=branding_config.K9.onboardingArticles.INTACCT.ADVANCED_SETTING,this.intacctLink=branding_config.K9.topLevelArticles.INTACCT,this.saveInProgress=!1,this.ConfigurationCtaText=enum_model.Pw,this.adminEmails=[],this.hours=[],this.memoStructure=[],this.appName=enum_model.lW.INTACCT,this.sessionStartTime=new Date,this.defaultMemoFields=["employee_email","merchant","purpose","category","spent_on","report_number","expense_link"],this.paymentSyncOptions=[{label:"None",value:null},{label:"Export "+branding_config.Wg.brandName+" ACH Payments to Sage Intacct",value:enum_model.o4.FYLE_TO_INTACCT},{label:"Import Sage Intacct Payments into "+branding_config.Wg.brandName,value:enum_model.o4.INTACCT_TO_FYLE}],this.brandingConfig=branding_config.Wg}refreshDimensions(isRefresh){this.mappingService.refreshSageIntacctDimensions().subscribe(),this.mappingService.refreshFyleDimensions().subscribe(),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Refreshing data dimensions from Sage Intacct")}getEmployeeField(){return(new common.TitleCasePipe).transform(this.employeeFieldMapping)}removeFilter(formField){formField.reset(),event?.stopPropagation()}formatMemoPreview(){const time=Date.now(),previewValues={employee_email:"john.doe@acme.com",category:"Meals and Entertainment",purpose:"Client Meeting",merchant:"Pizza Hut",report_number:"C/2021/12/R/1",spent_on:new Date(time).toLocaleDateString(),expense_link:`${environment.N.fyle_app_url}/app/main/#/enterprise/view_expense/`};this.memoPreviewText="";const memo=[];this.memoStructure.forEach(((field,index)=>{if(field in previewValues){const defaultIndex=this.defaultMemoFields.indexOf(this.memoStructure[index]);memo[defaultIndex]=previewValues[field]}})),memo.forEach(((field,index)=>{this.memoPreviewText+=field,index+1!==memo.length&&(this.memoPreviewText=this.memoPreviewText+" - ")}))}createAutoSyncPaymentsWatcher(){this.advancedSettingsForm.controls.autoSyncPayments.valueChanges.subscribe((paymentChanges=>{paymentChanges===enum_model.o4.FYLE_TO_INTACCT?this.advancedSettingsForm.controls.defaultPaymentAccount.setValidators([fesm2020_forms.kI.required]):this.advancedSettingsForm.controls.defaultPaymentAccount.clearValidators()}))}createMemoStructureWatcher(){this.memoStructure=this.advancedSettingsForm.value.setDescriptionField,this.formatMemoPreview(),this.advancedSettingsForm.controls.setDescriptionField.valueChanges.subscribe((memoChanges=>{this.memoStructure=memoChanges,this.formatMemoPreview()}))}getPaymentSyncConfiguration(configurations){let paymentSync="";return configurations.sync_fyle_to_sage_intacct_payments?paymentSync=enum_model.o4.FYLE_TO_INTACCT:configurations.sync_sage_intacct_to_fyle_payments&&(paymentSync=enum_model.o4.INTACCT_TO_FYLE),paymentSync}initializeAdvancedSettingsFormWithData(isSkippedExpense){const findObjectByDestinationId=(array,id)=>array?.find((item=>item.destination_id===id))||null;this.advancedSettingsForm=this.formBuilder.group({scheduleAutoExport:[this.advancedSettings.workspace_schedules?.interval_hours&&this.advancedSettings.workspace_schedules?.enabled?this.advancedSettings.workspace_schedules?.interval_hours:null],email:[this.advancedSettings?.workspace_schedules?.emails_selected?.length>0?AdvancedSettingsModel.filterAdminEmails(this.advancedSettings?.workspace_schedules?.emails_selected,this.adminEmails):[]],search:[],autoSyncPayments:[this.getPaymentSyncConfiguration(this.advancedSettings.configurations)],autoCreateEmployeeVendor:[this.advancedSettings.configurations.auto_create_destination_entity],postEntriesCurrentPeriod:[!!this.advancedSettings.configurations.change_accounting_period],setDescriptionField:[this.advancedSettings.configurations.memo_structure?this.advancedSettings.configurations.memo_structure:this.defaultMemoFields,fesm2020_forms.kI.required],skipSelectiveExpenses:[isSkippedExpense],defaultLocation:[findObjectByDestinationId(this.sageIntacctLocations,this.advancedSettings.general_mappings.default_location.id)],defaultDepartment:[findObjectByDestinationId(this.sageIntacctDepartments,this.advancedSettings.general_mappings.default_department.id)],defaultProject:[findObjectByDestinationId(this.sageIntacctProjects,this.advancedSettings.general_mappings.default_project.id)],defaultClass:[findObjectByDestinationId(this.sageIntacctClasses,this.advancedSettings.general_mappings.default_class.id)],defaultItems:[findObjectByDestinationId(this.sageIntacctDefaultItem,this.advancedSettings.general_mappings.default_item.id)],defaultPaymentAccount:[findObjectByDestinationId(this.sageIntacctPaymentAccount,this.advancedSettings.general_mappings.payment_account.id)],useEmployeeLocation:[this.advancedSettings.general_mappings.use_intacct_employee_locations?this.advancedSettings.general_mappings.use_intacct_employee_locations:null],useEmployeeDepartment:[this.advancedSettings.general_mappings.use_intacct_employee_departments?this.advancedSettings.general_mappings.use_intacct_employee_departments:null]}),this.createAutoSyncPaymentsWatcher(),this.createMemoStructureWatcher()}compareObjects(selectedOption,listedOption){return JSON.stringify(selectedOption)===JSON.stringify(listedOption)}isCCT(){return this.advancedSettingsForm.get("autoSyncPayments")?.value===enum_model.o4.FYLE_TO_INTACCT}initializeSkipExportForm(){this.skipExportForm=this.formBuilder.group({condition1:[""],operator1:[""],value1:[[""]],customFieldType1:[""],join_by:[""],condition2:[""],operator2:[""],value2:[[""]],customFieldType2:[""]})}updateForm(updatedForm){this.skipExportForm=updatedForm}getSettingsAndSetupForm(){this.isLoading=!0,this.isOnboarding=this.router.url.includes("onboarding");const groupedAttributes$=this.mappingService.getGroupedDestinationAttributes(["LOCATION","DEPARTMENT","PROJECT","CLASS","ITEM","PAYMENT_ACCOUNT"]),advancedSettings$=this.advancedSettingsService.getAdvancedSettings(),expenseFilters$=this.advancedSettingsService.getExpenseFilter(),config$=this.mappingService.getConfiguration();for(let i=1;i<=24;i++)this.hours.push({label:`${i} hour${i>1?"s":""}`,value:i});(0,forkJoin.D)({advancedSettings:advancedSettings$,groupedAttributes:groupedAttributes$,expenseFilter:expenseFilters$,configuration:config$}).subscribe((({advancedSettings,groupedAttributes,expenseFilter,configuration})=>{this.advancedSettings=advancedSettings,this.sageIntacctLocations=groupedAttributes.LOCATION,this.sageIntacctDefaultItem=groupedAttributes.ITEM,this.sageIntacctDepartments=groupedAttributes.DEPARTMENT,this.sageIntacctProjects=groupedAttributes.PROJECT,this.sageIntacctClasses=groupedAttributes.CLASS,this.sageIntacctPaymentAccount=groupedAttributes.PAYMENT_ACCOUNT,this.reimbursableExpense=configuration.reimbursable_expenses_object,this.employeeFieldMapping=configuration.employee_field_mapping,this.initializeAdvancedSettingsFormWithData(!!expenseFilter.count),this.initializeSkipExportForm(),this.isLoading=!1}))}getPhase(){return this.isOnboarding?enum_model.q.ONBOARDING:enum_model.q.POST_ONBOARDING}save(){this.saveInProgress=!0;const advancedSettingsPayload=advanced_settings_model.K3.constructPayload(this.advancedSettingsForm);this.advancedSettingsService.postAdvancedSettings(advancedSettingsPayload).subscribe((response=>{this.advancedSettingsForm.value.skipSelectiveExpenses?this.skipExportChild.saveSkipExportFields():(this.advancedSettingsService.deleteExpenseFilter(1).subscribe(),this.advancedSettingsService.deleteExpenseFilter(2).subscribe()),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Advanced settings saved successfully"),this.trackingService.trackTimeSpent(enum_model.T3.IMPORT_SETTINGS_INTACCT,this.sessionStartTime),this.workspaceService.getIntacctOnboardingState()===enum_model.kG.ADVANCED_CONFIGURATION?this.trackingService.integrationsOnboardingCompletion(enum_model.kG.ADVANCED_CONFIGURATION,3,advancedSettingsPayload):this.trackingService.intacctUpdateEvent(enum_model.fd.ADVANCED_SETTINGS_INTACCT,{phase:this.getPhase(),oldState:this.advancedSettings,newState:response}),this.saveInProgress=!1,this.isOnboarding&&(this.workspaceService.setIntacctOnboardingState(enum_model.kG.ADVANCED_CONFIGURATION),this.router.navigate(["/integrations/intacct/onboarding/done"]))}),(()=>{this.saveInProgress=!1,this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Error saving advanced settings, please try again later")}))}getAdminEmails(){this.isLoading=!0,this.advancedSettingsService.getAdditionalEmails().subscribe((emailResponse=>{this.adminEmails=emailResponse,this.getSettingsAndSetupForm()}))}ngOnInit(){this.getAdminEmails()}};ConfigurationAdvancedSettingsComponent.ctorParameters=()=>[{type:router.F0},{type:SiAdvancedSettingService},{type:fesm2020_forms.qu},{type:integrations_toast_service.d},{type:tracking_service.e},{type:SiWorkspaceService},{type:SiMappingsService}],ConfigurationAdvancedSettingsComponent.propDecorators={skipExportChild:[{type:core.ViewChild,args:["skipExportChild"]}]},ConfigurationAdvancedSettingsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-configuration-advanced-settings",template:'<div *ngIf="isLoading" class="tw-flex tw-justify-center tw-items-center tw-h-screen">\n    <app-loader></app-loader>\n</div>\n<div *ngIf="!isLoading" class="configuration--contents tw-border-separator tw-mt-6">\n    <div>\n    <app-configuration-step-header \n    [headerText]="\'Advanced Settings\'"\n    [contentText]="\'In this section, you can customize the integration based on your accounting requirements.\'"\n    [redirectLink]="redirectLink"\n    [showSyncButton]="isOnboarding"\n    [appName]="appName"\n    (refreshDimension)="refreshDimensions($event)"></app-configuration-step-header>\n    </div>\n\n    <form [formGroup]="advancedSettingsForm">\n        <div class="tw-p-24-px">\n            <div class="tw-mb-16-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500 ">Automation</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4">\n                        You can automate the export and sync of your data in this section.\n                    </h5>\n                </div>\n            </div>\n            <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-select-field\n                    [form]="advancedSettingsForm"\n                    [isFieldMandatory]="false"\n                    [mandatoryErrorListName]="\'automatic export method\'"\n                    [label]="\'Schedule Automatic Export\'"\n                    [subLabel]="\'Set a frequency based on how often you want your expenses in \' + brandingConfig.brandName + \' to be exported to Sage Intacct.\'"\n                    [options]="hours"\n                    [iconPath]="\'email\'"\n                    [showClearIcon]="true"\n                    [placeholder]="\'Set Schedule\'"\n                    [formControllerName]="\'scheduleAutoExport\'">\n                </app-configuration-select-field>\n                <app-email-multi-select-field\n                    [form]="advancedSettingsForm"\n                    [label]="\'Send Error Notification to\'"\n                    [isFieldMandatory]="false"\n                    [mandatoryErrorListName]="\'email for error notification\'"\n                    [subLabel]="\'Select or add an email address to notify upon import failure or integration error.\'"\n                    [options]="adminEmails"\n                    [iconPath]="\'expense\'"\n                    [placeholder]="\'Select email address\'"\n                    [formControllerName]="\'email\'">\n                </app-email-multi-select-field>\n            </div>\n            <div *ngIf="reimbursableExpense===\'EXPENSE_REPORT\' || reimbursableExpense===\'BILL\'" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-select-field\n                [form]="advancedSettingsForm"\n                [isFieldMandatory]="false"\n                [mandatoryErrorListName]="\'payment sync method\'"\n                [label]="\'Auto-Sync Payment Status for Reimbursable Expenses\'"\n                [subLabel]="\'You can set the sync preference based on whether you are handling the payments for your employees within \' + brandingConfig.brandName + \' or outside \' + brandingConfig.brandName + \'.\'"\n                [options]="paymentSyncOptions"\n                [iconPath]="\'synced\'"\n                [placeholder]="\'Select payment sync method\'"\n                [formControllerName]="\'autoSyncPayments\'"></app-configuration-select-field>\n                <div *ngIf="isCCT()">\n                    <app-configuration-select-field\n                    [form]="advancedSettingsForm"\n                    [isFieldMandatory]="true"\n                    [mandatoryErrorListName]="\'payment account\'"\n                    [label]="\'Select Payment Account\'"\n                    [subLabel]="\'Select a Payment Account handling the payments for your employees within \' + brandingConfig.brandName + \' or outside \' + brandingConfig.brandName + \'.\'"\n                    [destinationAttributes]="sageIntacctPaymentAccount"\n                    [iconPath]="\'expense\'"\n                    [placeholder]="\'Select Payment Account\'"\n                    [formControllerName]="\'defaultPaymentAccount\'"></app-configuration-select-field>\n                </div>\n            </div>\n        </div>\n\n        <div class="tw-mb-16-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500 ">Other Preferences</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-10-px !tw-font-400 !tw-leading-4 tw-pb-4">\n                        Based on your preference, you can choose whether you want to create any new records in Sage Intacct from {{brandingConfig.brandName}} (when there is no employee record found, or when the accounting period is closed.)\n                    </h5>\n                </div>\n            </div>\n            <div *ngIf="employeeFieldMapping" class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-toggle-field \n                [form]="advancedSettingsForm"\n                [label]="\'Auto-Create \' + getEmployeeField()" \n                [subLabel]="\'When matching \' + getEmployeeField() +\' record is not found for an employee in \' + brandingConfig.brandName + \', the integration will auto-create a new record in Sage Intacct.\'"\n                [formControllerName]="\'autoCreateEmployeeVendor\'"></app-configuration-toggle-field>\n            </div>\n            <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-toggle-field \n                [form]="advancedSettingsForm"\n                [label]="\'Post Entries in the Current Accounting Period\'" \n                [subLabel]="\'If there are expenses for which the accounting period is closed in Sage Intacct, you can export those to the current month by enabling this option.\'" \n                [formControllerName]="\'postEntriesCurrentPeriod\'"></app-configuration-toggle-field>\n            </div>\n        </div>\n\n        <div class="tw-mb-16-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500 ">Customization</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-10-px !tw-font-400 !tw-leading-4 tw-pb-4">\n                        In this section, you can customize the data that you\'d like to export from {{brandingConfig.brandName}} to Sage Intacct. You can choose what data points need to be exported and what shouldn\'t be.\n                    </h5>\n                </div>\n            </div>\n            <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-multi-select\n                [form]="advancedSettingsForm"\n                [label]="\'Set the Description Field in Sage Intacct\'"\n                [subLabel]="\'You can choose from a list of available data points that you would like to export to the description field in Sage Intacct and re-order them as per your requirement.\'"\n                [options]="defaultMemoFields"\n                [iconPath]="\'expense\'"\n                [placeholder]="\'Select Description\'"\n                [formControllerName]="\'setDescriptionField\'"></app-configuration-multi-select>\n                <div class="tw-pl-60-px tw-pr-24-px tw-pb-24-px">\n                    <p class="tw-text-14-px tw-mb-12-px tw-text-faded-text-color">Preview of the Description Field</p>\n                    <div class="tw-bg-disabled-bg-color tw-rounded-4-px tw-text-14-px tw-py-10-px tw-px-16-px tw-text-faded-text-color">\n                        <span>{{ memoPreviewText }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class="tw-mt-16-px tw-bg-white tw-border tw-border-solid tw-border-separator tw-rounded-12-px">\n                <app-configuration-toggle-field \n                [form]="advancedSettingsForm"\n                [label]="\'Skip Selective Expenses from being Exported to Sage Intacct\'" \n                [subLabel]="\'The integration will export all the expenses once they reach their export state. If you would like to skip few expenses from being exported, set up a conditional rule here.\'" \n                [redirectLink]="intacctLink"\n                [formControllerName]="\'skipSelectiveExpenses\'"></app-configuration-toggle-field>\n                <div *ngIf="advancedSettingsForm.value.skipSelectiveExpenses">\n                    <app-skip-export\n                    #skipExportChild\n                    [enableSkipExport]="advancedSettingsForm.value.skipSelectiveExpenses" \n                    [skipExportForm]="skipExportForm" \n                    (skipExportFormChange)="updateForm($event)">\n                  </app-skip-export>                  \n                </div>\n            </div>\n        </div>\n        <div class="tw-mb-16-px">\n            <div class="container">\n                <div class="sub-text">\n                    <h4 class="tw-text-16-px !tw-font-500 ">Default Field Values</h4>\n                    <h5 class="!tw-text-faded-text-color tw-text-14-px tw-pt-8-px !tw-font-400 !tw-leading-4">\n                        If you\'ve made a field mandatory in Sage Intacct but don\'t collect a value from your employees in the expense form, you can set a default value here to be added to all the expenses. For Location and Department, you can opt to use the values from your employee records in Sage Intacct.\n                    </h5>\n                </div>\n            </div>\n            <div class="tw-pt-28-px tw-pl-6 field-label">\n                <div><label>Default Location</label></div>\n                <div class="tw-pt-2">\n                    <p-dropdown appendTo="body" [options]="sageIntacctLocations" optionLabel="value" \n                    formControlName="defaultLocation" placeholder="Select Location" [ngClass]="{\'selectedItem\': advancedSettingsForm.controls.defaultLocation.value, \'filterDropdown\': !advancedSettingsForm.controls.defaultLocation.value}">\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.value }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(advancedSettingsForm.controls.defaultLocation)"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                    <span class="tw-pl-24-px">\n                        <input formControlName="useEmployeeLocation" type="checkbox" />\n                        <label class="tw-pl-8-px" for="checkbox">Use Employee\'s Location in Sage Intacct</label>\n                    </span>\n                </div>  \n              </div>\n\n              <div class="tw-pt-20-px tw-pl-6 field-label">\n                <div><label>Default Department</label></div>\n                <div class="tw-pt-2">\n                  <p-dropdown appendTo="body" [options]="sageIntacctDepartments" optionLabel="value"\n                  formControlName="defaultDepartment" placeholder="Select Department" [ngClass]="{\'selectedItem\': advancedSettingsForm.controls.defaultDepartment.value, \'filterDropdown\': !advancedSettingsForm.controls.defaultDepartment.value}">\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.value }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(advancedSettingsForm.controls.defaultDepartment)"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                    <span class="tw-pl-24-px">\n                        <input formControlName="useEmployeeDepartment" type="checkbox" />\n                        <label class="tw-pl-8-px" for="checkbox">Use Employee\'s Department in Sage Intacct</label>\n                    </span>\n                </div>  \n              </div> \n\n              <div class="tw-pt-20-px tw-pl-6 field-label">\n                <div><label>Default Project</label></div>\n                <div class="tw-pt-2">\n                  <p-dropdown appendTo="body" [options]="sageIntacctProjects" optionLabel="value"\n                  formControlName="defaultProject" placeholder="Select Project" [ngClass]="{\'selectedItem\': advancedSettingsForm.controls.defaultProject.value, \'filterDropdown\': !advancedSettingsForm.controls.defaultProject.value}">\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.value }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(advancedSettingsForm.controls.defaultProject)"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                </div>  \n              </div> \n\n              <div class="tw-pt-20-px tw-pl-6 field-label">\n                <div><label>Default Class</label></div>\n                <div class="tw-pt-2">\n                  <p-dropdown appendTo="body" [options]="sageIntacctClasses" optionLabel="value"\n                  formControlName="defaultClass" placeholder="Select Class" [ngClass]="{\'selectedItem\': advancedSettingsForm.controls.defaultClass.value, \'filterDropdown\': !advancedSettingsForm.controls.defaultClass.value}">\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.value }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(advancedSettingsForm.controls.defaultClass)"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                </div>  \n              </div> \n\n              <div class="tw-pt-20-px tw-pl-6 field-label">\n                <div><label>Default Items</label></div>\n                <div class="tw-pt-2">\n                  <p-dropdown appendTo="body" [options]="sageIntacctDefaultItem" optionLabel="value"\n                  formControlName="defaultItems" placeholder="Select Item" [ngClass]="{\'selectedItem\': advancedSettingsForm.controls.defaultItems.value, \'filterDropdown\': !advancedSettingsForm.controls.defaultItems.value}">\n                        <ng-template pTemplate="selectedItem" let-item>\n                            <div class="tw-flex tw-justify-between tw-items-center">\n                                <span>\n                                    {{ item.value }}\n                                </span>\n                                <i class="pi pi-times" (click)="removeFilter(advancedSettingsForm.controls.defaultItems)"></i>\n                            </div>\n                        </ng-template>\n                    </p-dropdown>\n                </div>  \n              </div>\n        </div>\n    </div>\n        <div>\n            <app-configuration-step-footer [ctaText] = "!saveInProgress ? (isOnboarding ? ConfigurationCtaText.SAVE_AND_CONTINUE : ConfigurationCtaText.SAVE) : ConfigurationCtaText.SAVING" (save)="save()" [isButtonDisabled]="!advancedSettingsForm.valid || (advancedSettingsForm.value.skipSelectiveExpenses ? !skipExportForm.valid : false)"></app-configuration-step-footer>\n        </div>\n    </form>\n</div>',styles:[".container {\n  display: flex;\n  justify-content: center;\n  border-radius: 8px;\n  border: 1px solid var(--grayscale-light-border, #ECECEE);\n  background: var(--grayscale-background, #FAFCFF);\n  padding: 24px;\n  flex-direction: column;\n  align-items: flex-start;\n  max-width: auto; /* You can adjust this value as needed */\n}\n\n.field-label {\n  font-size: 14px;\n  color: var(--faded-text-color);\n}\n\n:host ::ng-deep .p-multiselect-panel .p-multiselect-items .p-multiselect-item .p-checkbox {\n  margin-bottom: 0px !important;\n  margin-top: 2px !important;\n}\n\np-dropdown .p-dropdown-open {\n  width: 360px !important;\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n  display: none !important;\n}"]})],ConfigurationAdvancedSettingsComponent);let SkipExportComponent=class SkipExportComponent{constructor(formBuilder,advancedSettingsService){this.formBuilder=formBuilder,this.advancedSettingsService=advancedSettingsService,this.skipExportFormChange=new core.EventEmitter,this.isLoading=!0,this.isDisabledChip1=!1,this.isDisabledChip2=!1,this.showAdditionalCondition=!1,this.showAddButton=!0,this.joinByOptions=[{value:advanced_settings_model.qY.AND},{value:advanced_settings_model.qY.OR}],this.customOperatorOptions=[{label:"Is",value:advanced_settings_model._L.Is},{label:"Is empty",value:advanced_settings_model._L.IsEmpty},{label:"Is not empty",value:advanced_settings_model._L.IsNotEmpty}],this.customSelectOperatorOptions=[{label:"is",value:"iexact"},{label:"is not",value:"not_in"}],this.valueOption1=[],this.valueOption2=[]}skipExportWatcher(){this.skipExportForm.valueChanges.subscribe((()=>{this.skipExportFormChange.emit(this.skipExportForm)})),this.enableSkipExport?(this.skipExportForm.controls.condition1.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.operator1.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.value1.setValidators(fesm2020_forms.kI.required)):(this.skipExportForm.reset(),this.skipExportForm.controls.condition1.clearValidators(),this.skipExportForm.controls.operator1.clearValidators(),this.skipExportForm.controls.condition1.setValue(null),this.skipExportForm.controls.operator1.setValue(null),this.skipExportForm.controls.value1.clearValidators(),this.skipExportForm.controls.value1.setValue(null),this.skipExportForm.controls.join_by.clearValidators(),this.skipExportForm.controls.join_by.setValue(null),this.skipExportForm.controls.condition2.clearValidators(),this.skipExportForm.controls.operator2.clearValidators(),this.skipExportForm.controls.condition2.setValue(null),this.skipExportForm.controls.operator2.setValue(null),this.skipExportForm.controls.value2.clearValidators(),this.skipExportForm.controls.value2.setValue(null),this.showAdditionalCondition=!1,this.showAddButton=!0)}setConditionFields(response,conditionArray){response.results.forEach((element=>{const selectedConditionOption=this.conditionFieldOptions.filter((fieldOption=>fieldOption.field_name===element.condition))[0];conditionArray.push(selectedConditionOption)}))}setOperatorFieldOptions(response,conditionArray){conditionArray.length&&(response.results[0].is_custom?this.setCustomOperatorOptions(response.results[0].rank,response.results[0].custom_field_type):this.operatorFieldOptions1=this.setDefaultOperatorOptions(response.results[0].condition),null!==response.results[0].join_by&&(response.results[1].is_custom?this.setCustomOperatorOptions(response.results[1].rank,response.results[1].custom_field_type):this.operatorFieldOptions2=this.setDefaultOperatorOptions(response.results[1].condition)))}setSkippedConditions(response,conditionArray){response.count>0?(this.skippedCondition1=conditionArray[0].field_name,response.count>1&&response.results[0].join_by?this.skippedCondition2=conditionArray[1].field_name:this.skippedCondition2=""):(this.skippedCondition1="",this.skippedCondition2="")}getSelectedOperator(operator,value,condition){switch(operator){case"isnull":return"True"===value?"is_empty":"is_not_empty";case"in":return"iexact";default:return operator}}getFieldValue(value,condition,rank){return"DATE"===condition.type?new Date(value[0]):"report_title"===condition.field_name?value[0]:(1===rank?this.valueOption1=value:2===rank&&(this.valueOption2=value),"")}resetAdditionalFilter(){this.skipExportForm.controls.join_by.reset(),this.skipExportForm.controls.condition2.reset(),this.valueOption2=[]}resetFields(operator,value,conditionSelected,rank){operator.reset(),value.reset(),1===rank?this.valueOption1=[]:2===rank&&(this.valueOption2=[]),null!==conditionSelected&&(!0===conditionSelected.is_custom?this.setCustomOperatorOptions(rank,conditionSelected.type):!1===conditionSelected.is_custom&&(1===rank?this.operatorFieldOptions1=this.setDefaultOperatorOptions(conditionSelected.field_name):2===rank&&(this.operatorFieldOptions2=this.setDefaultOperatorOptions(conditionSelected.field_name))))}updateAdditionalFilterVisibility(show){this.showAdditionalCondition=show,this.showAddButton=!show,this.showAdditionalCondition&&(this.skipExportForm.controls.join_by.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.condition2.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.operator2.setValidators(fesm2020_forms.kI.required),0===this.valueOption2.length&&this.skipExportForm.controls.value2.setValidators(fesm2020_forms.kI.required))}remCondition(){this.showAdditionalCondition=!1,this.showAddButton=!0,this.resetAdditionalFilter(),this.skipExportForm.controls.join_by.clearValidators(),this.skipExportForm.controls.join_by.setValue(null),this.skipExportForm.controls.condition2.clearValidators(),this.skipExportForm.controls.condition2.setValue(null),this.skipExportForm.controls.operator2.clearValidators(),this.skipExportForm.controls.operator2.setValue(null),this.skipExportForm.controls.value2.clearValidators(),this.skipExportForm.controls.value2.setValue(null)}checkValidationCondition(){const condition1=this.skipExportForm.controls.condition1,condition2=this.skipExportForm.controls.condition2;return!!(this.showAdditionalCondition&&condition1.valid&&condition2.valid&&condition1.value?.field_name===condition2.value?.field_name)&&(this.skipExportForm.controls.operator2.setValue(null),!0)}showValueHeader1(){return"is_empty"!==this.skipExportForm.value.operator1&&"is_not_empty"!==this.skipExportForm.value.operator1}showValueHeader2(){return"is_empty"!==this.skipExportForm.value.operator2&&"is_not_empty"!==this.skipExportForm.value.operator2}showInputField1(){return"report_title"===this.skipExportForm.value.condition1?.field_name&&("is_empty"!==this.skipExportForm.value.operator1||"is_not_empty"!==this.skipExportForm.value.operator1)}showChipField1(){return"report_title"!==this.skipExportForm.value.condition1?.field_name&&(!this.skipExportForm.value.condition1||"SELECT"===this.skipExportForm.value.condition1.type||"TEXT"===this.skipExportForm.value?.condition1?.type||"NUMBER"===this.skipExportForm.value?.condition1?.type)&&"is_empty"!==this.skipExportForm.value.operator1&&"is_not_empty"!==this.skipExportForm.value.operator1}showDateField1(){return"DATE"===this.skipExportForm.value?.condition1?.type&&("is_empty"!==this.skipExportForm.value.operator1||"is_not_empty"!==this.skipExportForm.value.operator1)}showInputField2(){return this.skipExportForm.value?.condition2?.field_name&&"report_title"===this.skipExportForm.value?.condition2?.field_name&&("is_empty"!==this.skipExportForm.value.operator2||"is_not_empty"!==this.skipExportForm.value.operator2)}showChipField2(){return"report_title"!==this.skipExportForm.value?.condition2?.field_name&&(!this.skipExportForm.value?.condition2||"SELECT"===this.skipExportForm.value?.condition2?.type||"TEXT"===this.skipExportForm.value?.condition2?.type||"NUMBER"===this.skipExportForm.value?.condition2?.type)&&"is_empty"!==this.skipExportForm.value.operator2&&"is_not_empty"!==this.skipExportForm.value.operator2}showDateField2(){return"DATE"===this.skipExportForm.value?.condition2?.type&&("is_empty"!==this.skipExportForm.value.operator2||"is_not_empty"!==this.skipExportForm.value.operator2)}saveSkipExportFields(){if(!this.skipExportForm.valid)return;const valueField=this.skipExportForm.getRawValue();if(this.showAddButton&&this.expenseFilters.length>1&&this.advancedSettingsService.deleteExpenseFilter(this.expenseFilters[1].rank).subscribe((skipExport1=>{})),this.enableSkipExport){if(!valueField.condition1.field_name)return;"report_title"!==valueField.condition1.field_name&&"iexact"===valueField.operator1&&(valueField.operator1="in"),valueField.join_by&&(valueField.join_by=valueField.join_by.value,"report_title"!==valueField.condition2.field_name&&"iexact"===valueField.operator2&&(valueField.operator2="in")),!0===valueField.condition1.is_custom&&("is_empty"===valueField.operator1?(valueField.value1=["True"],valueField.operator1="isnull"):"is_not_empty"===valueField.operator1&&(valueField.value1=["False"],valueField.operator1="isnull")),"spent_at"===valueField.condition1.field_name&&(valueField.value1=new Date(valueField.value1).toISOString().split("T")[0]+"T17:00:00.000Z"),"string"==typeof valueField.value1&&(valueField.value1=[valueField.value1]);const payload1=function constructPayload1(valueField,valueOption1){return{condition:valueField.condition1.field_name,operator:valueField.operator1,values:"DATE"===valueField.condition1.type||"isnull"===valueField.operator1||"report_title"===valueField.condition1.field_name?valueField.value1:valueOption1,rank:1,join_by:valueField.join_by?valueField.join_by:null,is_custom:valueField.condition1.is_custom,custom_field_type:valueField.condition1.is_custom?valueField.condition1.type:null}}(valueField,this.valueOption1);this.advancedSettingsService.postExpenseFilter(payload1).subscribe((skipExport1=>{if(valueField.condition2&&valueField.operator2){"spent_at"===valueField.condition2.field_name&&(valueField.value2=new Date(valueField.value2).toISOString().split("T")[0]+"T17:00:00.000Z"),!0===valueField.condition2.is_custom&&("is_empty"===valueField.operator2?(valueField.value2=["True"],valueField.operator2="isnull"):"is_not_empty"===valueField.operator2&&(valueField.value2=["False"],valueField.operator2="isnull")),"string"==typeof valueField.value2&&(valueField.value2=[valueField.value2]);const payload2=function constructPayload2(valueField,valueOption2){return{condition:valueField.condition2.field_name,operator:valueField.operator2,values:"DATE"===valueField.condition2.type||"isnull"===valueField.operator2||"report_title"===valueField.condition2.field_name?valueField.value2:valueOption2,rank:2,join_by:null,is_custom:valueField.condition2.is_custom,custom_field_type:valueField.condition2.is_custom?valueField.condition2.type:null}}(valueField,this.valueOption2);this.advancedSettingsService.postExpenseFilter(payload2).subscribe((skipExport2=>{}))}}))}else this.advancedSettingsService.deleteExpenseFilter(this.expenseFilters[0].rank).subscribe((skipExport1=>{}))}setDefaultOperatorOptions(conditionField){const operatorList=[];return"claim_number"===conditionField||"employee_email"===conditionField||"report_title"===conditionField?operatorList.push({value:"iexact",label:"is"}):"spent_at"===conditionField&&(operatorList.push({value:"lt",label:"is before"}),operatorList.push({value:"lte",label:"is on or before"})),"report_title"===conditionField&&operatorList.push({value:"icontains",label:"contains"}),operatorList}setCustomOperatorOptions(rank,type){"SELECT"!==type?1===rank?this.operatorFieldOptions1=this.customOperatorOptions:2===rank&&(this.operatorFieldOptions2=this.customOperatorOptions):1===rank?this.operatorFieldOptions1=this.customSelectOperatorOptions:2===rank&&(this.operatorFieldOptions2=this.customSelectOperatorOptions)}conditionFieldWatcher(){this.skipExportForm.controls.condition1.valueChanges.subscribe((conditionSelected=>{this.resetFields(this.skipExportForm.controls.operator1,this.skipExportForm.controls.value1,conditionSelected,1)})),this.skipExportForm.controls.condition2.valueChanges.subscribe((conditionSelected=>{this.resetFields(this.skipExportForm.controls.operator2,this.skipExportForm.controls.value2,conditionSelected,2)}))}operatorFieldWatcher(){this.skipExportForm.controls.operator1.valueChanges.subscribe((operatorSelected=>{this.valueOption1=[],"is_empty"===operatorSelected||"is_not_empty"===operatorSelected?(this.isDisabledChip1=!0,this.skipExportForm.controls.value1.clearValidators(),this.skipExportForm.controls.value1.setValue(null)):(this.isDisabledChip1=!1,this.skipExportForm.controls.value1.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.value1.setValue(null,{emitEvent:!1}))})),this.skipExportForm.controls.operator2.valueChanges.subscribe((operatorSelected=>{this.valueOption2=[],"is_empty"===operatorSelected||"is_not_empty"===operatorSelected?(this.isDisabledChip2=!0,this.skipExportForm.controls.value2.clearValidators(),this.skipExportForm.controls.value2.setValue(null)):(this.isDisabledChip2=!1,this.skipExportForm.controls.value2.setValidators([fesm2020_forms.kI.required]),this.skipExportForm.controls.value2.setValue(null,{emitEvent:!1}))}))}fieldWatcher(){this.skipExportWatcher(),this.conditionFieldWatcher(),this.operatorFieldWatcher()}compareObjects(selectedOption,listedOption){return JSON.stringify(selectedOption)===JSON.stringify(listedOption)}setupSkipExportForm(response,conditionArray){this.isLoading=!0,this.showExpenseFilters=response.count>0,this.setConditionFields(response,conditionArray),this.setOperatorFieldOptions(response,conditionArray),this.setSkippedConditions(response,conditionArray);let[selectedOperator1,valueFC1,customFieldTypeFC1]=["","",""],[selectedOperator2,valueFC2]=["",""],joinByFC="";response.results.forEach(((result,index)=>{0===index?(selectedOperator1=this.getSelectedOperator(result.operator,result.values[0],conditionArray[0]),"is_empty"!==selectedOperator1&&"is_not_empty"!==selectedOperator1?valueFC1=this.getFieldValue(result.values,conditionArray[0],result.rank):this.isDisabledChip1=!0,customFieldTypeFC1=result.custom_field_type):1===index&&null!==response.results[0].join_by&&(selectedOperator2=this.getSelectedOperator(result.operator,result.values[0],conditionArray[1]),joinByFC=response.results[0].join_by,"is_empty"!==selectedOperator2&&"is_not_empty"!==selectedOperator2?valueFC2=this.getFieldValue(result.values,conditionArray[1],result.rank):this.isDisabledChip2=!0)})),this.skipExportForm=this.formBuilder.group({condition1:[conditionArray.length>0?conditionArray[0]:""],operator1:[selectedOperator1],value1:[valueFC1],customFieldType1:[customFieldTypeFC1],join_by:[{value:joinByFC}],condition2:[joinByFC?conditionArray[1]:""],operator2:[joinByFC&&selectedOperator2?selectedOperator2:""],value2:[valueFC2],customFieldType2:joinByFC?[response.results[1].custom_field_type]:[""]}),response.count&&(this.skipExportForm.controls.condition1.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.operator1.setValidators(fesm2020_forms.kI.required),this.valueOption1.length||"is_empty"===selectedOperator1||"is_not_empty"===selectedOperator1||this.skipExportForm.controls.value1.setValidators(fesm2020_forms.kI.required),2===response.count&&(this.showAdditionalCondition=!0,this.showAddButton=!1,this.skipExportForm.controls.condition2.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.operator2.setValidators(fesm2020_forms.kI.required),this.skipExportForm.controls.join_by.setValidators(fesm2020_forms.kI.required),this.valueOption2.length||"is_empty"===selectedOperator2||"is_not_empty"===selectedOperator2||this.skipExportForm.controls.value2.setValidators(fesm2020_forms.kI.required))),this.fieldWatcher(),this.isLoading=!1}getSettingsAndSetupForm(){(0,forkJoin.D)([this.advancedSettingsService.getExpenseFilter(),this.advancedSettingsService.getFyleCustomFields()]).subscribe((responses=>{this.expenseFilters=responses[0].results,this.conditionFieldOptions=responses[1],this.setupSkipExportForm(responses[0],[])}))}ngOnInit(){this.getSettingsAndSetupForm()}};SkipExportComponent.ctorParameters=()=>[{type:fesm2020_forms.qu},{type:SiAdvancedSettingService}],SkipExportComponent.propDecorators={enableSkipExport:[{type:core.Input}],skipExportForm:[{type:core.Input}],skipExportFormChange:[{type:core.Output}]},SkipExportComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-skip-export",template:'<div *ngIf="isLoading">\n</div>\n<div *ngIf="enableSkipExport && !isLoading">\n    <div class="tw-flex tw-flex-col">\n      <form [formGroup]="skipExportForm" class="tw-flex tw-flex-col tw-pl-24-px">\n            <div class="tw-flex">\n                <div class="tw-ml-120-px tw-w-200-px tw-mr-6-px fields-header">\n                    Condition\n                    <span class="tw-text-mandatory-field-color">*</span>\n                </div>\n                  <div class="tw-w-180-px tw-mr-24-px fields-header">\n                    Operator\n                    <span class="tw-text-mandatory-field-color">*</span>\n                </div>\n                <div class="tw-w-296-px fields-header" *ngIf="showValueHeader1()">\n                  Value\n                  <span class="tw-text-mandatory-field-color">*</span>\n                </div>\n            </div>\n            <div class="tw-flex dropdown-row tw-mt-8-px">\n              <p class="tw-text-14-px tw-text-sub-text-color tw-pt-6-px">Where</p>\n              <div class="tw-ml-80-px tw-mr-24-px">\n                <p-dropdown appendTo="body" [options]="conditionFieldOptions" formControlName="condition1" placeholder="Select Condition">\n                  \x3c!-- For options --\x3e\n                  <ng-template let-option pTemplate="item">\n                    {{ option.field_name | snakeCaseToSpaceCase | titlecase }}\n                  </ng-template>\n                  \x3c!-- For selected option --\x3e\n                  <ng-template let-selectedOption pTemplate="selectedItem">\n                    {{ selectedOption.field_name | snakeCaseToSpaceCase | titlecase }}\n                  </ng-template>\n                </p-dropdown>                               \n                <app-mandatory-error-message *ngIf="skipExportForm.controls.condition1.touched && !skipExportForm.controls.condition1.valid"\n                [customErrorMessage]="\'Please select the condition\'"></app-mandatory-error-message>\n              </div>\n              <div class="tw-mr-24-px">\n                <p-dropdown appendTo="body" [options]="operatorFieldOptions1" formControlName="operator1" placeholder="Select Operator"></p-dropdown>\n                <app-mandatory-error-message *ngIf="skipExportForm.controls.operator1.touched && !skipExportForm.controls.operator1.valid"\n                [customErrorMessage]="\'Please select the operator\'"></app-mandatory-error-message>\n              </div>\n              <div class="tw-w-296-px" *ngIf="showInputField1()">\n                <input type="text" formControlName="value1" class="value-input-field" placeholder="Enter Value">\n              </div>\n              <div class="tw-w-296-px" *ngIf="showDateField1()">\n                <p-calendar formControlName="value1" [readonlyInput]="true" placeholder="Select Date"></p-calendar>\n              </div>\n              <div class="tw-w-296-px" *ngIf="showChipField1()">\n                <p-chips [addOnBlur]="true" styleClass="tw-w-[296px]" [(ngModel)]="valueOption1" formControlName="value1" separator="," placeholder="Enter Value"></p-chips>\n                <small class="chip-hint"><br>Separate your values with a comma or enter key.</small>\n              </div>\n        </div>\n  \n        <div *ngIf="showAdditionalCondition" class="tw-pb-24-px">\n          <div class="tw-flex tw-ml-120-px tw-mt-8-px">\n              <div class="tw-w-200-px tw-mr-6-px fields-header">\n                  Condition\n                  <span class="tw-text-mandatory-field-color">*</span>\n              </div>\n                <div class="tw-w-180-px fields-header tw-mr-24-px">\n                  Operator\n                <span class="tw-text-mandatory-field-color">*</span>\n              </div>\n              <div class="tw-w-296-px fields-header" *ngIf="showValueHeader2()">\n                Value\n                <span class="tw-text-mandatory-field-color">*</span>\n              </div>\n          </div>\n          <div class="tw-flex">\n            <div class="joinby-field">\n              <p-dropdown optionLabel="value" appendTo="body" class="joinby-field" [options]="joinByOptions" formControlName="join_by" placeholder="Join by">\n                <ng-template let-value pTemplate="selectedItem" >\n                  {{ value.value }}\n                </ng-template>\n                <ng-template let-value pTemplate="item">\n                  {{ value.value }}\n                </ng-template>\n              </p-dropdown>\n            </div>\n            <div class="tw-ml-24-px tw-mr-24-px">\n              <p-dropdown appendTo="body" [options]="conditionFieldOptions" formControlName="condition2" placeholder="Select Condition">\n                \x3c!-- For options --\x3e\n                <ng-template let-option pTemplate="item">\n                  {{ option.field_name | snakeCaseToSpaceCase | titlecase }}\n                </ng-template>\n                \x3c!-- For selected option --\x3e\n                <ng-template let-selectedOption pTemplate="selectedItem">\n                  {{ selectedOption.field_name | snakeCaseToSpaceCase | titlecase }}\n                </ng-template>\n              </p-dropdown>                            \n              <app-mandatory-error-message *ngIf="skipExportForm.controls.condition2.touched && !skipExportForm.controls.condition2.valid"\n              [customErrorMessage]="\'Please select the condition\'"></app-mandatory-error-message>\n            </div>\n            <div class="tw-mr-24-px">\n              <p-dropdown appendTo="body" [options]="operatorFieldOptions2" formControlName="operator2" placeholder="Select Operator"></p-dropdown>\n              <app-mandatory-error-message *ngIf="skipExportForm.controls.operator2.touched && !skipExportForm.controls.operator2.valid"\n              [customErrorMessage]="\'Please select the operator\'"></app-mandatory-error-message>\n            </div>\n            <div *ngIf="showInputField2()" class="tw-w-296-px">\n              <input type="text" formControlName="value2" placeholder="Enter a value" class="border p-2 rounded value-input-field" placeholder="Enter Value">\n            </div>\n            <div *ngIf="showChipField2()" class="tw-w-296-px">\n              <p-chips [addOnBlur]="true" styleClass="tw-w-[296px]" [(ngModel)]="valueOption2" formControlName="value2" placeholder="Enter Value"></p-chips>\n              <small class="chip-hint"><br>Separate your values with a comma or enter key.</small>\n            </div>\n            <div *ngIf="showDateField2()" class="tw-w-296-px">\n              <p-calendar formControlName="value2" [readonlyInput]="true" placeholder="Select Date"></p-calendar>\n            </div>\n            <img class="delete-icon" src="assets/icons/delete.svg" (click)="remCondition()" p-tooltip="Remove Condition">\n          </div>\n          <div class=" tw-text-mandatory-field-color" *ngIf="checkValidationCondition()">\n            <p>*Condition selected should be distinct.</p>\n          </div>\n        </div>\n        <div class="tw-flex items-center tw-text-mandatory-field-color tw-pt-12-px tw-pb-24-px" *ngIf="showAddButton">\n          <img src="assets/icons/add.svg" (click)="updateAdditionalFilterVisibility(true)">\n          <a class="add-row-text tw-cursor-pointer tw-pl-8-px tw-text-14-px" (click)="updateAdditionalFilterVisibility(true)">\n            Add More Fields\n          </a>\n        </div>\n      </form>\n    </div>\n</div>\n  ',styles:[".fields-header {\n  font-size: 14px;\n  color: #5a5d72;\n}\n\n.delete-icon {\n  text-align: center;\n  cursor: pointer;\n  max-width: 20px;\n  max-height: 20px;\n  margin-left: 26.5px;\n}\n\n.value-input-field {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 6px 10px;\n  display: inline-flex;\n  align-items: center;\n  width: 296px !important;\n}\n\n:host ::ng-deep .joinby-field .p-dropdown {\n  width: 98px !important;\n  height: 38px !important;\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger-icon {\n  margin-right: 12px;\n  width: auto;\n  font-size: 12px;\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n  width: auto;\n}\n\n:host ::ng-deep .p-calendar .p-inputtext {\n  height: 40px !important;\n  width: 360px !important;\n  cursor: pointer !important;\n  border-style: solid !important;\n  padding-top: 10px !important;\n  padding-bottom: 10px !important;\n  padding-left: 14px !important;\n  padding-right: 14px !important;\n}\n\n:host ::ng-deep .p-chips-token {\n  height: 24px; /* Reduced height */\n  align-items: center; /* Center content */\n  background-color: white !important; /* Change background color to white */\n  border: 1px solid #ccc; /* Optional: Add a border to make it visible against the white background */\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Add shadow */\n}\n\n/* To remove blue hover and other styles */\n\n:host ::ng-deep .p-chips input:focus {\n  outline: none !important;\n  box-shadow: none !important;\n  border-color: inherit !important;\n}\n\n/* Scrollable container */\n\n:host ::ng-deep .p-chips-multiple-container {\n  max-height: 80px;\n  overflow-y: auto;\n  width: 360px !important;\n  height: auto !important;\n  min-height: 38px !important;\n  padding-top: 2px !important;\n  padding-bottom: 2px !important;\n}\n\n/* Change text color to black */\n\n:host ::ng-deep .p-chips-token-label {\n  padding-top: 4px !important;\n  padding-bottom: 4px !important;\n  padding-left: 8px !important;\n  padding-right: 8px !important;\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-chips-token-icon {\n  color: var(--slightly-normal-text-color) !important;\n}\n\n:host ::ng-deep .p-chips-multiple-container::-webkit-scrollbar {\n  background: transparent; /* For WebKit browsers like Chrome and Safari */\n}\n\n:host ::ng-deep .p-dropdown-panel .p-dropdown-items .p-dropdown-item:not(.p-highlight):hover .p-calendar .p-inputtext {\n  background-color: var(--disabled-bg-color) !important;\n}\n\n:host ::ng-deep .p-calendar ::placeholder {\n  color: var(--placeholder) !important;\n}\n\n.chip-hint {\n  font-size: 12px !important;\n  color: grey !important;\n}\n\n:host ::ng-deep .p-dropdown {\n  transform: scale(0.9);\n  width: 180px !important;\n}\n\n:host ::ng-deep input {\n  font-size: 14px !important;\n}\n\n:host ::ng-deep .p-datepicker table td > span {\n  height: auto !important;\n  width: auto !important;\n}"]})],SkipExportComponent);var primeng_chips=__webpack_require__("./node_modules/primeng/fesm2020/primeng-chips.mjs"),primeng_tabmenu=__webpack_require__("./node_modules/primeng/fesm2020/primeng-tabmenu.mjs");let DashboardMappingResolveComponent=class DashboardMappingResolveComponent{constructor(mappingService,workspaceService,toastService){this.mappingService=mappingService,this.workspaceService=workspaceService,this.toastService=toastService,this.isLoading=!0,this.isDialogVisible=!1}tableDropdownWidth(){const element=document.querySelector(".p-dropdown-panel.p-component.ng-star-inserted");element&&(element.style.width="300px")}saveEmployeeMapping(selectedRow,event){const employeeMapping={source_employee:{id:selectedRow.id},destination_vendor:{id:this.employeeFieldMapping===enum_model.qZ.VENDOR?event.value.id:null},destination_employee:{id:this.employeeFieldMapping===enum_model.qZ.EMPLOYEE?event.value.id:null},destination_card_account:{id:null},workspace:parseInt(this.workspaceService.getWorkspaceId())};this.mappingService.postEmployeeMappings(employeeMapping).subscribe((()=>{this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Employee Mapping saved successfully")}),(()=>{this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Something went wrong")}))}getEmployeeAttributeType(){return this.employeeFieldMapping===enum_model.qZ.EMPLOYEE?enum_model.qZ.EMPLOYEE:enum_model.qZ.VENDOR}getCategoryMappingOptions(){return this.employeeFieldMapping===enum_model.qZ.EMPLOYEE?this.sageIntacctExpenseTypes:this.sageIntacctAccounts}saveCategoryMapping(selectedRow,event){const categoryMappingsPayload={source_category:{id:selectedRow.id},destination_account:{id:this.employeeFieldMapping===enum_model.qZ.VENDOR?event.value.id:null},destination_expense_head:{id:this.employeeFieldMapping===enum_model.qZ.EMPLOYEE?event.value.id:null},workspace:parseInt(this.workspaceService.getWorkspaceId())};this.mappingService.postCategoryMappings(categoryMappingsPayload).subscribe((()=>{this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Category Mapping saved successfully")}),(()=>{this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Something went wrong")}))}getCategoryDestinationType(){return this.employeeFieldMapping===enum_model.qZ.EMPLOYEE?enum_model.TT.EXPENSE_TYPE:enum_model.V6.ACCOUNT}getDestinationAttributeType(){const attributeType=[];return this.mappingType===enum_model.RD.EMPLOYEE_MAPPING?this.employeeFieldMapping===enum_model.qZ.VENDOR?attributeType.push(enum_model.qZ.VENDOR):attributeType.push(enum_model.qZ.EMPLOYEE):this.mappingType===enum_model.RD.CATEGORY_MAPPING&&(this.employeeFieldMapping===enum_model.qZ.VENDOR?attributeType.push(enum_model.V6.ACCOUNT):attributeType.push(enum_model.TT.EXPENSE_TYPE)),attributeType}setupPage(){const attributeType=this.getDestinationAttributeType();this.mappingService.getGroupedDestinationAttributes(attributeType).subscribe((response=>{this.sageIntacctExpenseTypes=response.EXPENSE_TYPE,this.sageIntacctAccounts=response.ACCOUNT,this.fyleEmployeeOptions=this.getEmployeeAttributeType()===enum_model.qZ.EMPLOYEE?response.EMPLOYEE:response.VENDOR,this.isLoading=!1}))}ngOnInit(){this.setupPage()}};DashboardMappingResolveComponent.ctorParameters=()=>[{type:SiMappingsService},{type:SiWorkspaceService},{type:integrations_toast_service.d}],DashboardMappingResolveComponent.propDecorators={mappingType:[{type:core.Input}],isDialogVisible:[{type:core.Input}],groupedError:[{type:core.Input}],employeeFieldMapping:[{type:core.Input}]},DashboardMappingResolveComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-mapping-resolve",template:'<div>\n    <div *ngIf="mappingType===\'CATEGORY_MAPPING\'">\n      <p-table [value]="groupedError">\n        <ng-template pTemplate="header">\n            <tr>\n                <th>Category</th>\n                <th>{{getCategoryDestinationType() | snakeCaseToSpaceCase | titlecase}}</th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate="body" let-error let-rowIndex="rowIndex">\n            <tr *ngIf="!isLoading">\n                <td>{{ error.expense_attribute.value }}</td>\n                <td>\n                    <p-dropdown appendTo="body" (onShow)="tableDropdownWidth()"\n                    [options]="getCategoryMappingOptions()" \n                    optionLabel="value" \n                    placeholder="Select an Option" \n                    (onChange)="saveCategoryMapping(error.expense_attribute, $event);"\n                    [filter]="true"\n                    filterBy="value">\n                    </p-dropdown> \n                </td>\n            </tr>\n            <ng-container *ngTemplateOutlet="shimmers"></ng-container>\n        </ng-template>\n    </p-table>\n    </div>\n    <div *ngIf="mappingType===\'EMPLOYEE_MAPPING\'">\n      <p-table [value]="groupedError">\n        <ng-template pTemplate="header">\n            <tr>\n            <th>Employee Email</th>\n            <th>Sage Intacct {{getEmployeeAttributeType() | titlecase}}</th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate="body" let-error>\n            <tr *ngIf="!isLoading">\n                <td>{{ error.expense_attribute.value }}</td>\n                <td>\n                    <p-dropdown appendTo="body" (onShow)="tableDropdownWidth()"\n                    [options]="fyleEmployeeOptions" \n                    optionLabel="value" \n                    placeholder="Select an Option" \n                    (onChange)="saveEmployeeMapping(error.expense_attribute, $event);"\n                    [filter]="true"\n                    filterBy="value">\n                    </p-dropdown>                \n                </td>\n            </tr>\n            <ng-container *ngTemplateOutlet="shimmers"></ng-container>\n        </ng-template>\n        </p-table>\n    </div>\n</div>\n\n<ng-template #shimmers>\n    <tr *ngFor="let _ of [0,1,2,3,4,5,6]">\n        <td *ngIf="isLoading"><p-skeleton width="150px" height="28px" shape="rectangle"></p-skeleton></td>\n        <td *ngIf="isLoading"><p-skeleton width="250px" height="28px" shape="rectangle"></p-skeleton></td>\n    </tr>\n</ng-template>\n',styles:[""]})],DashboardMappingResolveComponent);let DashboardIntacctErrorsComponent=class DashboardIntacctErrorsComponent{constructor(){}openUrl(event,expense_id){const url=`${environment.N.fyle_app_url}/app/admin/#/view_expense/${expense_id}`;window.open(url,"_blank"),event.stopPropagation()}ngOnInit(){}};DashboardIntacctErrorsComponent.ctorParameters=()=>[],DashboardIntacctErrorsComponent.propDecorators={intacctErrorExpenses:[{type:core.Input}]},DashboardIntacctErrorsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-intacct-errors",template:'<div>\n      <p-table [value]="intacctErrorExpenses" [tableStyle]="{ \'min-width\': \'20rem\' }">\n        <ng-template pTemplate="header">\n            <tr>\n                <th>Expense ID</th>\n                <th>Employee Name and ID</th>\n                <th>Expense Type</th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">\n            <tr>\n                <td class="tw-cursor-pointer tw-underline" (click)="openUrl($event, rowData.expense_id)">\n                    {{rowData.expense_number}}\n                </td>\n                <td>\n                    <h4>\n                        {{rowData.employee_name}}\n                    </h4>\n                    <h5 class="tw-font-400 !tw-text-12-px tw-text-placeholder">\n                        {{rowData.employee_email}}\n                    </h5>\n                </td>\n                <td>\n                    <h4>\n                        {{rowData.fund_source === \'PERSONAL\' ? \'Reimbursable\' : \'Corporate Card\'}}\n                    </h4>\n                </td>\n            </tr>\n        </ng-template>\n    </p-table>\n</div>\n',styles:[""]})],DashboardIntacctErrorsComponent);var window_service=__webpack_require__("./src/app/core/services/common/window.service.ts");const MODULE_PATHS=["mapping","export_log","configuration","intacct","qbd"];let EventsService=class EventsService{constructor(location,router,windowService){this.location=location,this.router=router,this.windowService=windowService,this.getWorkatoConnectionStatus=new core.EventEmitter,this.sageIntacctLogin=new core.EventEmitter,this.redirectToOldIntacctApp=new core.EventEmitter,this.history=[]}navigateBack(){this.location.back(),this.history.pop()}checkStateAndNavigate(){this.navigateBack();const lastItem=this.history[this.history.length-1];lastItem&&MODULE_PATHS.indexOf(lastItem.split("/").pop())>-1&&this.navigateBack()}receiveEvent(){this.windowService.nativeWindow.addEventListener("message",(message=>{message.data&&message.data.redirectUri&&message.origin===environment.N.fyle_app_url?message.data.redirectUri.includes("sage-intacct")?(this.sageIntacctLogin.emit(message.data.redirectUri),this.redirectToOldIntacctApp.emit(message.data.redirectUri)):this.windowService.openInNewTab(message.data.redirectUri):message.data&&message.data.navigateBack?this.checkStateAndNavigate():message.data&&"object"!=typeof message.data&&"connectionStatusChange"===JSON.parse(message.data).type&&message.origin.includes("workato")&&this.getWorkatoConnectionStatus.emit(JSON.parse(message.data))}),!1)}postEvent(payload){this.windowService.nativeWindow.parent.postMessage(payload,environment.N.fyle_app_url)}setupRouteWatcher(){this.postEvent({updateIframedAppNavigationAvailability:!0}),this.router.events.subscribe((routerEvent=>{if(routerEvent instanceof router.OD)if(routerEvent.restoredState||this.history.push(routerEvent.url),routerEvent.restoredState&&routerEvent.restoredState.navigationId<=3)this.postEvent({updateIframedAppNavigationAvailability:!1});else{const payload={currentRoute:routerEvent.url.substring(1)};this.postEvent(payload)}}))}};EventsService.ctorParameters=()=>[{type:common.Location},{type:router.F0},{type:window_service.u}],EventsService.propDecorators={getWorkatoConnectionStatus:[{type:core.Output}],sageIntacctLogin:[{type:core.Output}],redirectToOldIntacctApp:[{type:core.Output}]},EventsService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],EventsService);var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),firstValueFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js");let DashboardService=class DashboardService{constructor(apiService,workspaceService){this.apiService=apiService,this.workspaceService=workspaceService,this.workspaceId=this.workspaceService.getWorkspaceId()}getExportableGroupsIds(){return this.apiService.get(`/workspaces/${this.workspaceId}/fyle/exportable_expense_groups/`,{})}getExportErrors(){return this.apiService.get(`/v2/workspaces/${this.workspaceId}/errors/`,{is_resolved:!1})}syncExpensesFromFyle(){return this.apiService.post(`/workspaces/${this.workspaceId}/fyle/expense_groups/sync/`,{})}importExpenseGroups(){return this.apiService.post(`/workspaces/${this.workspaceId}/fyle/expense_groups/sync/`,{})}exportExpenseGroups(){return this.apiService.post(`/workspaces/${this.workspaceId}/exports/trigger/`,{})}getLastExport(){return this.apiService.get(`/workspaces/${this.workspaceId}/export_detail/`,{})}getAllTasks(status,expenseGroupIds=[],taskType=[]){return(0,from.D)(this.getAllTasksInternal(500,status,expenseGroupIds,taskType,{count:0,next:null,previous:null,results:[]}))}getAllTasksInternal(limit,status,expenseGroupIds,taskType,allTasks){var _this=this;return(0,asyncToGenerator.Z)((function*(){const taskResponse=yield(0,firstValueFrom.z)(_this.getTasks(limit,status,expenseGroupIds,taskType,allTasks.next));return 0===allTasks.count?allTasks=taskResponse:(allTasks.count=taskResponse.count,allTasks.next=taskResponse.next,allTasks.previous=taskResponse.previous,allTasks.results=allTasks.results.concat(taskResponse.results)),taskResponse.next?_this.getAllTasksInternal(limit,status,expenseGroupIds,taskType,allTasks):allTasks}))()}getTasks(limit,status,expenseGroupIds,taskType,next){const apiParams={limit,offset:0};if(status.length){apiParams["status"]=status}if(expenseGroupIds.length){apiParams["expense_group_ids"]=expenseGroupIds}if(taskType){apiParams["task_type"]=taskType}return next?this.apiService.get(next.split("/api")[1],{}):this.apiService.get(`/workspaces/${this.workspaceId}/tasks/v2/all/`,apiParams)}};DashboardService.ctorParameters=()=>[{type:SiApiService},{type:SiWorkspaceService}],(0,tslib_es6.gn)([(0,cacheable_decorator.q)()],DashboardService.prototype,"importExpenseGroups",null),DashboardService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],DashboardService);let DashboardMenuComponent=class DashboardMenuComponent{constructor(dashboardService,eventsService,router,toastService,mappingsService,windowService){this.dashboardService=dashboardService,this.eventsService=eventsService,this.router=router,this.toastService=toastService,this.mappingsService=mappingsService,this.windowService=windowService,this.modules=[{label:"Dashboard",routerLink:"/integrations/intacct/main/dashboard"},{label:"Export Log",routerLink:"/integrations/intacct/main/export_log"},{label:"Mapping",routerLink:"/integrations/intacct/main/mapping"},{label:"Configuration",routerLink:"/integrations/intacct/main/configuration"}],this.brandingConfig=branding_config.Wg}redirectToOldApp(){this.moreDropdown=null,this.eventsService.redirectToOldIntacctApp.subscribe((redirectUri=>{this.windowService.openInNewTab(redirectUri)}));const payload={callbackUrl:environment.N.si_callback_url,clientId:environment.N.si_client_id};this.eventsService.postEvent(payload)}refreshDimensions(){this.mappingsService.refreshSageIntacctDimensions().subscribe(),this.mappingsService.refreshFyleDimensions().subscribe(),this.dashboardService.syncExpensesFromFyle().subscribe(),this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,"Refreshing data dimensions from Sage Intacct...")}ngOnInit(){this.activeModule=this.modules[0],this.router.navigateByUrl(this.modules[0].routerLink)}};DashboardMenuComponent.ctorParameters=()=>[{type:DashboardService},{type:EventsService},{type:router.F0},{type:integrations_toast_service.d},{type:SiMappingsService},{type:window_service.u}],DashboardMenuComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-dashboard-menu",template:'<div class="tw-border-gray-300 tw-rounded tw-flex tw-items-center tw-justify-between">\n    <p-tabMenu [model]="modules" [activeItem]="activeModule" ></p-tabMenu>\n\n    <div class="tw-flex tw-items-center">\n        <button [pTooltip]="\'The integration will import all the newly updated Sage Intacct dimensions and \' + brandingConfig.brandName + \' expenses in the configured state of export\'"\n            (click)="refreshDimensions()"\n            class="tw-h-32-px tw-w-80-px tw-mr-12-px tw-flex tw-items-center focus:tw-ring-0 tw-justify-center tw-rounded tw-bg-white tw-text-black tw-border tw-border-gray-300 focus:tw-outline-none focus:tw-ring-opacity-50 active:tw-scale-95 transition-transform">\n            <img src="assets/icons/stepper/sync.svg">\n            <span class="tw-text-14-px tw-pl-8-px">\n                Sync\n            </span>\n        </button>\n\n        \x3c!-- <p-dropdown [(ngModel)]="moreDropdown" (onChange)="redirectToOldApp()" appendTo="body" class="tw-mr-26-px" [options]="[\'Switch to Old View\']" placeholder="More">\n            <ng-template let-option pTemplate="item">\n                <div class="tw-flex tw-justify-center">\n                    <svg-icon-sprite src="open-in-new-tab" width="20px" height="20px" class="tw-pt-4-px tw-pr-8-px tw-text-mandatory-field-color"></svg-icon-sprite>\n                    <span>{{option}}</span>\n                </div>\n              </ng-template>\n        </p-dropdown> --\x3e\n    </div>\n</div>\n',styles:[":host ::ng-deep .p-tabmenu .p-tabmenu-nav {\n\n    border-bottom-color: var(--white) !important\n}\n\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n\n    border-color: var(--white)\n}\n\n:host ::ng-deep .p-dropdown {\n\n    height: 32px !important;\n\n    width: 80px !important\n}\n\n:host ::ng-deep .p-dropdown-label {\n\n    display: flex !important;\n\n    width: auto !important;\n\n    flex: none !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n\n    width: 28px !important;\n\n    color: var(--sub-text-color) !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 0px !important;\n\n    padding-bottom: 0px !important;\n\n    color: var(--slightly-normal-text-color) !important\n}"]})],DashboardMenuComponent);var dashboard_export_section_component=__webpack_require__("./src/app/shared/components/dashboard/dashboard-export-section/dashboard-export-section.component.ts"),dashboard_error_section_component=__webpack_require__("./src/app/shared/components/dashboard/dashboard-error-section/dashboard-error-section.component.ts"),dashboard_export_log_dialog_component=__webpack_require__("./src/app/shared/components/dashboard/dashboard-export-log-dialog/dashboard-export-log-dialog.component.ts"),dashboard_accounting_error_dialog_component=__webpack_require__("./src/app/shared/components/dashboard/dashboard-accounting-error-dialog/dashboard-accounting-error-dialog.component.ts"),dashboard_export_summary_section_component=__webpack_require__("./src/app/shared/components/dashboard/dashboard-export-summary-section/dashboard-export-summary-section.component.ts"),configuration_text_field_component=__webpack_require__("./src/app/shared/components/configuration/configuration-text-field/configuration-text-field.component.ts"),onboarding_done_component=__webpack_require__("./src/app/shared/components/helper/onboarding-done/onboarding-done.component.ts"),preview_dialog_component=__webpack_require__("./src/app/shared/components/configuration/preview-dialog/preview-dialog.component.ts"),main_menu_component=__webpack_require__("./src/app/shared/components/menu/main-menu/main-menu.component.ts"),configuration_import_field_component=__webpack_require__("./src/app/shared/components/configuration/configuration-import-field/configuration-import-field.component.ts"),configuration_info_label_component=__webpack_require__("./src/app/shared/components/configuration/configuration-info-label/configuration-info-label.component.ts"),configuration_custom_field_creation_dialog_component=__webpack_require__("./src/app/shared/components/configuration/configuration-custom-field-creation-dialog/configuration-custom-field-creation-dialog.component.ts"),configuration_confirmation_dialog_component=__webpack_require__("./src/app/shared/components/configuration/configuration-confirmation-dialog/configuration-confirmation-dialog.component.ts"),zero_state_component=__webpack_require__("./src/app/shared/components/helper/zero-state/zero-state.component.ts"),configuration_skip_export_component=__webpack_require__("./src/app/shared/components/configuration/configuration-skip-export/configuration-skip-export.component.ts"),configuration_step_sub_header_component=__webpack_require__("./src/app/shared/components/configuration/configuration-step-sub-header/configuration-step-sub-header.component.ts"),generic_mapping_v2_component=__webpack_require__("./src/app/shared/components/helper/mapping/generic-mapping-v2/generic-mapping-v2.component.ts");class MappingClass{static constructEmployeeMappingPayload(selectedRow,event,employeeFieldMapping,workspaceId){return{source_employee:{id:selectedRow.id},destination_vendor:{id:employeeFieldMapping===enum_model.qZ.VENDOR?event.value.id:selectedRow.employeemapping?.length&&selectedRow.employeemapping[0].destination_vendor?selectedRow.employeemapping[0].destination_vendor?.id:null},destination_employee:{id:employeeFieldMapping===enum_model.qZ.EMPLOYEE?event.value.id:selectedRow.employeemapping?.length&&selectedRow.employeemapping[0].destination_employee?selectedRow.employeemapping[0].destination_employee?.id:null},destination_card_account:{id:selectedRow.employeemapping?.length&&selectedRow.employeemapping[0].destination_card_account?selectedRow.employeemapping[0].destination_card_account?.id:null},workspace:parseInt(workspaceId)}}static constructCategoryMappingPayload(selectedRow,event,destinationField,workspaceId){return{source_category:{id:selectedRow.id},destination_account:{id:"ACCOUNT"===destinationField?event.value.id:null},destination_expense_head:{id:"ACCOUNT"!==destinationField?event.value.id:null},workspace:parseInt(workspaceId)}}static constructGenericMappingPayload(selectedRow,event,mappingSetting){return{source_type:mappingSetting.source_field,source_value:selectedRow.value,destination_type:mappingSetting.destination_field,destination_id:event.value.destination_id,destination_value:event.value.value}}}var mapping_service=__webpack_require__("./src/app/core/services/common/mapping.service.ts"),workspace_service=__webpack_require__("./src/app/core/services/common/workspace.service.ts");let GenericMappingTableComponent=class GenericMappingTableComponent{constructor(mappingService,toastService,workspaceService){this.mappingService=mappingService,this.toastService=toastService,this.workspaceService=workspaceService}tableDropdownWidth(){const element=document.querySelector(".p-dropdown-panel.p-component.ng-star-inserted");element&&(element.style.width="300px")}getDropdownValue(genericMapping){if(genericMapping.employeemapping?.length){if(this.employeeFieldMapping===enum_model.qZ.VENDOR)return genericMapping?.employeemapping[0].destination_vendor;if(this.employeeFieldMapping===enum_model.qZ.EMPLOYEE)return genericMapping?.employeemapping[0].destination_employee}else{if(genericMapping.categorymapping?.length)return"ACCOUNT"===this.destinationField?genericMapping.categorymapping[0].destination_account:genericMapping.categorymapping[0].destination_expense_head;if(genericMapping.mapping?.length)return genericMapping.mapping[0].destination}return null}save(selectedRow,event){if(selectedRow.employeemapping){const employeeMapping=MappingClass.constructEmployeeMappingPayload(selectedRow,event,this.employeeFieldMapping,this.workspaceService.getWorkspaceId());this.mappingService.postEmployeeMappings(employeeMapping).subscribe((response=>{this.decrementUnmappedCountIfNeeded(selectedRow.employeemapping),selectedRow.employeemapping=[response],this.displaySuccessToast("Employee Mapping saved successfully")}),(()=>{this.displayErrorToast()}))}else if(selectedRow.categorymapping){const categoryMappingsPayload=MappingClass.constructCategoryMappingPayload(selectedRow,event,this.destinationField,this.workspaceService.getWorkspaceId());this.mappingService.postCategoryMappings(categoryMappingsPayload).subscribe((response=>{this.decrementUnmappedCountIfNeeded(selectedRow.categorymapping),selectedRow.categorymapping=[response],this.displaySuccessToast("Category Mapping saved successfully")}),(()=>{this.displayErrorToast()}))}else{const genericMappingPayload=MappingClass.constructGenericMappingPayload(selectedRow,event,{source_field:this.sourceField,destination_field:this.destinationField});this.mappingService.postMapping(genericMappingPayload).subscribe((response=>{this.decrementUnmappedCountIfNeeded(selectedRow.mapping),selectedRow.mapping=[response],this.displaySuccessToast("Mapping saved successfully")}),(()=>{this.displayErrorToast()}))}}decrementUnmappedCountIfNeeded(mapping){mapping?.length||this.isDashboardMappingResolve||(this.mappingStats.unmapped_attributes_count-=1)}displaySuccessToast(message){this.toastService.displayToastMessage(enum_model.aQ.SUCCESS,message)}displayErrorToast(){this.toastService.displayToastMessage(enum_model.aQ.ERROR,"Something went wrong")}getTableSourceData(){return this.filteredMappings?this.filteredMappings:this.mappingError?this.mappingError:[]}ngOnInit(){}};GenericMappingTableComponent.ctorParameters=()=>[{type:mapping_service.y},{type:integrations_toast_service.d},{type:workspace_service.A}],GenericMappingTableComponent.propDecorators={isLoading:[{type:core.Input}],appName:[{type:core.Input}],filteredMappings:[{type:core.Input}],mappingError:[{type:core.Input}],sourceField:[{type:core.Input}],mappingStats:[{type:core.Input}],destinationField:[{type:core.Input}],employeeFieldMapping:[{type:core.Input}],reimbursableExpenseObject:[{type:core.Input}],cccExpenseObject:[{type:core.Input}],destinationOptions:[{type:core.Input}],isDashboardMappingResolve:[{type:core.Input}]},GenericMappingTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-generic-mapping-table",template:'<p-table [value]="getTableSourceData()" [tableStyle]="{ \'min-width\': \'50rem\'}">\n    <ng-template pTemplate="header">\n        <tr>\n        <th class="!tw-pl-40-px">{{sourceField | snakeCaseToSpaceCase | titlecase}} in Fyle</th>\n        <th>{{destinationField | snakeCaseToSpaceCase | titlecase}} in {{appName}}</th>\n        <th *ngIf="!isDashboardMappingResolve">Status</th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate="body" let-mapping>\n        <tr>\n            <td>\n                <div class="tw-flex tw-items-center">\n                    <svg-icon-sprite *ngIf="mapping.auto_mapped" pTooltip="Auto-mapped" tooltipPosition="top" src="flash" width="12px" height="12px" class="tw-mr-12-px tw-text-placeholder"></svg-icon-sprite>\n                    <span [ngClass]="{\'tw-pl-24-px\': !mapping.auto_mapped}">{{ mapping.value }}</span>\n                </div>\n            </td>\n            <td>\n                <p-dropdown appendTo="body" (onShow)="tableDropdownWidth()"\n                [ngModel]="getDropdownValue(mapping)" \n                [options]="destinationOptions" \n                optionLabel="value" \n                placeholder="Select an Option" \n                (onChange)="save(mapping, $event); getDropdownValue(mapping)"\n                [filter]="true"\n                filterBy="value">\n                </p-dropdown>                \n            </td>\n            <td *ngIf="!isDashboardMappingResolve">\n                <p *ngIf="getDropdownValue(mapping)" class="mapped">MAPPED</p>\n                <p *ngIf="!getDropdownValue(mapping)" class="unmapped">UNMAPPED</p>\n            </td>\n        </tr>\n        <ng-container *ngTemplateOutlet="shimmers"></ng-container>\n    </ng-template>\n</p-table>\n\n<ng-template #shimmers>\n    <app-shimmers [isMappingTableShimmers]="isLoading"></app-shimmers>\n</ng-template>',styles:[":host ::ng-deep .prevBtn:disabled > .pi-chevron-left, :host ::ng-deep .nextBtn:disabled > .pi-chevron-right,\n:host ::ng-deep .prevBtn:disabled > .pi-minus, :host ::ng-deep .nextBtn:disabled > .pi-minus {\n\n    color: var(--placeholder) !important\n}\n\n:host ::ng-deep .mappingFilterDropdown .p-dropdown {\n\n    width: 200px !important\n}\n\n:host ::ng-deep .mapped {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important;\n\n    border-radius: 9999px !important;\n\n    border-width: 1px !important;\n\n    border-style: solid !important;\n\n    border-color: var(--mapped-green-border) !important;\n\n    background-color: var(--mapped-green-bg) !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    font-size: 12px !important;\n\n    color: var(--success-toast) !important\n}\n\n:host ::ng-deep .unmapped {\n\n    width: -moz-fit-content !important;\n\n    width: fit-content !important;\n\n    border-radius: 9999px !important;\n\n    border-width: 1px !important;\n\n    border-style: solid !important;\n\n    border-color: var(--unmapped-red-border) !important;\n\n    background-color: var(--unmapped-red-bg) !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    padding-left: 12px !important;\n\n    padding-right: 12px !important;\n\n    font-size: 12px !important;\n\n    color: var(--alert-toast) !important\n}\n\n:host ::ng-deep .filterDropdown .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important\n}\n\n:host ::ng-deep .selectedItem .p-dropdown .p-dropdown-label.p-inputtext {\n\n    padding-top: 5px !important;\n\n    padding-bottom: 5px !important\n}\n\n:host ::ng-deep .selectedItem .p-dropdown-trigger {\n\n    display: none !important\n}\n\n:host ::ng-deep .filterDropdown .p-dropdown-trigger {\n\n    display: block !important\n}\n\n:host ::ng-deep .p-dropdown .p-dropdown-trigger {\n\n    width: 32px !important\n}\n\n:host ::ng-deep .textbox {\n\n    border-right-width: 0px !important\n}\n\nth {\n\n    height: 40px !important;\n\n    padding-top: 10px !important;\n\n    padding-bottom: 10px !important;\n\n    font-size: 12px !important;\n\n    font-weight: 500 !important;\n\n    color: var(--normal-text-color) !important\n}\n\ntd {\n\n    font-size: 14px !important;\n\n    font-weight: 400 !important;\n\n    color: var(--sub-text-color) !important\n}\n\n.pi-check:before {\n\n    cursor: pointer !important;\n\n    font-size: 14px !important;\n\n    color: var(--faded-text-color) !important\n}\n\n:host ::ng-deep .tooltip-main {\n\n    padding-left: 1.5rem !important;\n\n    padding-right: 1.5rem !important;\n\n    padding-bottom: 1rem !important;\n\n    text-align: center !important\n}\n\n:host ::ng-deep .tooltip-save {\n\n    font-size: 12px !important\n}\n\n:host ::ng-deep .tooltip-return {\n\n    margin-top: 6px !important;\n\n    border-radius: 0.375rem !important;\n\n    background-color: var(--placeholder) !important;\n\n    padding-left: 4px !important;\n\n    padding-right: 4px !important;\n\n    padding-top: 4px !important;\n\n    padding-bottom: 4px !important;\n\n    font-size: 9px !important\n}"]})],GenericMappingTableComponent);var sub_menu_component=__webpack_require__("./src/app/shared/components/menu/sub-menu/sub-menu.component.ts"),mapping_card_header_component=__webpack_require__("./src/app/shared/components/helper/mapping/mapping-card-header/mapping-card-header.component.ts"),configuration_schedule_export_component=__webpack_require__("./src/app/shared/components/configuration/configuration-schedule-export/configuration-schedule-export.component.ts"),configuration_connector_component=__webpack_require__("./src/app/shared/components/configuration/configuration-connector/configuration-connector.component.ts"),export_log_table_component=__webpack_require__("./src/app/shared/components/export-log/export-log-table/export-log-table.component.ts"),export_log_filter_component=__webpack_require__("./src/app/shared/components/export-log/export-log-filter/export-log-filter.component.ts"),export_log_child_table_dialog_component=__webpack_require__("./src/app/shared/components/export-log/export-log-dialog/export-log-child-table-dialog.component.ts"),skipped_export_log_table_component=__webpack_require__("./src/app/shared/components/export-log/skipped-export-log-table/skipped-export-log-table.component.ts"),shimmers_component=__webpack_require__("./src/app/shared/components/helper/shimmers/shimmers.component.ts"),clone_setting_header_component=__webpack_require__("./src/app/shared/components/onboarding/clone-setting/clone-setting-header/clone-setting-header.component.ts"),dropdown_component=__webpack_require__("./src/app/shared/components/input/dropdown/dropdown.component.ts"),clone_setting_field_component=__webpack_require__("./src/app/shared/components/onboarding/clone-setting/clone-setting-field/clone-setting-field.component.ts"),toggle_component=__webpack_require__("./src/app/shared/components/input/toggle/toggle.component.ts"),multi_select_component=__webpack_require__("./src/app/shared/components/input/multi-select/multi-select.component.ts");let SharedModule=class SharedModule{};SharedModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[loader_component.R,app_landing_page_header_component.K,error_component.q,TrimCharacterPipe,snake_case_to_space_case_pipe.D,SearchPipe,paginator_component.J,mandatory_field_component.T,mandatory_error_message_component.i,zero_state_with_illustration_component.w,OnboardingStepperComponent,OnboardingSteppersComponent,ExportSettingComponent,AdvancedSettingComponent,FieldMappingComponent,configuration_toggle_field_component.a,configuration_select_field_component.i,configuration_radio_field_component.U,configuration_step_footer_component.B,configuration_step_header_component.B,email_multi_select_field_component.X,configuration_multi_select_component.f,configuration_label_component.C,app_landing_page_body_component.s,IntacctStepperComponent,IntacctConnectorComponent,IntacctLocationEntityComponent,MappingTableComponent,mapping_filter_component.J,MappingHeaderSectionComponent,ConfigurationExportSettingsComponent,ConfigurationImportSettingsComponent,ConfigurationAdvancedSettingsComponent,SkipExportComponent,DashboardMappingResolveComponent,DashboardIntacctErrorsComponent,DashboardMenuComponent,dashboard_export_section_component.O,dashboard_error_section_component.h,dashboard_export_log_dialog_component.Z,dashboard_accounting_error_dialog_component.O,dashboard_export_summary_section_component.d,configuration_text_field_component.W,onboarding_done_component.G,preview_dialog_component.Q,main_menu_component.C,configuration_import_field_component.J,configuration_info_label_component.B,configuration_custom_field_creation_dialog_component.l,configuration_confirmation_dialog_component.e,zero_state_component.f,configuration_skip_export_component.C,configuration_step_sub_header_component.x,generic_mapping_v2_component.Z,GenericMappingTableComponent,sub_menu_component.C,mapping_card_header_component.M,configuration_schedule_export_component.e,configuration_connector_component.X,export_log_table_component.Q,export_log_filter_component.Z,export_log_child_table_dialog_component.b,skipped_export_log_table_component.i,shimmers_component.I,clone_setting_header_component.j,dropdown_component.J,clone_setting_field_component.l,toggle_component.n,multi_select_component.O],imports:[common.CommonModule,primeng_progressspinner.L,primeng_button.hJ,primeng_tooltip.z,primeng_skeleton.m,primeng_inputswitch.Iu,primeng_radiobutton.cc,fesm2020_forms.u5,fesm2020_forms.UX,primeng_toast.EV,primeng_inputtext.j,primeng_dropdown.kW,primeng_dialog.S,primeng_multiselect.q4,primeng_dragdrop._t,primeng_progressbar.q,primeng_calendar._8,primeng_chips.Gg,primeng_table.U$,primeng_tabmenu.i,ng_svg_icon_sprite.W$.forRoot({path:"assets/sprites/sprite.svg"})],exports:[loader_component.R,app_landing_page_body_component.s,app_landing_page_header_component.K,error_component.q,TrimCharacterPipe,snake_case_to_space_case_pipe.D,SearchPipe,paginator_component.J,mandatory_field_component.T,mandatory_error_message_component.i,zero_state_with_illustration_component.w,OnboardingStepperComponent,OnboardingSteppersComponent,ExportSettingComponent,AdvancedSettingComponent,FieldMappingComponent,configuration_toggle_field_component.a,configuration_select_field_component.i,configuration_radio_field_component.U,configuration_step_footer_component.B,configuration_step_header_component.B,email_multi_select_field_component.X,configuration_multi_select_component.f,primeng_dropdown.kW,primeng_calendar._8,primeng_chips.Gg,fesm2020_forms.u5,fesm2020_forms.UX,primeng_progressbar.q,primeng_toast.EV,IntacctStepperComponent,IntacctConnectorComponent,IntacctLocationEntityComponent,MappingTableComponent,mapping_filter_component.J,MappingHeaderSectionComponent,ConfigurationExportSettingsComponent,ConfigurationImportSettingsComponent,ConfigurationAdvancedSettingsComponent,DashboardMappingResolveComponent,DashboardIntacctErrorsComponent,DashboardMenuComponent,dashboard_export_section_component.O,dashboard_error_section_component.h,dashboard_export_log_dialog_component.Z,dashboard_accounting_error_dialog_component.O,configuration_text_field_component.W,onboarding_done_component.G,main_menu_component.C,configuration_import_field_component.J,configuration_info_label_component.B,configuration_custom_field_creation_dialog_component.l,configuration_confirmation_dialog_component.e,zero_state_component.f,dashboard_export_summary_section_component.d,preview_dialog_component.Q,configuration_skip_export_component.C,configuration_step_sub_header_component.x,generic_mapping_v2_component.Z,sub_menu_component.C,configuration_schedule_export_component.e,configuration_connector_component.X,export_log_table_component.Q,export_log_filter_component.Z,export_log_child_table_dialog_component.b,skipped_export_log_table_component.i,shimmers_component.I,clone_setting_header_component.j,dropdown_component.J,clone_setting_field_component.l,toggle_component.n,multi_select_component.O]})],SharedModule)}}]);