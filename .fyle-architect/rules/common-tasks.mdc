---
description: 
globs: 
alwaysApply: false
---
# Common Development Tasks & Troubleshooting

## Environment Setup

### Initial Setup Steps
1. **Clone Repository**: Clone the fyle-integrations-app repository
2. **Install Dependencies**: 
   ```bash
   npm install
   ```
3. **Copy Environment Files** from fyle-integrations-central:
   ```bash
   # Base configuration
   cp ../fyle-integrations-central/app-secrets/integrations-app/environment.json src/environments/
   cp ../fyle-integrations-central/app-secrets/integrations-app/config.json src/app/branding/
   
   # Fyle-specific configuration
   cp ../fyle-integrations-central/app-secrets/integrations-app/fyle-environment.json src/environments/
   cp ../fyle-integrations-central/app-secrets/integrations-app/fyle-config.json src/app/branding/
   
   # Capital One configuration
   cp ../fyle-integrations-central/app-secrets/integrations-app/c1-environment.json src/environments/
   cp ../fyle-integrations-central/app-secrets/integrations-app/c1-config.json src/app/branding/
   ```

4. **Start Development Server**: 
   ```bash
   npm start  # Default (port 4200)
   ```

### Multi-tenant Development
- **Fyle Branded**: 
  ```bash
  npm run start:fyle  # Port 4201
  # OR
  ng serve --configuration=fyle
  ```
- **Capital One Branded**: 
  ```bash
  npm run start:c1    # Port 4202
  # OR
  ng serve --configuration=c1
  ```

### Development URLs
- **Default**: http://localhost:4200
- **Fyle**: http://localhost:4201
- **Capital One**: http://localhost:4202
- **Login**: http://localhost:4200/auth/redirect (for all configurations)

## Key File Locations

### Configuration Files
- **Angular Config**: [angular.json](mdc:angular.json) - Build and serve configurations
- **TypeScript Config**: [tsconfig.json](mdc:tsconfig.json) - Compiler settings
- **ESLint Config**: [.eslintrc.json](mdc:.eslintrc.json) - Code quality rules
- **TailwindCSS Config**: [tailwind.config.js](mdc:tailwind.config.js) - Styling configuration
- **Package Config**: [package.json](mdc:package.json) - Dependencies and scripts

### Environment Files
- **Base Environment**: [src/environments/environment.json](mdc:src/environments/environment.json)
- **Fyle Environment**: [src/environments/fyle-environment.json](mdc:src/environments/fyle-environment.json)
- **C1 Environment**: [src/environments/c1-environment.json](mdc:src/environments/c1-environment.json)
- **Environment TS**: [src/environments/environment.ts](mdc:src/environments/environment.ts)

### Branding Configuration
- **Base Config**: [src/app/branding/config.json](mdc:src/app/branding/config.json)
- **Fyle Config**: [src/app/branding/fyle-config.json](mdc:src/app/branding/fyle-config.json)
- **C1 Config**: [src/app/branding/c1-config.json](mdc:src/app/branding/c1-config.json)
- **Branding Service**: [src/app/core/services/common/branding.service.ts](mdc:src/app/core/services/common/branding.service.ts)

### Core Application Files
- **App Module**: [src/app/app.module.ts](mdc:src/app/app.module.ts) - Root module with providers
- **Main Routing**: [src/app/app-routing.module.ts](mdc:src/app/app-routing.module.ts) - Top-level routes
- **Global Styles**: [src/styles.scss](mdc:src/styles.scss) - Application-wide styles
- **Error Handling**: [src/app/app.error-handling.ts](mdc:src/app/app.error-handling.ts) - Global error handler
- **Main Entry**: [src/main.ts](mdc:src/main.ts) - Application bootstrap

### Integration Files
- **Integration Routing**: [src/app/integrations/integrations-routing.module.ts](mdc:src/app/integrations/integrations-routing.module.ts)
- **Shared Module**: [src/app/shared/shared.module.ts](mdc:src/app/shared/shared.module.ts)
- **Core Models**: [src/app/core/models/](mdc:src/app/core/models) - Data models
- **Core Services**: [src/app/core/services/](mdc:src/app/core/services) - Business logic

## Development Commands Reference

### Basic Commands
```bash
# Development
npm start                    # Default server (port 4200)
npm run start:fyle          # Fyle-branded (port 4201)
npm run start:c1            # Capital One-branded (port 4202)

# Testing
npm test                    # Unit tests with watch
npm run unit_test:ci        # CI unit tests (headless)

# Code Quality
npm run lint                # ESLint checks
npm run lint -- --fix      # Auto-fix linting issues

# Build
npm run build               # Production build
npm run watch               # Development build with watch

# Utilities
npm run stop                # Stop development server
npm run generate:svg-sprite # Generate SVG sprite
```

### Storybook Commands
```bash
npm run storybook           # Start Storybook (port 6006)
npm run build-storybook     # Build Storybook for deployment
```

### Build Scripts
- **Environment Setup**: [scripts/setup_env.js](mdc:scripts/setup_env.js) - Environment variable processing
- **Branding Setup**: [scripts/setup_branding_config.js](mdc:scripts/setup_branding_config.js) - Branding configuration
- **Storybook Generation**: [scripts/generate_storybook.js](mdc:scripts/generate_storybook.js) - Storybook automation

## Common Development Workflows

### 1. Adding a New Integration

1. **Create Integration Module Structure**:
   ```bash
   # Create base folders
   mkdir -p src/app/integrations/new-integration/{new-integration-main,new-integration-onboarding,new-integration-shared}
   
   # Create main component subfolders
   mkdir -p src/app/integrations/new-integration/new-integration-main/{dashboard,configuration,export-log}
   
   # Create onboarding subfolders
   mkdir -p src/app/integrations/new-integration/new-integration-onboarding/{connector,configuration,advanced-settings,import-settings,export-settings,onboarding-done}
   
   # Create shared components folder
   mkdir -p src/app/integrations/new-integration/new-integration-shared/components
   ```

2. **Create Core Module Files**:
   - Module file: `src/app/integrations/new-integration/new-integration.module.ts`
   - Routing file: `src/app/integrations/new-integration/new-integration-routing.module.ts`
   - Component files: `src/app/integrations/new-integration/new-integration.component.{ts,html,scss}`

3. **Update Integration Routing** in [src/app/integrations/integrations-routing.module.ts](mdc:src/app/integrations/integrations-routing.module.ts):
   ```typescript
   {
     path: 'new-integration',
     loadChildren: () => import('./new-integration/new-integration.module').then(m => m.NewIntegrationModule)
   }
   ```

4. **Create Models and Services**:
   ```bash
   mkdir -p src/app/core/models/new-integration/{mapping,configuration,db}
   mkdir -p src/app/core/services/new-integration/{core,mappings,configuration}
   ```

5. **Generate Guards**:
   ```bash
   ng generate guard core/guard/new-integration-token
   ```

### 2. Adding a New Shared Component

1. **Generate Component**:
   ```bash
   # Create shared component
   ng generate component shared/components/category/shared-component-name --change-detection=OnPush
   ```

2. **Add to Shared Module** in [src/app/shared/shared.module.ts](mdc:src/app/shared/shared.module.ts):
   ```typescript
   declarations: [
     // Add component to declarations
     SharedComponentNameComponent
   ],
   exports: [
     // Export component
     SharedComponentNameComponent
   ]
   ```

### 3. Implementing OAuth Authentication

1. **Update Environment Configuration**:
   Add OAuth settings to [src/environments/environment.json](mdc:src/environments/environment.json):
   ```json
   {
     "integration_name_oauth_client_id": "client_id_value",
     "integration_name_oauth_redirect_uri": "http://localhost:4200/oauth/integration-name/callback",
     "integration_name_authorize_uri": "https://integration-auth-url.com/oauth/authorize"
   }
   ```

2. **Create OAuth Service**:
   ```typescript
   @Injectable({
     providedIn: 'root'
   })
   export class IntegrationOAuthService {
     constructor(
       private apiService: ApiService,
       private windowReference: WindowReference,
       private router: Router
     ) { }
     
     connectIntegration(): void {
       const authUri = this.getAuthUri();
       this.windowReference.nativeWindow.open(authUri, '_blank');
     }
     
     private getAuthUri(): string {
       const redirectUri = encodeURIComponent(environment.integration_name_oauth_redirect_uri);
       const clientId = environment.integration_name_oauth_client_id;
       const scope = encodeURIComponent('scope1 scope2');
       
       return `${environment.integration_name_authorize_uri}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}&response_type=code`;
     }
   }
   ```

3. **Create OAuth Callback Component**:
   Update [src/app/oauth/oauth-routing.module.ts](mdc:src/app/oauth/oauth-routing.module.ts):
   ```typescript
   {
     path: 'integration-name/callback',
     component: IntegrationOAuthCallbackComponent
   }
   ```

### 4. Adding a New Mapping Feature

1. **Create Data Models**:
   ```typescript
   // src/app/core/models/integration-name/mapping/mapping.model.ts
   export interface MappingModel {
     id: number;
     source_value: string;
     destination_value: string;
     created_at: Date;
     updated_at: Date;
   }
   
   export interface SourceField {
     value: string;
     name: string;
   }
   
   export interface DestinationField {
     value: string;
     name: string;
   }
   ```

2. **Create Mapping Service**:
   ```typescript
   // src/app/core/services/integration-name/mappings/mapping.service.ts
   @Injectable({
     providedIn: 'root'
   })
   export class MappingService {
     constructor(
       private apiService: ApiService
     ) { }
     
     getMappings(): Observable<MappingModel[]> {
       return this.apiService.get('/mappings/');
     }
     
     getSourceFields(): Observable<SourceField[]> {
       return this.apiService.get('/mappings/source-fields/');
     }
     
     getDestinationFields(): Observable<DestinationField[]> {
       return this.apiService.get('/mappings/destination-fields/');
     }
     
     createMapping(mappingData: Partial<MappingModel>): Observable<MappingModel> {
       return this.apiService.post('/mappings/', mappingData);
     }
     
     deleteMapping(id: number): Observable<void> {
       return this.apiService.delete(`/mappings/${id}/`);
     }
   }
   ```

3. **Create Mapping Component**:
   ```typescript
   // src/app/integrations/integration-name/integration-name-main/mappings/mappings.component.ts
   @Component({
     selector: 'app-mappings',
     templateUrl: './mappings.component.html',
     styleUrls: ['./mappings.component.scss'],
     changeDetection: ChangeDetectionStrategy.OnPush
   })
   export class MappingsComponent implements OnInit, OnDestroy {
     mappings$ = new BehaviorSubject<MappingModel[]>([]);
     sourceFields$ = new BehaviorSubject<SourceField[]>([]);
     destinationFields$ = new BehaviorSubject<DestinationField[]>([]);
     isLoading = false;
     
     private destroy$ = new Subject<void>();
     
     constructor(
       private mappingService: MappingService,
       private cdr: ChangeDetectorRef
     ) { }
     
     ngOnInit(): void {
       this.loadData();
     }
     
     ngOnDestroy(): void {
       this.destroy$.next();
       this.destroy$.complete();
     }
     
     // Component methods...
   }
   ```

### 5. Creating a Dynamic Form

1. **Define Form Model**:
   ```typescript
   interface DynamicField {
     key: string;
     label: string;
     type: 'text' | 'select' | 'checkbox' | 'radio';
     required: boolean;
     options?: { label: string; value: any }[];
     validators?: ValidatorFn[];
     defaultValue?: any;
   }
   ```

2. **Create Form Component**:
   ```typescript
   @Component({
     selector: 'app-dynamic-form',
     template: `
       <div [formGroup]="form">
         <div *ngFor="let field of fields">
           <div [ngSwitch]="field.type">
             <div *ngSwitchCase="'text'">
               <label>{{ field.label }}</label>
               <input type="text" [formControlName]="field.key" pInputText>
             </div>
             <div *ngSwitchCase="'select'">
               <label>{{ field.label }}</label>
               <p-dropdown [formControlName]="field.key" [options]="field.options"></p-dropdown>
             </div>
             <!-- Other field types -->
           </div>
           <div *ngIf="form.get(field.key).invalid && form.get(field.key).touched" class="text-red-500">
             Field is invalid
           </div>
         </div>
       </div>
     `
   })
   export class DynamicFormComponent implements OnInit {
     @Input() fields: DynamicField[] = [];
     @Output() formChange = new EventEmitter<FormGroup>();
     
     form: FormGroup;
     
     constructor(private fb: FormBuilder) {}
     
     ngOnInit(): void {
       this.createForm();
     }
     
     private createForm(): void {
       const formControls = {};
       
       this.fields.forEach(field => {
         formControls[field.key] = [
           field.defaultValue ?? '',
           field.validators || []
         ];
       });
       
       this.form = this.fb.group(formControls);
       this.formChange.emit(this.form);
     }
   }
   ```

## Debugging & Troubleshooting

### Common Issues & Solutions

#### 1. Environment Configuration Issues
**Problem**: "Environment file not found" or API calls failing
**Solution**:
- Ensure environment files are copied from fyle-integrations-central
- Check API URLs in environment.json match your local setup
- Verify branding config.json exists for the selected configuration

#### 2. Authentication Issues
**Problem**: "Unauthorized" errors or login redirects
**Solution**:
- Clear browser localStorage: `localStorage.clear()`
- Check JWT token in localStorage
- Verify Fyle client ID in environment configuration
- Ensure auth service is running on correct port

Steps to debug:
1. Open browser DevTools (F12) and check Console for error messages
2. In Application tab, examine LocalStorage for `access_token` value
3. Verify auth configuration in environment file:
```typescript
// Debugging auth configuration
console.log('Auth config:', {
  clientId: environment.fyle_client_id,
  redirectUri: environment.fyle_callback_uri,
  serverUrl: environment.api_url
});
```

#### 3. CORS Issues
**Problem**: Cross-origin request blocked
**Solution**:
- Check API URLs in environment configuration
- Ensure backend services are running
- Verify CORS configuration on backend services

Debugging steps:
1. Check Network tab in DevTools for failed requests with CORS errors
2. Verify API URL configuration:
```typescript
console.log('API URLs:', {
  apiUrl: environment.api_url,
  fyleApiUrl: environment.fyle_api_url
});
```

#### 4. Module Loading Issues
**Problem**: "Cannot resolve module" errors
**Solution**:
- Run `npm install` to ensure all dependencies are installed
- Clear Angular cache: `rm -rf .angular/cache`
- Check import paths in TypeScript files

Error patterns to look for:
```
ERROR in ./src/app/module-name/service.ts
Module not found: Error: Can't resolve 'some-package' in '/path/to/project'
```

#### 5. Styling Issues
**Problem**: Styles not applying or TailwindCSS classes not working
**Solution**:
- Check [tailwind.config.js](mdc:tailwind.config.js) configuration
- Verify CSS variables are defined in branding configurations
- Ensure PrimeNG styles are imported correctly

Common style debugging techniques:
```typescript
// Check if TailwindCSS is working
const element = document.createElement('div');
element.classList.add('bg-red-500', 'text-white', 'p-4');
element.innerHTML = 'TailwindCSS Test';
document.body.appendChild(element);

// Test CSS variables
console.log('CSS Variable test:', 
  getComputedStyle(document.documentElement).getPropertyValue('--primary-color'));
```

#### 6. Build Issues
**Problem**: Build failures or compilation errors
**Solution**:
- Check TypeScript errors: `npx tsc --noEmit`
- Verify all imports are correct
- Check [tsconfig.json](mdc:tsconfig.json) configuration
- Clear node_modules and reinstall: `rm -rf node_modules && npm install`

#### 7. API Integration Issues
**Problem**: API calls failing or returning unexpected data
**Solution**:
- Check Network tab in DevTools for response details
- Verify JWT token is valid and not expired
- Check HTTP headers and request parameters
- Add detailed error logging:

```typescript
// Enhanced error logging
this.apiService.getData().pipe(
  catchError(error => {
    console.error('API Error Details:', {
      status: error.status,
      statusText: error.statusText,
      url: error.url,
      error: error.error,
      message: error.message
    });
    return throwError(() => error);
  })
).subscribe();
```

#### 8. Performance Issues
**Problem**: Slow rendering or unresponsive UI
**Solution**:
- Use Chrome Performance tab to profile app
- Check for memory leaks (improper unsubscribing)
- Use OnPush change detection
- Add trackBy to ngFor loops:

```html
<div *ngFor="let item of items; trackBy: trackById">
  {{ item.name }}
</div>
```

```typescript
trackById(index: number, item: any): number {
  return item.id;
}
```

#### 9. Integration-specific Issues

**QBO Integration Issues**:
- OAuth redirect not working: Check QBO OAuth configuration in environment
- Connection errors: Verify QBO credentials and permissions
- Invalid realm: Ensure QBO realm ID is correct

**NetSuite Integration Issues**:
- Token authentication: Verify NetSuite token and user credentials
- Subsidiary errors: Check NetSuite subsidiary configuration
- Custom segment not appearing: Verify segment configuration in NetSuite

**Xero Integration Issues**:
- OAuth errors: Check Xero app configuration and callback URLs
- Multiple organization selection: Ensure proper organization ID is stored

### Development Tools

#### Browser Extensions
- **Angular DevTools**: For component inspection and debugging
- **Redux DevTools**: For state management debugging (if applicable)
- **Sentry**: Error tracking in development

#### IDE Setup
- **VSCode Extensions**: Angular Language Service, ESLint, Prettier
- **Debugging**: Use browser developer tools for debugging
- **Network Inspection**: Monitor API calls in Network tab

#### Logging & Monitoring
- **Console Logging**: Use `console.error()` for debugging (allowed by ESLint)
- **Sentry Integration**: Automatic error reporting in development
- **Performance Monitoring**: Angular DevTools for performance analysis

## Testing Guidelines

### Running Tests
```bash
# Unit tests with watch mode
npm test

# CI tests (headless Chrome)
npm run unit_test:ci

# Test with coverage
npm test -- --code-coverage

# Run specific test file
npm test -- --include="**/component-name.spec.ts"
```

### Test File Locations
- **Component Tests**: `*.component.spec.ts` files alongside components
- **Service Tests**: `*.service.spec.ts` files alongside services
- **Mock Data**: [src/app/core/services/mock.data.ts](mdc:src/app/core/services/mock.data.ts)
- **Test Configuration**: [karma.conf.js](mdc:karma.conf.js)

### Coverage Reports
1. Run tests with coverage: `npm test -- --code-coverage`
2. Open coverage report: `coverage/index.html`
3. Right-click and select "Reveal in Finder" (macOS) or equivalent
4. Open in browser to view detailed coverage

### Mocking Services for Tests
```typescript
// Basic service mock
const mockService = jasmine.createSpyObj('ServiceName', ['method1', 'method2']);
mockService.method1.and.returnValue(of({ data: 'mock data' }));

// Mock with dynamic response
mockService.method2.and.callFake((param: string) => {
  if (param === 'valid') {
    return of({ success: true });
  } else {
    return throwError(() => new Error('Invalid parameter'));
  }
});

// Mock HTTP with HttpTestingController
let httpMock: HttpTestingController;

beforeEach(() => {
  TestBed.configureTestingModule({
    imports: [HttpClientTestingModule],
    providers: [YourService]
  });
  service = TestBed.inject(YourService);
  httpMock = TestBed.inject(HttpTestingController);
});

it('should call API and return data', () => {
  const mockData = { id: 1, name: 'test' };
  
  service.getData().subscribe(result => {
    expect(result).toEqual(mockData);
  });
  
  const req = httpMock.expectOne('api/data');
  expect(req.request.method).toBe('GET');
  req.flush(mockData);
});
```

## Build & Deployment

### Build Process
The build process includes several automated steps:
1. **Environment Setup**: Process environment variables
2. **Branding Configuration**: Set up brand-specific configs
3. **Angular Build**: Compile and bundle the application
4. **Source Maps**: Generate source maps for Sentry

### Build Configurations
- **Development**: Optimized for development with source maps
- **Production**: Optimized for production with minification
- **Fyle**: Fyle-branded build with specific configurations
- **C1**: Capital One-branded build with specific configurations

### Deployment Preparation
```bash
# Production build
npm run build

# Check bundle sizes
npx webpack-bundle-analyzer dist/fyle-integrations-app/main.*.js

# Test production build locally
npx http-server dist/fyle-integrations-app
```

### Production Build Verification Checklist
1. **Bundle Size**: Check main.js size is reasonable (<1MB ideally)
2. **Environment Config**: Verify production URLs are correct
3. **Branding**: Ensure correct branding is applied
4. **Basic Functionality**: Test login and core features
5. **Performance**: Verify load time is acceptable
6. **Error Tracking**: Confirm Sentry is reporting errors correctly

## Code Quality & Standards

### Linting
```bash
# Run ESLint
npm run lint

# Fix auto-fixable issues
npm run lint -- --fix

# Check specific files
npx eslint src/app/component-name.ts
```

### Code Formatting
- **EditorConfig**: [.editorconfig](mdc:.editorconfig) - Consistent formatting rules
- **ESLint**: Automatic formatting and code quality checks
- **Prettier**: (if configured) Additional formatting rules

### Git Workflow
- **Husky Hooks**: Pre-commit linting and formatting checks
- **Commit Messages**: Follow conventional commit format
- **Branch Naming**: Use descriptive branch names
- **Pull Requests**: Required for code review

## Performance Monitoring

### Bundle Analysis
```bash
# Analyze bundle size
npm run build -- --stats-json
npx webpack-bundle-analyzer dist/fyle-integrations-app/stats.json
```

### Performance Optimization
- **Lazy Loading**: All integration modules are lazy-loaded
- **OnPush Strategy**: Used throughout for change detection optimization
- **Caching**: API responses cached using ts-cacheable
- **Tree Shaking**: Unused code eliminated during build

### Monitoring Tools
- **Angular DevTools**: Performance profiling
- **Lighthouse**: Web performance auditing
- **Sentry**: Runtime performance monitoring

## Coding FAQs

### How to add a new environment variable?
1. Add to environment files: `environment.json`, `fyle-environment.json`, etc.
2. Update environment interface in [src/environments/environment.ts](mdc:src/environments/environment.ts)
3. Use in code via `environment.yourVariableName`

### How to add a new route with guard?
```typescript
// In {feature}-routing.module.ts
const routes: Routes = [
  {
    path: 'feature-path',
    component: FeatureComponent,
    canActivate: [AuthGuard, FeatureGuard]
  }
];
```

### How to create a custom form validator?
```typescript
// Custom validator function
export function customValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const value = control.value;
    
    if (!value) {
      return null;
    }
    
    // Custom validation logic
    if (value.includes('invalid')) {
      return { custom: { message: 'Value contains invalid text' } };
    }
    
    return null;
  };
}

// Usage in form
this.form = this.formBuilder.group({
  field: ['', [Validators.required, customValidator()]]
});
```

### How to implement API caching?
```typescript
import { Cacheable, CacheEvict } from 'ts-cacheable';

// Cacheable GET method
@Cacheable({
  maxAge: 5 * 60 * 1000 // 5 minutes
})
getData(): Observable<Data[]> {
  return this.http.get<Data[]>('/api/data');
}

// Cache eviction on update
@CacheEvict({
  isAll: false,
  fnParams: (id) => [id]
})
updateData(id: number, data: Partial<Data>): Observable<Data> {
  return this.http.put<Data>(`/api/data/${id}`, data);
}

// Clear all cache
@CacheEvict({ isAll: true })
clearAllData(): Observable<void> {
  return this.http.post<void>('/api/clear', {});
}
```

### How to handle multi-tenant branding?
```typescript
// In component
constructor(private brandingService: BrandingService) {}

ngOnInit(): void {
  this.currentBrand = this.brandingService.getBrand();
  this.brandingConfig = this.brandingService.getBrandingConfig();
  
  // Use branding config
  this.logoUrl = this.brandingConfig.logoUrl;
  this.primaryColor = this.brandingConfig.colors.primary;
}
```

### How to implement a global error handler?
```typescript
// Custom error handler
@Injectable()
export class GlobalErrorHandler implements ErrorHandler {
  constructor(
    private messageService: MessageService,
    private sentryService: SentryService
  ) {}

  handleError(error: any): void {
    // Log to Sentry
    this.sentryService.captureException(error);
    
    // Show user friendly message
    this.messageService.add({
      severity: 'error',
      summary: 'Error',
      detail: 'An unexpected error occurred. Please try again later.'
    });
    
    // Console error (for development)
    console.error('Global error handler caught:', error);
  }
}

// Register in app.module.ts
providers: [
  { provide: ErrorHandler, useClass: GlobalErrorHandler }
]
```



